[{"path":"https://ipeagit.github.io/r5r/dev/articles/accessibility.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Accessibility","text":"Accessibility indicators measure ease opportunities, jobs, can reached traveler particular location (Levinson et al. 2020). vignette shows calculate visualize accessibility R using r5r package using reproducible example. example, using sample data set city Porto Alegre (Brazil) included r5r. two ways calculate / visualize accessibility using r5r. quick easy option using r5r::accessibility() function. alternative requires one first calculate travel time matrix, use {accessibility} package. flexible options accessibility package provides wider range options accessibility metrics. cover approaches vignette. start, need increase Java memory + load libraries, build routable transport network.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/articles/accessibility.html","id":"increase-java-memory-and-load-libraries","dir":"Articles","previous_headings":"2. Build routable transport network with setup_r5()","what":"Increase Java memory and load libraries","title":"Accessibility","text":"First, need increase memory available Java load packages used vignette. Please note allocate RAM memory Java loading libraries. build routable transport network r5r, user needs call setup_r5() path directory OpenStreetMap GTFS data stored.","code":"options(java.parameters = \"-Xmx2G\")  library(r5r) library(accessibility) library(sf) library(data.table) library(ggplot2) library(interp) library(h3jsr) library(dplyr) # system.file returns the directory with example data inside the r5r package # set data path to directory containing your own data if not running this example data_path <- system.file(\"extdata/poa\", package = \"r5r\")  r5r_core <- setup_r5(data_path)"},{"path":"https://ipeagit.github.io/r5r/dev/articles/accessibility.html","id":"accessibility-quick-and-easy-approach","dir":"Articles","previous_headings":"","what":"3. Accessibility: quick and easy approach","title":"Accessibility","text":"different types accessibility metrics. One simplest ones cumulative-opportunity metric, counts number opportunities accessible location considering maximum travel time cutoff. ’ll calculating vignette using parameter decay_function = \"step\". example, calculating number schools public healthcare facilities accessible public transport within travel time 20 minutes. sample data provided contains information spatial distribution schools Porto Alegre points$schools column, healthcare facilities points$healthcare column. code compute number schools healthcare accessible considering median multiple travel time estimates departing every minute 60-minute time window, 2pm 3pm. accessibility() function can calculate access multiple opportunities single call, much efficient convenient producing travel time matrix study area manually computing accessibility. Mind r5r::accessibility() also allow users calculate gravity-based accessibility metrics, can calculated setting decay_function one following: \"exponential\" \"fixed_exponential\", \"linear\" \"logistic\". Nonetheless, several types accessibility metrics implemented R5, including floating catchment area metrics, travel cost closest N opportunities, time interval based cumulative opportunity, etc. accessibility package comes .","code":"# read all points in the city points <- fread(file.path(data_path, \"poa_hexgrid.csv\"))  # routing inputs mode <- c(\"WALK\", \"TRANSIT\") max_walk_time <- 30      # in minutes travel_time_cutoff <- 20 # in minutes time_window <- 60        # in minutes departure_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",                                  format = \"%d-%m-%Y %H:%M:%S\")  # calculate accessibility access1 <- r5r::accessibility(r5r_core,                         origins = points,                         destinations = points,                         mode = mode,                         opportunities_colnames = c(\"schools\", \"healthcare\"),                         decay_function = \"step\",                         cutoffs = travel_time_cutoff,                         departure_datetime = departure_datetime,                         max_walk_time = max_walk_time,                         time_window = time_window,                         progress = FALSE)  head(access1) #>                 id opportunity percentile cutoff accessibility #>             <char>      <char>      <int>  <int>         <num> #> 1: 89a901291abffff     schools         50     20             3 #> 2: 89a901291abffff  healthcare         50     20             6 #> 3: 89a9012a3cfffff     schools         50     20             0 #> 4: 89a9012a3cfffff  healthcare         50     20             0 #> 5: 89a901295b7ffff     schools         50     20             6 #> 6: 89a901295b7ffff  healthcare         50     20             4"},{"path":"https://ipeagit.github.io/r5r/dev/articles/accessibility.html","id":"accessibility-flexible-approach","dir":"Articles","previous_headings":"","what":"4. Accessibility: flexible approach","title":"Accessibility","text":"accessibility package provides much flexible approach calculate accessibility estimates. key input travel time matrix, calculate using r5r: Now calculate traditional cumulative opportunity metric like , just need call accessibility::cumulative_cutoff() function, pass travel time matrix land use data input:","code":"# calculate travel time matrix ttm <- r5r::travel_time_matrix(r5r_core,                         origins = points,                         destinations = points,                         mode = mode,                         departure_datetime = departure_datetime,                         max_walk_time = max_walk_time,                         time_window = time_window,                         progress = FALSE) head(ttm) #>            from_id           to_id travel_time_p50 #>             <char>          <char>           <int> #> 1: 89a901291abffff 89a901291abffff               1 #> 2: 89a901291abffff 89a9012a3cfffff              78 #> 3: 89a901291abffff 89a901295b7ffff              45 #> 4: 89a901291abffff 89a901284a3ffff              60 #> 5: 89a901291abffff 89a9012809bffff              47 #> 6: 89a901291abffff 89a901285cfffff              38 # calculate accessibility access_edu <- accessibility::cumulative_cutoff(travel_matrix = ttm,                                          land_use_data = points,                                         opportunity = 'schools',                                         travel_cost = 'travel_time_p50',                                         cutoff = 20)  access_health <- accessibility::cumulative_cutoff(travel_matrix = ttm,                                          land_use_data = points,                                         opportunity = 'healthcare',                                         travel_cost = 'travel_time_p50',                                         cutoff = 20) #> Warning: 'land_use_data$healthcare' contains NA values, which may produce NAs #> in the final output. head(access_edu) #>                 id schools #>             <char>   <int> #> 1: 89a9012124fffff       1 #> 2: 89a9012126bffff       4 #> 3: 89a9012127bffff       2 #> 4: 89a90128003ffff       8 #> 5: 89a90128007ffff       5 #> 6: 89a9012800bffff       8 head(access_health) #>                 id healthcare #>             <char>      <int> #> 1: 89a9012124fffff          0 #> 2: 89a9012126bffff          1 #> 3: 89a9012127bffff          1 #> 4: 89a90128003ffff          3 #> 5: 89a90128007ffff          1 #> 6: 89a9012800bffff          3"},{"path":"https://ipeagit.github.io/r5r/dev/articles/accessibility.html","id":"map-accessibility","dir":"Articles","previous_headings":"","what":"5. Map Accessibility","title":"Accessibility","text":"final step mapping accessibility results calculated earlier. can use least two different approaches map accessibility estimates.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/accessibility.html","id":"choropleth-maps","dir":"Articles","previous_headings":"5. Map Accessibility","what":"5.1 Choropleth maps","title":"Accessibility","text":"first approach use choropleth maps. example, point reference centroid H3 hexagonal grid fine spatial resolution. case, basically need retrieve polygons spatial grid, merge accessibility estimates.","code":"# retrieve polygons of H3 spatial grid grid <- h3jsr::cell_to_polygon(points$id, simple = FALSE)  # merge accessibility estimates access_sf <- left_join(grid, access1, by = c('h3_address'='id'))  # plot ggplot() +   geom_sf(data = access_sf, aes(fill = accessibility), color= NA) +   scale_fill_viridis_c(direction = -1, option = 'B') +   labs(fill = \"Number of\\nfacilities within\\n20 minutes\") +   theme_minimal() +   theme(axis.title = element_blank()) +   facet_wrap(~opportunity) +   theme_void()"},{"path":"https://ipeagit.github.io/r5r/dev/articles/accessibility.html","id":"spatial-interpolation","dir":"Articles","previous_headings":"5. Map Accessibility","what":"5.2 Spatial interpolation","title":"Accessibility","text":"alternative approach use accessibility estimates reference point spatial interpolation can smoother spatial distribution. code demonstrates , producing prettier map.","code":"# interpolate estimates to get spatially smooth result access_schools <- access1 %>%    filter(opportunity == \"schools\") %>%   inner_join(points, by='id') %>%   with(interp::interp(lon, lat, accessibility)) %>%   with(cbind(acc=as.vector(z),  # Column-major order              x=rep(x, times=length(y)),              y=rep(y, each=length(x)))) %>% as.data.frame() %>% na.omit() %>%   mutate(opportunity = \"schools\")  access_health <- access1 %>%    filter(opportunity == \"healthcare\") %>%   inner_join(points, by='id') %>%   with(interp::interp(lon, lat, accessibility)) %>%   with(cbind(acc=as.vector(z),  # Column-major order              x=rep(x, times=length(y)),              y=rep(y, each=length(x)))) %>% as.data.frame() %>% na.omit() %>%   mutate(opportunity = \"healthcare\")  access.interp <- rbind(access_schools, access_health)  # find results' bounding box to crop the map bb_x <- c(min(access.interp$x), max(access.interp$x)) bb_y <- c(min(access.interp$y), max(access.interp$y))  # extract OSM network, to plot over map street_net <- street_network_to_sf(r5r_core)  # plot ggplot(na.omit(access.interp)) +   geom_sf(data = street_net$edges, color = \"gray55\", size=0.01, alpha = 0.7) +   geom_contour_filled(aes(x=x, y=y, z=acc), alpha=.7) +   scale_fill_viridis_d(direction = -1, option = 'B') +   scale_x_continuous(expand=c(0,0)) +   scale_y_continuous(expand=c(0,0)) +   coord_sf(xlim = bb_x, ylim = bb_y, datum = NA) +    labs(fill = \"Number of\\nfacilities within\\n20 minutes\") +   theme_void() +   facet_wrap(~opportunity)"},{"path":"https://ipeagit.github.io/r5r/dev/articles/accessibility.html","id":"cleaning-up-after-usage","dir":"Articles","previous_headings":"5. Map Accessibility > 5.2 Spatial interpolation","what":"Cleaning up after usage","title":"Accessibility","text":"r5r objects still allocated amount memory previously set done calculations. order remove existing r5r object reallocate memory using, use stop_r5 function followed call Java’s garbage collector, follows: suggestions want report error, please visit package GitHub page.","code":"r5r::stop_r5(r5r_core) rJava::.jgc(R.gc = TRUE)"},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/articles/detailed_itineraries.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Trip planning with detailed_itineraries()","text":"r5r extremely efficient functions run multimodal routing accessibility analysis. general, though, functions output essential information required transport planning applications simulation models. Moreover, algorithms behind function return optimal route terms minimizing travel times /monetary costs. Sometimes, though, like simple route planning analysis extract information route. Also, might interested finding fastest route suboptimal route alternatives . detailed_itineraries() function comes . function outputs origin destination pair detailed route plan information per leg, meaning route taken single mode walk bus stop. R5’s documentation legs referred ‘segments’, word usually used describe small sections transport network. Results contain information mode, waiting times, travel times distances leg (‘segment’ R5 documentation) trip geometry. Moreover, detailed_itineraries() function can also return results multiple route alternatives. Let’s see function works using reproducible example. obs. recommend using detailed_itineraries() case interested finding suboptimal alternative routes /need geometry information outputs. want route information detailed trip segments, strongly encourage use expanded_travel_time_matrix() function.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/detailed_itineraries.html","id":"build-routable-transport-network-with-setup_r5","dir":"Articles","previous_headings":"","what":"2. Build routable transport network with setup_r5()","title":"Trip planning with detailed_itineraries()","text":"First, let’s load libraries build multimodal transport network. example ’ll using sample data set city Porto Alegre (Brazil) included r5r.","code":"# increase Java memory options(java.parameters = \"-Xmx2G\")  # load libraries library(r5r) library(sf) library(ggplot2) library(data.table)  # build a routable transport network with r5r data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path)  # routing inputs mode <- c('walk', 'transit') max_trip_duration <- 60 # minutes  # departure time departure_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",                                   format = \"%d-%m-%Y %H:%M:%S\")  # load origin/destination points poi <- fread(file.path(data_path, \"poa_points_of_interest.csv\"))"},{"path":"https://ipeagit.github.io/r5r/dev/articles/detailed_itineraries.html","id":"detailed-info-by-trip-segment-for-multiple-trip-alternatives","dir":"Articles","previous_headings":"","what":"3. Detailed info by trip segment for multiple trip alternatives","title":"Trip planning with detailed_itineraries()","text":"example , want know alternative routes single origin/destination pair. get multiple route alternatives, need set shortest_path = FALSE. Note example set suboptimal_minutes = 8. case, r5r consider sub-optimal routes arrive 8 minutes arrival optimal route. output data.frame sf object, can easily visualize results.","code":"# set inputs origins <- poi[10,] destinations <- poi[12,] mode <- c(\"WALK\", \"TRANSIT\") max_walk_time <- 60 departure_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",                                  format = \"%d-%m-%Y %H:%M:%S\")  # calculate detailed itineraries det <- detailed_itineraries(r5r_core = r5r_core,                             origins = origins,                             destinations = destinations,                             mode = mode,                             departure_datetime = departure_datetime,                             max_walk_time = max_walk_time,                             suboptimal_minutes = 8,                             shortest_path = FALSE)  head(det) #> Simple feature collection with 6 features and 16 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -51.24094 ymin: -30.05 xmax: -51.19762 ymax: -29.99729 #> Geodetic CRS:  WGS 84 #>            from_id  from_lat  from_lon                          to_id    to_lat #> 1 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 2 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 3 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 4 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 5 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 6 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #>      to_lon option departure_time total_duration total_distance segment mode #> 1 -51.22875      1       14:09:10           36.2           9460       1 WALK #> 2 -51.22875      1       14:09:10           36.2           9460       2 RAIL #> 3 -51.22875      1       14:09:10           36.2           9460       3 WALK #> 4 -51.22875      1       14:09:10           36.2           9460       4  BUS #> 5 -51.22875      1       14:09:10           36.2           9460       5 WALK #> 6 -51.22875      2       14:09:10           43.9           8773       1 WALK #>   segment_duration wait distance  route                       geometry #> 1              4.6  0.0      174        LINESTRING (-51.1981 -29.99... #> 2              6.6  1.3     4796 LINHA1 LINESTRING (-51.19763 -29.9... #> 3              5.7  0.0      256        LINESTRING (-51.22827 -30.0... #> 4             10.4  4.4     4083    188 LINESTRING (-51.22926 -30.0... #> 5              3.2  0.0      151        LINESTRING (-51.22949 -30.0... #> 6              4.6  0.0      174        LINESTRING (-51.1981 -29.99..."},{"path":"https://ipeagit.github.io/r5r/dev/articles/detailed_itineraries.html","id":"visualize-results","dir":"Articles","previous_headings":"3. Detailed info by trip segment for multiple trip alternatives","what":"3.1 Visualize results","title":"Trip planning with detailed_itineraries()","text":"Static visualization ggplot2 package: provide geographic context visualization results ggplot2, can also use street_network_to_sf(( function extract OSM street network used routing.","code":"# extract OSM network street_net <- street_network_to_sf(r5r_core)  # extract public transport network transit_net <- r5r::transit_network_to_sf(r5r_core)  # plot fig <- ggplot() +         geom_sf(data = street_net$edges, color='gray85') +         geom_sf(data = subset(det, option <4), aes(color=mode)) +         facet_wrap(.~option) +          theme_void()  fig # SAVE image ggsave(plot = fig, filename = 'inst/img/vig_detailed_ggplot.png',         height = 5, width = 15, units='cm', dpi=200)"},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/articles/detailed_itineraries.html","id":"combining-orings-and-destinations","dir":"Articles","previous_headings":"4. A few options:","what":"4.1 Combining orings and destinations","title":"Trip planning with detailed_itineraries()","text":"default, detailed_itineraries() query routes 1st origin 1st destination, 2nd origin 2nd destination, . like query routes origins destinations can simply set all_to_all = TRUE.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/detailed_itineraries.html","id":"keep-geometry-data-in-the-output","dir":"Articles","previous_headings":"4. A few options:","what":"4.2 Keep geometry data in the output","title":"Trip planning with detailed_itineraries()","text":"default, detailed_itineraries() return spatial geometry results. prevent retrieving information can simply set drop_geometry = TRUE.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/detailed_itineraries.html","id":"hack-for-frequency-based-gtfs-feeds","dir":"Articles","previous_headings":"","what":"5. Hack for frequency-based GTFS feeds","title":"Trip planning with detailed_itineraries()","text":"Please note detailed_itineraries() functions run frequency-based GTFS feeds. simple hack overcome problem convert GTFS data frequencies time tables. can easily done using gtfstools package. : … now can use r5r stop_times_gtfs.zip.","code":"library(gtfstools)  # location of your frequency-based GTFS freq_gtfs_file <- system.file(\"extdata/spo/spo.zip\", package = \"r5r\")  # read GTFS data freq_gtfs <- gtfstools::read_gtfs(freq_gtfs_file)  # convert from frequencies to time tables stop_times_gtfs <- gtfstools::frequencies_to_stop_times(freq_gtfs)  # save it as a new GTFS.zip file gtfstools::write_gtfs(gtfs = stop_times_gtfs,                       path = tempfile(pattern = 'stop_times_gtfs', fileext = '.zip'))"},{"path":"https://ipeagit.github.io/r5r/dev/articles/detailed_itineraries.html","id":"cleaning-up-after-usage","dir":"Articles","previous_headings":"5. Hack for frequency-based GTFS feeds","what":"Cleaning up after usage","title":"Trip planning with detailed_itineraries()","text":"r5r objects still allocated amount memory previously set done calculations. order remove existing r5r object reallocate memory using, use stop_r5 function followed call Java’s garbage collector, follows: suggestions want report error, please visit package GitHub page.","code":"r5r::stop_r5(r5r_core) rJava::.jgc(R.gc = TRUE)"},{"path":"https://ipeagit.github.io/r5r/dev/articles/faq.html","id":"why-do-some-trips-fromto-the-same-id-have-travel-times-larger-than-zero","dir":"Articles","previous_headings":"","what":"1. Why do some trips from/to the same ID have travel times larger than zero?","title":"FAQ - Frequently Asked Questions","text":"can happen input point distant routable road segment. case, R5 snap point closest road segment can traversed selected transport mode, consider person walk Euclidean distance input point snapped location. R5 accounting walking time “crow flies” routing.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/faq.html","id":"is-it-possible-to-run-r5r-with-custom-modifications-to-street-nework-data","dir":"Articles","previous_headings":"","what":"2. Is it possible to run r5r with custom modifications to street nework data?","title":"FAQ - Frequently Asked Questions","text":"r5r includes convenient function modify_osm_carspeeds() allows one build routable network modified OSM car speeds account different scenarios traffic congestion road closure. See vignette. changes OSM network (e.g. including new road link), need edit OpenStreetMap .pbf file direclty using r5r. , can edit .pbf file JOSM (https://wiki.openstreetmap.org/wiki/JOSM). Mind OpenStreetMap tags can changed removed data.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/faq.html","id":"why-are-the-output-results-of-time_travel_matrix-and-detailed_itineraries-different","dir":"Articles","previous_headings":"","what":"3. Why are the output results of time_travel_matrix() and detailed_itineraries() different?","title":"FAQ - Frequently Asked Questions","text":"functions time_travel_matrix() (expanded_time_travel_matrix) detailed_itineraries() use different routing algorithms, explained documentation functions. , advise use combine output functions.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/faq.html","id":"what-does-the-error-geographic-extent-of-street-layer-exceeds-limit-mean-and-what-to-do-about-it","dir":"Articles","previous_headings":"","what":"4. What does the ERROR “Geographic extent of street layer exceeds limit” mean? and what to do about it?","title":"FAQ - Frequently Asked Questions","text":"error message says something like: “Geographic extent street layer (5315196 km2) exceeds limit 975000 km2”. means study area large. Unfortunately, limit hardcoded upstream R5 change r5r. advised solution reduce extent OpenStreetMap.pbf smaller area interest. One can using Osmosis software. code illustrates calling Osmosis within R. need donwload Osmosis program computer. latest releases can downloaded . Next, can use step--step illustrated example :","code":"# get the bounding box of your study area study_area_polygon <- geobr::read_state(code_state = \"ES\") area_bbox <- sf::st_bbox(study_area_polygon)  # input: the path to osmosis and the large pbf file in your local computer osmosis_path <- \"./osmosis_dir/bin/osmosis.bat\" large_pbf_path <- \"./project_dir/large.pbf\"  # path where you want to save the smaller .pbf file smaller_pbf <-\"./project_dir/smaller.pbf\"  # prepare call to osmosis osmosis_cmd <- sprintf(\"%s --read-pbf %s --bounding-box left=%s bottom=%s right=%s top=%s --write-pbf %s\",                        osmosis_path, large_pbf_path,                         area_bbox@xmin, area_bbox@ymin, area_bbox@xmax, area_bbox@ymax,                        smaller_pbf)  # call to osmosis shell(osmosis_cmd, translate = TRUE)"},{"path":"https://ipeagit.github.io/r5r/dev/articles/faq.html","id":"is-it-possible-to-use-custom-car-speed-data-with-r5r","dir":"Articles","previous_headings":"","what":"5. Is it possible to use custom car speed data with r5r?","title":"FAQ - Frequently Asked Questions","text":"default, R5 considers max speed limit road set OpenStreetMap data. Unfortunately, currently easy way change car speeds road segments within R. Although probably editing osm.pbf file using programs. See issue #289.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/faq.html","id":"why-do-i-get-identical-results-by-public-transport-and-walking","dir":"Articles","previous_headings":"","what":"6. Why do I get identical results by public transport and walking?","title":"FAQ - Frequently Asked Questions","text":"travel time / accessibility results identical public transport walking, probably R5 detect public transport network available requested trips. likely occur case set departure_datetime outside calendar public transport operations GTFS data. Check calendar.txt file gtfs.zip feed. Alternatively, occur public transport trip option faster walking given origin-destination pair queried.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Accounting for monetary costs","text":"Considering monetary costs public transport trips calculation travel time matrices accessibility estimates major challenge faced researchers planning practitioners. public transport system can set rules calculating fares, varying levels complexity. Moreover, important trade offs travel time monetary costs across multiple trip alternatives currently captured multimodal routing engine, except R5. R5 native capabilities open architecture creating including fare structures routing models, making possible estimate travel time matrices accessibility estimates simultaneously considering different combinations time monetary cost cutoffs. main challenge, however, specific fare structure city needs programmed Java tightly integrated R5, making functionality reach know code Java (.e. us!). help tackle challenge, r5r simple generic rule-based fare structure can configured via predefined set properties rules can set directly R using external tools text editors spreadsheets. approach currently available r5r able account monetary costs public transport systems follow simple set fare rules according cost journey depends combinations modes (see details ). vignette shows features r5rs fare structure. also uses reproducible example demonstrate configure fare structure account monetary costs generating travel time matrices accessibility estimates r5r.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"details","dir":"Articles","previous_headings":"1. Introduction","what":"1.1 Details","title":"Accounting for monetary costs","text":"common feature among many public transport services possibility discounted transfers, passengers can use single ticket trip composed multiple rides sometimes combining different transport modes. trips usually come discount second subsequent fares, well limit number discounted transfers user can make /time limit using discount. type fare structure currently covered r5r. acknowledge several types fare rules vary one public transport system another. According rules, cost journey can differ, example, depending : different costs trip leg, transport mode route; distance- zone-based fares; different fares types riders (e.g elderly people students) time day (e.g. peak -peak hours); among many others rules. , taking possible rules consideration calculating monetary cost multimodal can quite difficult. r5r currently cover complex fare rules. fare calculator currently available r5r intended robust solution can take consideration public transport systems specific fare rules. Herculean task. features included r5r’s fare calculator inspired empirical observations Brazilian public transport systems, meant used mainly Access Opportunities project. Everyone else welcome use , current features suit needs. obs. GTFS format features specifying public transport fares, features quite limited enough adequately representing many use cases. new version specification currently developed Fares V2, may take time approved transport agencies actually start providing GTFS feeds full fare information.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"reprex-the-public-transport-system-of-porto-alegre","dir":"Articles","previous_headings":"","what":"2. Reprex: the public transport system of Porto Alegre","title":"Accounting for monetary costs","text":"vignette, using sample data set city Porto Alegre (Brazil) included r5r. start, need increase memory available Java load packages used vignette Porto Alegre relatively straightforward public transport system, vast majority population rely transit ride buses. city also metropolitan rail service connects city center neighboring northbound municipalities. system can seen map .  According fare rules Porto Alegre, Brazilian cities, cost journey depends combination number subsequent trips /transport modes. case Porto Alegre, fare rules follows: bus ticket costs R$ 4.80. Riding second bus adds R$ 2.40 total cost. Subsequent bus rides cost full ticket price R$ 4.80. train ticket costs R$ 4.50. passenger enters train station, can take unlimited amount train trips long doesn’t leave station. integrated fare bus train 10% discount, totals R$ 8.37. following sections, demonstrate implement rules within r5r’s fare calculator.","code":"options(java.parameters = \"-Xmx2G\")  library(r5r) library(sf) library(data.table) library(ggplot2) library(patchwork) library(dplyr) library(h3jsr) # setup and load Porto Alegre multimodal network into memory  # system.file returns the directory with example data inside the r5r package # set data path to directory containing your own data if not using the examples data_path <- system.file(\"extdata/poa\", package = \"r5r\")  r5r_core <- setup_r5(data_path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  # load transit network as an SF transit_network <- transit_network_to_sf(r5r_core)  # map ggplot() +   geom_sf(data=transit_network$routes, aes(color=mode)) +   theme_void()"},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"setting-up-the-fare-structure","dir":"Articles","previous_headings":"","what":"3. Setting up the fare structure","title":"Accounting for monetary costs","text":"three support functions r5r help users configure fare structure: setup_fare_structure() analyses study area’s GTFS builds ‘skeleton’ fare structure structure parameters need set; write_fare_structure() read_fare_structure() allow saving current fare structure settings disk, reading back memory. settings saved standard .csv files inside zipped folder. files can edited outside R session using external text editors spreadsheet software, user’s convenience. First, need call setup_fare_structure(), providing three parameters: current r5r_core object, base_fare used populate fare structure, parameters identifies main property route defines different fares. example , base_fare standard bus ticket price R$ 4.80. also stating = \"MODE\", transport mode fares integration rules. Users can also create fare structure fare rules routes differ \"AGENCY_ID\" \"AGENCY_NAME\", simply set = \"GENERIC\" entire system follows rules. Now let’s check contents fare_structure object. can see simply list properties data.frames.","code":"fare_structure <- setup_fare_structure(r5r_core,                                         base_fare = 4.8,                                        by = \"MODE\") head(fare_structure, n=7) #> $max_discounted_transfers #> [1] 1 #>  #> $transfer_time_allowance #> [1] 120 #>  #> $fare_cap #> [1] Inf #>  #> $fares_per_type #>      type unlimited_transfers allow_same_route_transfer use_route_fare  fare #>    <char>              <lgcl>                    <lgcl>         <lgcl> <num> #> 1:    BUS               FALSE                     FALSE          FALSE   4.8 #> 2:   RAIL               FALSE                     FALSE          FALSE   4.8 #>  #> $fares_per_transfer #>    first_leg second_leg  fare #>       <char>     <char> <num> #> 1:       BUS        BUS   4.8 #> 2:      RAIL        BUS   4.8 #> 3:       BUS       RAIL   4.8 #> 4:      RAIL       RAIL   4.8 #>  #> $fares_per_route #>      agency_id                                 agency_name  route_id #>         <char>                                      <char>    <char> #>   1:     TRENS                                    TRENSURB    LINHA1 #>   2:     TRENS                                    TRENSURB LINHAAERO #>   3:      EPTC Empresa Publica de Transportes e Circulação      1112 #>   4:      EPTC Empresa Publica de Transportes e Circulação       149 #>   5:      EPTC Empresa Publica de Transportes e Circulação       165 #>  ---                                                                 #> 113:      EPTC Empresa Publica de Transportes e Circulação        T7 #> 114:      EPTC Empresa Publica de Transportes e Circulação        T8 #> 115:      EPTC Empresa Publica de Transportes e Circulação        T9 #> 116:      EPTC Empresa Publica de Transportes e Circulação      TR60 #> 117:      EPTC Empresa Publica de Transportes e Circulação      TR62 #>      route_short_name                           route_long_name   mode #>                <char>                                    <char> <char> #>   1:           LINHA1 ESTACAO MERCADO ATE ESTACAO NOVO HAMBURGO   RAIL #>   2:             AREO                        AEROMOVEL TRENSURB   RAIL #>   3:             1112                         HIPICA / TRISTEZA    BUS #>   4:              149                                    ICARAI    BUS #>   5:              165                                     COHAB    BUS #>  ---                                                                   #> 113:               T7                     NILO / PRAIA DE BELAS    BUS #> 114:               T8                       CAMPUS  /  FARRAPOS    BUS #> 115:               T9                                       PUC    BUS #> 116:             TR60                         TRONCAL TRI‘NGULO    BUS #> 117:             TR62                          TRONCAL BALTAZAR    BUS #>      route_fare fare_type #>           <num>    <char> #>   1:        4.8      RAIL #>   2:        4.8      RAIL #>   3:        4.8       BUS #>   4:        4.8       BUS #>   5:        4.8       BUS #>  ---                      #> 113:        4.8       BUS #> 114:        4.8       BUS #> 115:        4.8       BUS #> 116:        4.8       BUS #> 117:        4.8       BUS #>  #> $debug_settings #> $debug_settings$output_file #> [1] \"\" #>  #> $debug_settings$trip_info #> [1] \"MODE\""},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"global-properties","dir":"Articles","previous_headings":"3. Setting up the fare structure","what":"3.1 Global Properties","title":"Accounting for monetary costs","text":"Let’s configure global properties first, ones applied entire system.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"max_discounted_transfers","dir":"Articles","previous_headings":"3. Setting up the fare structure > 3.1 Global Properties","what":"max_discounted_transfers","title":"Accounting for monetary costs","text":"Note max_discounted_transfers set 1 default. means passenger gets fare discount first transfer buses, pay full fare price subsequent transfers.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"transfer_time_allowance","dir":"Articles","previous_headings":"3. Setting up the fare structure > 3.1 Global Properties","what":"transfer_time_allowance","title":"Accounting for monetary costs","text":"default, transfer_time_allowance set 120 minutes. set 60 minutes fit use case (passengers 60 minutes take second bus discounted fare, otherwise full fare charged).","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"fare_cap","dir":"Articles","previous_headings":"3. Setting up the fare structure > 3.1 Global Properties","what":"fare_cap","title":"Accounting for monetary costs","text":"Finally, fare_cap setting indicates maximum value can charged trip, beyond subsequent rides free charge. example, can leave fare_cap set default Inf value feature applicable Porto Alegre. can check update values components:","code":"fare_structure$max_discounted_transfers #> [1] 1 fare_structure$transfer_time_allowance <- 60 # update transfer_time_allowance fare_structure$fare_cap #> [1] Inf"},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"configure-fares-by-transport-mode","dir":"Articles","previous_headings":"3. Setting up the fare structure","what":"3.2 Configure fares by transport mode","title":"Accounting for monetary costs","text":"configure mode-, transfer-, route-specific properties, can use three data.frames inside fare_structure list. Let’s configure modes first. , can see fares_per_type data.frame contains five columns: mode: transport mode rules row refer ; unlimited_transfers: logical value TRUE FALSE indicates transport mode allows unlimited transfers trips mode, metro/subway system passenger pays fare access station can use many services wants long doesn’t exit system; allow_same_route_transfer: logical value indicating discounted transfer can done vehicles route; use_route_fare: another logical value indicates route fare, routes mode use fare indicated table; fare: full fare price mode. need small changes fares_per_type table accomodate fare rules Porto Alegre. \"RAIL\" mode, need set unlimited_transfers allow_same_route_transfer TRUE, update fare 4.50. \"BUS\" mode, can let allow_same_route_transfer set default FALSE value, even though discount transfers buses (set following section), discount valid transferring buses within route (example, bus route T1 another T1). ’ll changes , using data.table notation. Checking results , everything looks OK:","code":"fare_structure$fares_per_type #>      type unlimited_transfers allow_same_route_transfer use_route_fare  fare #>    <char>              <lgcl>                    <lgcl>         <lgcl> <num> #> 1:    BUS               FALSE                     FALSE          FALSE   4.8 #> 2:   RAIL               FALSE                     FALSE          FALSE   4.8 fare_structure$fares_per_type[type == \"RAIL\", unlimited_transfers := TRUE] fare_structure$fares_per_type[type == \"RAIL\", fare := 4.50] fare_structure$fares_per_type[type == \"RAIL\", allow_same_route_transfer := TRUE] fare_structure$fares_per_type #> Index: <type> #>      type unlimited_transfers allow_same_route_transfer use_route_fare  fare #>    <char>              <lgcl>                    <lgcl>         <lgcl> <num> #> 1:    BUS               FALSE                     FALSE          FALSE   4.8 #> 2:   RAIL                TRUE                      TRUE          FALSE   4.5"},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"configure-fares-by-transfers","dir":"Articles","previous_headings":"3. Setting up the fare structure","what":"3.3 Configure fares by transfers","title":"Accounting for monetary costs","text":"fare rules transfer stored fares_per_transfer data.frame, shown . row contains fare prices transfers modes specified first_leg second_leg columns. Let’s update fare_per_transfer account actual integration rules Porto Alegre. fare “BUS” “BUS” integration composed 4.80 first leg plus 2.40 second leg, equals total fare 7.20. Transfers “BUS” “RAIL” (direction) cost 8.37, 10% discount applied. Let’s make final update data.frame account . Transfers “RAIL” “RAIL” free unlimited, already accounted field unlimited_transfers fare_per_mode table. Thus, equivalent row fare_per_transfer data.frame needs removed. leave row fare_per_transfer, transfers “RAIL” “RAIL” count global max_discounted_transfers allowance. changes applied, fare_per_transfer data.frame look like :","code":"fare_structure$fares_per_transfer #>    first_leg second_leg  fare #>       <char>     <char> <num> #> 1:       BUS        BUS   4.8 #> 2:      RAIL        BUS   4.8 #> 3:       BUS       RAIL   4.8 #> 4:      RAIL       RAIL   4.8 # conditional update fare value fare_structure$fares_per_transfer[first_leg == \"BUS\" & second_leg == \"BUS\", fare := 7.2] # conditional update fare value fare_structure$fares_per_transfer[first_leg != second_leg, fare := 8.37]  # use fcase instead ? fare_structure$fares_per_transfer[, fare := fcase(first_leg == \"BUS\" & second_leg == \"BUS\", 7.2,                                                  first_leg != second_leg, 8.37)] # remove row fare_structure$fares_per_transfer <- fare_structure$fares_per_transfer[!(first_leg == \"RAIL\" & second_leg == \"RAIL\")] fare_structure$fares_per_transfer #>    first_leg second_leg  fare #>       <char>     <char> <num> #> 1:       BUS        BUS  7.20 #> 2:      RAIL        BUS  8.37 #> 3:       BUS       RAIL  8.37"},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"routes-configuration","dir":"Articles","previous_headings":"3. Setting up the fare structure","what":"3.4 Routes configuration","title":"Accounting for monetary costs","text":"information fare price route stored fares_per_route data.frame. , can see sample bus train routes Porto Alegre. case special routes (e.g. express services) specific fares, values can updated fares_per_route data.frame. Basic route information taken directly GTFS data (agency, route id names, mode, etc), route_fare fare_type columns added specifically r5r fare structure. route_fare: used set specific fare route. field can used represent services many unique fares, metropolitan / suburban trains buses. used together use_route_fare column fares_per_type table: route_fare field considered r5r fare structure use_route_fare mode set TRUE. fare_type: used link route information fares_per_type fares_per_transfer tables. example, fare_type always mode, chose parameter calling setup_fare_structure earlier (chosen discriminate fares agency, example). actually don’t change fares_per_route table, example. matter route_fare value wrong “RAIL” lines, using fares set fares_per_type fares_per_transfer already set correctly . Now fare_structure complete, can use calculate travel time matrices accessibility accounting monetary cost cutoffs. Let’s see ’s done next sections.","code":"tail(fare_structure$fares_per_route) #>    agency_id                                 agency_name route_id #>       <char>                                      <char>   <char> #> 1:      EPTC Empresa Publica de Transportes e Circulação       T6 #> 2:      EPTC Empresa Publica de Transportes e Circulação       T7 #> 3:      EPTC Empresa Publica de Transportes e Circulação       T8 #> 4:      EPTC Empresa Publica de Transportes e Circulação       T9 #> 5:      EPTC Empresa Publica de Transportes e Circulação     TR60 #> 6:      EPTC Empresa Publica de Transportes e Circulação     TR62 #>    route_short_name       route_long_name   mode route_fare fare_type #>              <char>                <char> <char>      <num>    <char> #> 1:               T6         TRANSVERSAL 6    BUS        4.8       BUS #> 2:               T7 NILO / PRAIA DE BELAS    BUS        4.8       BUS #> 3:               T8   CAMPUS  /  FARRAPOS    BUS        4.8       BUS #> 4:               T9                   PUC    BUS        4.8       BUS #> 5:             TR60     TRONCAL TRI‘NGULO    BUS        4.8       BUS #> 6:             TR62      TRONCAL BALTAZAR    BUS        4.8       BUS"},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"calculating-travel-time-and-accessibiilty-accounting-for-monetary-costs","dir":"Articles","previous_headings":"","what":"4. Calculating travel time and accessibiilty accounting for monetary costs","title":"Accounting for monetary costs","text":"travel_time_matrix() accessibility() functions two new parameters account monetary costs thresholds: fare_structure: settings object ’ve working . max_fare: maximum total fare can used trip.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"travel-time-with-monetary-cost","dir":"Articles","previous_headings":"4. Calculating travel time and accessibiilty accounting for monetary costs","what":"4.1 Travel time with monetary cost","title":"Accounting for monetary costs","text":"following example shows travel time differences monetary costs accounted , using travel_time_matrix() function. , can see sample travel time differences without monetary cost restriction. can see trips affected (travel_time_unl == travel_time_500), trips take little longer complete (travel_time_500 > travel_time_unl), trips completed (travel_time_500 == NA). plots show overall distribution travel time differences unreachable destinations:","code":"## load input data points <- read.csv(system.file(\"extdata/poa/poa_hexgrid.csv\", package = \"r5r\"))  # calculate travel times function calculate_travel_times <- function(fare) {   ttm_df <- travel_time_matrix(     r5r_core,     origins = points,     destinations = points,     mode = c(\"WALK\", \"TRANSIT\"),     departure_datetime = as.POSIXct(       \"13-05-2019 14:00:00\",       format = \"%d-%m-%Y %H:%M:%S\"     ),     time_window = 1,     fare_structure = fare_structure,     max_fare = fare,     max_trip_duration = 40,     max_walk_time = 20   )    return(ttm_df) }   # calculate travel times, and combine results ttm <- calculate_travel_times(fare = Inf) #> Loading required namespace: testthat ttm_500 <- calculate_travel_times(fare = 5)  # merge results ttm[ttm_500, on = .(from_id, to_id), travel_time_500 := i.travel_time_p50] ttm[, travel_time_unl := travel_time_p50] ttm[, travel_time_p50 := NULL] tail(ttm, 10) #>             from_id           to_id travel_time_500 travel_time_unl #>              <char>          <char>           <int>           <int> #>  1: 89a90166da7ffff 89a90129c2bffff              38              36 #>  2: 89a90166da7ffff 89a90129aa7ffff              33              30 #>  3: 89a90166da7ffff 89a90e93497ffff              32              32 #>  4: 89a90166da7ffff 89a90129807ffff              39              38 #>  5: 89a90166da7ffff 89a90129b5bffff              34              34 #>  6: 89a90166da7ffff 89a90129dd7ffff              37              37 #>  7: 89a90166da7ffff 89a90129bbbffff              33              33 #>  8: 89a90166da7ffff 89a90129bd7ffff              26              26 #>  9: 89a90166da7ffff 89a90129a47ffff              19              19 #> 10: 89a90166da7ffff 89a90166da7ffff               0               0 # plot of overall travel time differences between limited and unlimited cost travel time matrices  time_difference = ttm[!is.na(travel_time_500), .(count = .N),                        by = .(travel_time_unl, travel_time_500)]  p1 <- ggplot(time_difference, aes(y = travel_time_unl, x = travel_time_500)) +   geom_point(size = 0.7) +   coord_fixed() +   scale_x_continuous(breaks = seq(0, 45, 5)) +   scale_y_continuous(breaks = seq(0, 45, 5)) +   theme_light() +   theme(legend.position = \"none\") +   labs(y = \"travel time (minutes)\\nunestricted monetary cost\",        x = \"travel time (minutes)\\nmonetary cost restricted to BRL 5.00\"        )  # plot of unreachable destinations when the monetary cost limit is too low unreachable <- ttm[, .(count = .N), by = .(travel_time_unl, is.na(travel_time_500))] unreachable[, perc := count / sum(count, na.rm = T), by = .(travel_time_unl)] unreachable <- unreachable[is.na == TRUE] unreachable <- na.omit(unreachable)  p2 <- ggplot(unreachable, aes(x=travel_time_unl, y=perc)) +   geom_col() +   coord_flip() +   scale_x_continuous(breaks = seq(0, 45, 5)) +   scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2),                       labels = paste0(seq(0, 100, 20), \"%\")) +   theme_light() +   labs(x = \"travel time (minutes)\\nwithout monetary cost restriction\",        y = \"% of unreachable destinations\\nconsidering a R$ 5.00 monetary cost limit\")  # combine both plots using patchwork p1 + p2 + plot_annotation(subtitle = \"Comparing travel times with and without monetary cost restriction\")"},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"calculating-accessibility-with-monetary-cost","dir":"Articles","previous_headings":"4. Calculating travel time and accessibiilty accounting for monetary costs","what":"4.2 Calculating accessibility with monetary cost","title":"Accounting for monetary costs","text":"Now, can answer questions like “many health care facilities one can access 60 minutes using public transport, R$5.00 budget?”. ’ll , compare results accessibility unconstrained monetary costs: Finally, can plot results see accessibility levels can differ quite substantially account monetary costs.","code":"# calculate accessibility function calculate_accessibility <- function(fare, fare_string) {   access_df <- accessibility(     r5r_core,     origins = points,     destinations = points,     mode = c(\"WALK\", \"TRANSIT\"),     departure_datetime = as.POSIXct(       \"13-05-2019 14:00:00\",       format = \"%d-%m-%Y %H:%M:%S\"     ),     time_window = 1,     opportunities_colname = \"healthcare\",     cutoffs = 40,     fare_structure = fare_structure,     max_fare = fare,     max_trip_duration = 40,     max_walk_time = 20,     progress = FALSE)    access_df$max_fare <- fare_string    return(access_df) }  # calculate accessibility, combine results, and convert to SF access_500 <- calculate_accessibility(fare=5, fare_string=\"R$ 5.00 budget\") access_unl <- calculate_accessibility(fare=Inf, fare_string=\"Unlimited budget\")  access <- rbind(access_500, access_unl)  # bring geometry access$geometry <- h3jsr::cell_to_polygon(access$id) access <- st_as_sf(access) # plot accessibility maps ggplot(data = access) +   geom_sf(aes(fill = accessibility), color=NA, size = 0.2) +   scale_fill_distiller(palette = \"Spectral\") +   facet_wrap(~max_fare) +   labs(subtitle = \"Effect of monetary cost on accessibility\") +   theme_minimal() +   theme(legend.position = \"bottom\",         axis.text = element_blank())"},{"path":"https://ipeagit.github.io/r5r/dev/articles/fare_structure.html","id":"cleaning-up-after-usage","dir":"Articles","previous_headings":"4. Calculating travel time and accessibiilty accounting for monetary costs > 4.2 Calculating accessibility with monetary cost","what":"Cleaning up after usage","title":"Accounting for monetary costs","text":"r5r objects still allocated amount memory previously set done calculations. order remove existing r5r object reallocate memory using, use stop_r5 function followed call Java’s garbage collector, follows: suggestions want report error, please visit package GitHub page.","code":"r5r::stop_r5(r5r_core) rJava::.jgc(R.gc = TRUE)"},{"path":"https://ipeagit.github.io/r5r/dev/articles/isochrones.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Isochrones","text":"isochrone map shows far one can travel given place within certain amount time. words, shows areas reachable place within maximum travel time. vignette shows calculate visualize isochrones R using r5r package using reproducible example. example, using sample data set city Porto Alegre (Brazil) included r5r. aim calculate several isochrones departing central bus station given different travel time thresholds. two ways calculate / visualize isochrones using r5r. quick easy option using r5r::isochrone() function. alternative requires one first calculate travel time estimates, spatial interpolation operations. cover approaches vignette. start, need increase Java memory + load libraries, build routable transport network. Warning: want calculate many opportunities (e.g. jobs, schools hospitals) located inside isochrone, strongly recommend use isochrone() function. find much efficient ways Accessibility vignette.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/articles/isochrones.html","id":"increase-java-memory-and-load-libraries","dir":"Articles","previous_headings":"2. Build routable transport network with setup_r5()","what":"Increase Java memory and load libraries","title":"Isochrones","text":"First, need increase memory available Java load packages used vignette. Please note allocate RAM memory Java loading libraries. build routable transport network r5r, user needs call setup_r5() path directory OpenStreetMap GTFS data stored.","code":"options(java.parameters = \"-Xmx2G\")  library(r5r) library(sf) library(data.table) library(ggplot2) library(interp) # system.file returns the directory with example data inside the r5r package # set data path to directory containing your own data if not running this example data_path <- system.file(\"extdata/poa\", package = \"r5r\")  r5r_core <- setup_r5(data_path)"},{"path":"https://ipeagit.github.io/r5r/dev/articles/isochrones.html","id":"isochrone-quick-and-easy-approach","dir":"Articles","previous_headings":"","what":"3. Isochrone: quick and easy approach","title":"Isochrones","text":"quick easy approach estimate / visualize isochrone use isochrone() function built r5r package. example, calculating isochrones public transport central bus station Porto Alegre. isochrone() function calculates isochrones considering travel times origin point random sample 80% nodes transport network (default). size sample can fine tuned sample_size parameter. code , r5r determines isochrones considering median travel time multiple travel time estimates calculated departing every minute 120-minute time window, 2pm 4pm. can see, isochrone() functions works similarly travel_time_matrix() function, instead returning table travel time estimates, returns POLYGON  \"sf\" \"data.frame\" isochrone origin. Now becomes super simple visualize isochrones map:","code":"# read all points in the city points <- fread(file.path(data_path, \"poa_hexgrid.csv\"))  # subset point with the geolocation of the central bus station central_bus_stn <- points[291,]  # isochrone intervals time_intervals <- seq(0, 100, 10)  # routing inputs mode <- c(\"WALK\", \"TRANSIT\") max_walk_time <- 30      # in minutes max_trip_duration <- 100 # in minutes time_window <- 120       # in minutes departure_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",                                  format = \"%d-%m-%Y %H:%M:%S\")  # calculate travel time matrix iso1 <- r5r::isochrone(r5r_core,                        origins = central_bus_stn,                        mode = mode,                        cutoffs = time_intervals,                        sample_size = 1,                        departure_datetime = departure_datetime,                        max_walk_time = max_walk_time,                        max_trip_duration = max_trip_duration,                        time_window = time_window,                        progress = FALSE) head(iso1) #> Simple feature collection with 6 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -51.2648 ymin: -30.1133 xmax: -51.1322 ymax: -29.9966 #> Geodetic CRS:  WGS 84 #>                id isochrone                       polygons #> 1 89a90128a8fffff       100 POLYGON ((-51.2572 -30.111,... #> 2 89a90128a8fffff        90 POLYGON ((-51.2572 -30.111,... #> 3 89a90128a8fffff        80 POLYGON ((-51.2572 -30.111,... #> 4 89a90128a8fffff        70 POLYGON ((-51.2572 -30.111,... #> 5 89a90128a8fffff        60 POLYGON ((-51.2558 -30.1105... #> 6 89a90128a8fffff        50 POLYGON ((-51.2483 -30.0831... # extract OSM network street_net <- street_network_to_sf(r5r_core) main_roads <- subset(street_net$edges, street_class %like% 'PRIMARY|SECONDARY')    colors <- c('#ffe0a5','#ffcb69','#ffa600','#ff7c43','#f95d6a',             '#d45087','#a05195','#665191','#2f4b7c','#003f5c')  ggplot() +   geom_sf(data = iso1, aes(fill=factor(isochrone)), color = NA, alpha = .7) +   geom_sf(data = main_roads, color = \"gray55\", size=0.01, alpha = 0.2) +   geom_point(data = central_bus_stn, aes(x=lon, y=lat, color='Central bus\\nstation')) +   # scale_fill_viridis_d(direction = -1, option = 'B') +   scale_fill_manual(values = rev(colors) ) +   scale_color_manual(values=c('Central bus\\nstation'='black')) +   labs(fill = \"Travel time\\n(in minutes)\", color='') +   theme_minimal() +   theme(axis.title = element_blank())"},{"path":"https://ipeagit.github.io/r5r/dev/articles/isochrones.html","id":"isochrone-alternative","dir":"Articles","previous_headings":"","what":"4 Isochrone alternative","title":"Isochrones","text":"second approach calculating isochrones r5r takes steps requires spatial interpolation travel time estimates, generates refined maps. takes two steps.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/isochrones.html","id":"calculate-travel-times","dir":"Articles","previous_headings":"","what":"4.1 Calculate travel times","title":"Isochrones","text":"First, calculate travel times public transport central bus station Porto Alegre multiple destinations input function. , input points data frame, comprises centroids hexagonal grid fine spatial resolution.","code":"# calculate travel time matrix ttm <- travel_time_matrix(r5r_core,                           origins = central_bus_stn,                           destinations = points,                           mode = mode,                           departure_datetime = departure_datetime,                           max_walk_time = max_walk_time,                           max_trip_duration = max_trip_duration,                           time_window = time_window,                           progress = FALSE)  head(ttm) #>            from_id           to_id travel_time_p50 #>             <char>          <char>           <int> #> 1: 89a90128a8fffff 89a901291abffff              61 #> 2: 89a90128a8fffff 89a9012a3cfffff              84 #> 3: 89a90128a8fffff 89a901295b7ffff              63 #> 4: 89a90128a8fffff 89a901284a3ffff              66 #> 5: 89a90128a8fffff 89a9012809bffff              55 #> 6: 89a90128a8fffff 89a901285cfffff              45"},{"path":"https://ipeagit.github.io/r5r/dev/articles/isochrones.html","id":"spatial-interpolation-of-travel-times","dir":"Articles","previous_headings":"","what":"4.2 Spatial interpolation of travel times","title":"Isochrones","text":"Now need bring spatial coordinates information travel time matrix output ttm, spatial interpolation travel time estimates. just lines code, get isochrones map:","code":"# add coordinates of destinations to travel time matrix ttm[points, on=c('to_id' ='id'), `:=`(lon = i.lon, lat = i.lat)]  # interpolate estimates to get spatially smooth result travel_times.interp <- with(na.omit(ttm), interp(lon, lat, travel_time_p50)) |>                         with(cbind(travel_time=as.vector(z),  # Column-major order                                    x=rep(x, times=length(y)),                                    y=rep(y, each=length(x)))) |>                             as.data.frame() |> na.omit() # find isochrone's bounding box to crop the map below bb_x <- c(min(travel_times.interp$x), max(travel_times.interp$x)) bb_y <- c(min(travel_times.interp$y), max(travel_times.interp$y))  # plot ggplot(travel_times.interp) +   geom_sf(data = main_roads, color = \"gray55\", size=0.01, alpha = 0.7) +   geom_contour_filled(aes(x=x, y=y, z=travel_time), alpha=.7) +   geom_point(aes(x=lon, y=lat, color='Central bus\\nstation'),              data=central_bus_stn) +   # scale_fill_viridis_d(direction = -1, option = 'B') +   scale_fill_manual(values = rev(colors) ) +   scale_color_manual(values=c('Central bus\\nstation'='black')) +   scale_x_continuous(expand=c(0,0)) +   scale_y_continuous(expand=c(0,0)) +   coord_sf(xlim = bb_x, ylim = bb_y) +   labs(fill = \"Travel time\\n(in minutes)\", color='') +   theme_minimal() +   theme(axis.title = element_blank())"},{"path":"https://ipeagit.github.io/r5r/dev/articles/isochrones.html","id":"cleaning-up-after-usage","dir":"Articles","previous_headings":"4.2 Spatial interpolation of travel times","what":"Cleaning up after usage","title":"Isochrones","text":"r5r objects still allocated amount memory previously set done calculations. order remove existing r5r object reallocate memory using, use stop_r5 function followed call Java’s garbage collector, follows: suggestions want report error, please visit package GitHub page.","code":"r5r::stop_r5(r5r_core) rJava::.jgc(R.gc = TRUE)"},{"path":"https://ipeagit.github.io/r5r/dev/articles/modify_osm_car_speeds.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Modify OSM car speeds","text":"default, routing car R5 considers vehicles travel legal speed limit OSM road edge. commonly referred “free flow scenario”, without congestion. However, average speed car trips different (usually lower) legal speed limit real case scenarios due traffic conditions driving behavior. vignette shows can set custom speeds cars making simple changes OSM data convenient modify_osm_carspeeds() function. ’ll show OSM speeds can changed using two different strategies: (1) applying different speed factors road hierarchy, (2) changing speed factor roads. third scenario change speed roads within determined areas/polygons, ’ll leave future occasion.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/modify_osm_car_speeds.html","id":"basic-usage","dir":"Articles","previous_headings":"1. Introduction","what":"Basic usage","title":"Modify OSM car speeds","text":"modify_osm_carspeeds() relatively similar behavior r5r::setup_r5() function. builds transport network can used routing accessibility function r5r. two key differences : user needs pass directory path new transport network going saved. default, r5r_core_congestion() builds new network temporary directory, users can point permanent directory using output_dir parameter. user needs point .csv file indicates speed factor OSM edge id. first example ’ll using sample data set city Porto Alegre (Brazil) included r5r. sample data path includes file \"poa_osm_congestion.csv\", two columns: \"osm_id\" \"max_speed\". Like : code , build new transport network modified speeds present .csv file. example, values \"max_speed\" column .csv file set 0.5. Since also set parameter percentage_mode = TRUE, means driving speed OSM edges listed .csv 50% original speed OSM data. Mind values \"max_speed\" column also accept absolute values Km/h, case must use percentage_mode = FALSE. obs. default, speeds OSM edges listed .csv file kept unchanged. can change default value, ’ll see second example . ’s ! can now use new network r5r_core_congestion r5r’s routing accessibility functions, like . Obs. Mind however , even though set speed factors 0.5, travel times might become twice long. travel times car also affected intersections, changes road speeds might also affect route hence trip distance . Now let’s dive realistic examples.","code":"# increase Java memory options(java.parameters = \"-Xmx2G\")  # load libraries library(r5r) library(dplyr) library(data.table) library(ggplot2)  # data path where the .pbf file is located data_path <- system.file(\"extdata/poa\", package = \"r5r\")  # path to csv file with speed factors csv_path <- paste0(data_path,'/poa_osm_congestion.csv')  speed_factors <- read.csv(csv_path)  head(speed_factors) #>      osm_id max_speed #> 1  27184648       0.5 #> 2 762361901       0.5 #> 3 568609955       0.5 #> 4 709834913       0.5 #> 5 709834914       0.5 #> 6  77705540       0.5 # path to the .pbf file with the OSM network data pbf_path <- paste0(data_path,'/poa_osm.pbf')  r5r_core_congestion <- modify_osm_carspeeds(   pbf_path = pbf_path,   csv_path = csv_path,   percentage_mode = TRUE,   verbose = FALSE   #,overwrite = FALSE 666   ) # load origin/destination points points <- data.table::fread(file.path(data_path, \"poa_points_of_interest.csv\"))  ttm_congestion <- r5r::travel_time_matrix(   r5r_core = r5r_core_congestion,   origins = points,   destinations = points,   mode = 'car',   departure_datetime = Sys.time(),   max_trip_duration = 60 )"},{"path":"https://ipeagit.github.io/r5r/dev/articles/modify_osm_car_speeds.html","id":"setting-different-congestion-levels-by-road-hierarchy","dir":"Articles","previous_headings":"","what":"2. Setting different congestion levels by road hierarchy","title":"Modify OSM car speeds","text":"example, ’ll set different speed factor roads different hierarchy levels. can assume example congestion levels tend intense roads higher hierarchy. can two simple steps. First need read OSM data .pbf file, filter OSM edges road types want. ’s road network looks like.  Now need add new column \"max_speed\" values conditioned road type, save table .csv file. data.frame looks like : ’s . Now can pass path .csv file modify_osm_carspeeds() along original OSM .pbf file build new routable transport network modified OSM car speeds.","code":"# read layer of lines from pbf roads <- sf::st_read(   pbf_path,    layer = 'lines',    quiet = TRUE   )  # Filter only road types of interest rt <- c(\"motorway\", \"primary\", \"secondary\", \"tertiary\")   roads <- roads |>   select(osm_id, highway) |>   filter(highway %in% rt)  head(roads) #> Simple feature collection with 6 features and 2 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -51.21315 ymin: -30.06624 xmax: -51.15025 ymax: -30.04939 #> Geodetic CRS:  WGS 84 #>     osm_id highway                       geometry #> 1 26786712 primary LINESTRING (-51.15164 -30.0... #> 2 26786730 primary LINESTRING (-51.17265 -30.0... #> 3 26786732 primary LINESTRING (-51.15025 -30.0... #> 4 26847798 primary LINESTRING (-51.21315 -30.0... #> 5 26936215 primary LINESTRING (-51.20818 -30.0... #> 6 26936224 primary LINESTRING (-51.20818 -30.0... # map plot(roads[\"highway\"]) new_speeds <- roads |>   mutate(max_speed = case_when(     highway == \"motorway\"  ~ 0.75,     highway == \"primary\"   ~ 0.8,     highway == \"secondary\" ~ 0.85,     highway == \"tertiary\"  ~ 0.9)) |>   sf::st_drop_geometry()  head(new_speeds) #>     osm_id highway max_speed #> 1 26786712 primary       0.8 #> 2 26786730 primary       0.8 #> 3 26786732 primary       0.8 #> 4 26847798 primary       0.8 #> 5 26936215 primary       0.8 #> 6 26936224 primary       0.8  # save speed factors to a csv csv_path <- tempfile(pattern = 'speed_factors', fileext = '.csv') data.table::fwrite(new_speeds, file = csv_path) r5r_core_new_speeds <- modify_osm_carspeeds(   pbf_path = pbf_path,   csv_path = csv_path,   output_dir = tempdir(),   percentage_mode = TRUE,   verbose = FALSE   #,overwrite = FALSE 666   )"},{"path":"https://ipeagit.github.io/r5r/dev/articles/modify_osm_car_speeds.html","id":"applying-the-same-speed-factor-to-all-roads","dir":"Articles","previous_headings":"","what":"3. Applying the same speed factor to all roads","title":"Modify OSM car speeds","text":"modify_osm_carspeeds() function parameter default_speed, can used set speed roads listed .csv file. default, default_speed = NULL speeds unlisted roads kept unchanged. example, ’ll use parameter apply speed factor roads, simulate speed limits roads changed 40 Km/h. , can need create .csv file mock OSM id exist OSM data pass default_speed = 40 percentage_mode = FALSE.","code":"# create csv with a road that does not exist. mock_data <- data.frame(osm_id = 9999, max_speed = 9999) mock_csv <- tempfile(fileext = '.csv') data.table::fwrite(mock_data, file = mock_csv)  # create a temp dir new_temp_dir <- fs::path_temp(tmpdir='./40kmph') dir.create(new_temp_dir)  # build network with all roads at at 40 Km/h  r5r_core_20kmph <- r5r::modify_osm_carspeeds(   pbf_path = pbf_path,   csv_path = mock_csv,   output_dir = new_temp_dir,   default_speed = 40,   percentage_mode = FALSE,   verbose = FALSE   #,overwrite = FALSE 666   )"},{"path":"https://ipeagit.github.io/r5r/dev/articles/modify_osm_car_speeds.html","id":"congestion-level-within-a-polygon","dir":"Articles","previous_headings":"","what":"4. Congestion level within a polygon","title":"Modify OSM car speeds","text":"steps TODO: create custom polygon, e.g. circle city center determine OSM ids polygon using spatial join operation polygon .pbf create csv file custom speeds OSM ids within polygon can computationally intensive due spatial join operation, depending size road network number polygons. new function development make much easier / faster.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/modify_osm_car_speeds.html","id":"extra-tip","dir":"Articles","previous_headings":"","what":"Extra tip:","title":"Modify OSM car speeds","text":"Road closure: one can simulate road closure setting \"max_speed\" value 0. can quite handy studies try measure resilience transport systems network disruptions.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/modify_osm_car_speeds.html","id":"cleaning-up-after-usage","dir":"Articles","previous_headings":"Extra tip:","what":"Cleaning up after usage","title":"Modify OSM car speeds","text":"r5r objects still allocated amount memory previously set done calculations. order remove existing r5r object reallocate memory using, use stop_r5 function followed call Java’s garbage collector, follows: suggestions want report error, please visit package GitHub page.","code":"r5r::stop_r5(r5r_core_congestion) rJava::.jgc(R.gc = TRUE)"},{"path":"https://ipeagit.github.io/r5r/dev/articles/pareto_frontier.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Trade-offs between travel time and monetary cost","text":"cases, transport routing models find either fastest lowest-cost routes connect places given transport network. Sometimes, though, might want sophisticated analysis considers time monetary costs public transport passengers face. problem simultaneously accounting time monetary costs major challenge routing models trade-offs objectives minimizing trip duration cost (Conway Stewart 2019). address problem, r5r function called pareto_frontier(), calculates efficient route possibilities origin destination pairs considering multiple combinations travel time monetary costs. vignette uses reproducible example demonstrate use pareto_frontier() interpret results.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/pareto_frontier.html","id":"what-the-pareto_frontier-means-","dir":"Articles","previous_headings":"1. Introduction","what":"2. What the pareto_frontier means.","title":"Trade-offs between travel time and monetary cost","text":"Imagine hypothetical journey B. multiple route alternatives origin destination varying combinations travel time cost (figure ). Walking B cheapest option take 50 minutes. fastest option take bus subway station transfer subway. option take 15 minutes, cost $8. single bus, $3 35 min. two buses one transfer, $5 29 min. taking subway walking station , $6 20 min. figure illustrates Pareto frontier alternative routes B. words, shows optimal set route alternatives B. certainly route options, option faster cheaper time.   kind abstraction allows us better grasp trade-offs travel time monetary cost passengers face using public transport. also allows us calculate cumulative-opportunity accessibility metrics cutoffs time cost (e.g. number jobs reachable given origin limits 40 minutes $5) (ref paper Matt Anson). Let’s see couple concrete examples showing r5r can calculate Pareto frontier multiple origins.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/articles/pareto_frontier.html","id":"build-routable-transport-network-with-setup_r5","dir":"Articles","previous_headings":"1. Introduction > 3. Demonstration of pareto_frontier().","what":"3.1 Build routable transport network with setup_r5()","title":"Trade-offs between travel time and monetary cost","text":"First, let’s build network create routing inputs. example ’ll using sample data set city Porto Alegre (Brazil) included r5r.","code":"# increase Java memory options(java.parameters = \"-Xmx2G\")  # load libraries library(r5r) library(data.table) library(ggplot2) library(dplyr)  # build a routable transport network with r5r data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path)  # routing inputs mode <- c('walk', 'transit') max_trip_duration <- 90 # minutes  # load origin/destination points of interest points <- fread(file.path(data_path, \"poa_points_of_interest.csv\"))"},{"path":"https://ipeagit.github.io/r5r/dev/articles/pareto_frontier.html","id":"set-up-the-fare-structure","dir":"Articles","previous_headings":"1. Introduction > 3. Demonstration of pareto_frontier().","what":"3.2 Set up the fare structure","title":"Trade-offs between travel time and monetary cost","text":"Now need set fare rules public transport system. rules used R5 calculate monetary cost alternative routes. case Porto Alegre, fare rules follows: * bus ticket costs R$ 4.80. * Riding second bus adds $ 2.40 total cost. Subsequent bus rides cost full ticket price $ 4.80. * train ticket costs $ 4.50. passenger enters train station, can take unlimited amount train trips long doesn’t leave station. * integrated fare bus train 10% discount, totals $ 8.37. can create list object fare rules support setup_fare_structure() function shown code . detailed explanation use fare structure 5r5 can found (vignette). convenience, can save fare rules zip file load future application.","code":"# create basic fare structure fare_structure <- setup_fare_structure(r5r_core,                                         base_fare = 4.8,                                        by = \"MODE\")  # update the cost of bus and train fares fare_structure$fares_per_type[, fare := fcase(type == \"BUS\", 4.80,                                              type == \"RAIL\", 4.50)]  # update the cost of tranfers fare_structure$fares_per_transfer[, fare := fcase(first_leg == \"BUS\" & second_leg == \"BUS\", 7.2,                                                  first_leg != second_leg, 8.37)]  # update transfer_time_allowance to 60 minutes fare_structure$transfer_time_allowance <- 60  fare_structure$fares_per_type[type == \"RAIL\", unlimited_transfers := TRUE] fare_structure$fares_per_type[type == \"RAIL\", allow_same_route_transfer := TRUE] # save fare rules to temp file temp_fares <- tempfile(pattern = \"fares_poa\", fileext = \".zip\") r5r::write_fare_structure(fare_structure, file_path = temp_fares)   fare_structure <- r5r::read_fare_structure(file.path(data_path, \"fares/fares_poa.zip\"))"},{"path":"https://ipeagit.github.io/r5r/dev/articles/pareto_frontier.html","id":"calculating-a-pareto_frontier-","dir":"Articles","previous_headings":"1. Introduction > 3. Demonstration of pareto_frontier().","what":"3.3 Calculating a pareto_frontier().","title":"Trade-offs between travel time and monetary cost","text":"example, calculate Pareto frontier origins destinations considering multiple cutoffs monetary costs: $1, allow walking trips $4.5, allow rail trips $4.8, allow single bus trip $7.20, allow bus + bus $8.37, allow walking walking + bus + rail sake illustration, let’s check optimum route alternatives Farrapos train station () Praia de Belas shopping mall (b) Moinhos hospital. optimum route alternative means one make faster trip without increasing costs, one make cheaper trip without increasing travel time.","code":"departure_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",                                   format = \"%d-%m-%Y %H:%M:%S\")  prtf <- pareto_frontier(r5r_core,                       origins = points,                       destinations = points,                       mode = c(\"WALK\", \"TRANSIT\"),                       departure_datetime = departure_datetime,                       fare_structure = fare_structure,                       fare_cutoffs = c(1, 4.5, 4.8, 7.20, 8.37),                       progress = TRUE                       ) #> Loading required namespace: testthat head(prtf) #>          from_id               to_id percentile travel_time monetary_cost #>           <char>              <char>      <int>       <int>         <num> #> 1: public_market       public_market         50           0           1.0 #> 2: public_market bus_central_station         50          23           1.0 #> 3: public_market bus_central_station         50          19           4.5 #> 4: public_market bus_central_station         50          14           4.8 #> 5: public_market    gasometer_museum         50          29           1.0 #> 6: public_market    gasometer_museum         50          13           4.8"},{"path":"https://ipeagit.github.io/r5r/dev/articles/pareto_frontier.html","id":"cleaning-up-after-usage","dir":"Articles","previous_headings":"1. Introduction > 3. Demonstration of pareto_frontier().","what":"Cleaning up after usage","title":"Trade-offs between travel time and monetary cost","text":"r5r objects still allocated amount memory previously set done calculations. order remove existing r5r object reallocate memory using, use stop_r5 function followed call Java’s garbage collector, follows: suggestions want report error, please visit package GitHub page.","code":"r5r::stop_r5(r5r_core) rJava::.jgc(R.gc = TRUE)"},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"r5r R package rapid realistic routing multimodal transport networks (walk, bike, public transport car). provides simple friendly interface R5, really fast open source Java-based routing engine developed separately Conveyal. R5 stands Rapid Realistic Routing Real-world Reimagined networks. details r5r can found package webpage paper.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"installation","dir":"Articles","previous_headings":"","what":"2. Installation","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"can install r5r CRAN, development version github. Please bear mind need Java Development Kit (JDK) 21 installed computer use r5r. worries, don’t pay . numerous open-source JDK implementations, need install one JDK. options: Adoptium/Eclipse Temurin (preferred option) Amazon Corretto Oracle OpenJDK. easiest way install JDK using new {rJavaEnv} package R:","code":"# from CRAN install.packages('r5r')  # dev version with latest features devtools::install_github(\"ipeaGIT/r5r\", subdir = \"r-package\") # install {rJavaEnv} from CRAN install.packages(\"rJavaEnv\")  # check version of Java currently installed (if any)  rJavaEnv::java_check_version_rjava()  ## if this is the first time you use {rJavaEnv}, you might need to run this code ## below to consent the installation of Java. # rJavaEnv::rje_consent(provided = TRUE)  # install Java 21 rJavaEnv::java_quick_install(version = 21)  # check if Java was successfully installed rJavaEnv::java_check_version_rjava()"},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"usage","dir":"Articles","previous_headings":"","what":"3. Usage","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"First, need increase memory available Java. done loading r5r library , default, R allocates 512MB memory Java processes, enough large queries using r5r. increase available memory 2GB, example, need set java.parameters option beginning script, follows: Note: ’s important allocate enough memory loading r5r Java-based package, since rJava starts Java Virtual Machine R session. might useful restart R session execute code right , notice haven’t succeeded previous attempts. can load packages used vignette: r5r package seven fundamental functions: setup_r5() initialize instance r5r build routable transport network; accessibility() fast computation access opportunities considering selected decay function; travel_time_matrix() fast computation travel time estimates origin/destination pairs considering departure time; arrival_travel_time_matrix() calculating travel time matrices origin destination pairs considering time arrival. output includes additional information routes used total time disaggregated access, waiting, -vehicle transfer times. expanded_travel_time_matrix() calculating travel matrices origin destination pairs additional information routes used total time disaggregated access, waiting, -vehicle transfer times. detailed_itineraries() get detailed information one multiple alternative routes origin/destination pairs. pareto_frontier() analyzing trade-travel time monetary costs multiple route alternatives origin/destination pairs. isochrone() estimate polygons areas can reached origin point different travel time limits. functions also allow users account monetary travel costs generating travel time matrices accessibility estimates. info consider monetary costs can found vignette. package also includes support functions. street_network_to_sf() extract OpenStreetMap network sf format network.dat file. transit_network_to_sf() extract transit network sf format network.dat file. find_snap() find snapped locations input points street network. r5r_sitrep() generate situation report help debug eventual errors. obs. package also includes convenient function modify_osm_carspeeds() allows one build routable network modified OSM car speeds account different scenarios traffic congestion road closure. See vignette.","code":"options(java.parameters = \"-Xmx2G\")  # By default, {r5r} uses all CPU cores available. If you want to limit the  # number of CPUs to 4, for example, you can run:   options(java.parameters = c(\"-Xmx2G\", \"-XX:ActiveProcessorCount=4\")) library(r5r) library(sf) library(data.table) library(ggplot2)"},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"data-requirements","dir":"Articles","previous_headings":"3. Usage","what":"3.1 Data requirements:","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"use r5r, need: road network data set OpenStreetMap .pbf format (mandatory) public transport feed GTFS.zip format (optional) raster file Digital Elevation Model data .tif format (optional) places can download data sets: osmextract R package geofabrik website hot export tool website BBBike.org website tidytransit R package transitland website Mobility Database website elevatr R package Nasa’s SRTMGL1 website Let’s quick look r5r works using sample data set.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"data","dir":"Articles","previous_headings":"4. Demonstration on sample data","what":"Data","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"illustrate functionalities r5r, package includes small sample data city Porto Alegre (Brazil). includes seven files: OpenStreetMap network: poa_osm.pbf Two public transport feeds: poa_eptc.zip poa_trensurb.zip raster elevation data: poa_elevation.tif poa_hexgrid.csv file spatial coordinates regular hexagonal grid covering sample area, can used origin/destination pairs travel time matrix calculation. poa_points_of_interest.csv file containing names spatial coordinates 15 places within Porto Alegre fares_poa.zip file fare rules city’s public transport system. points interest data can seen . example, looking transport alternatives places. data origin destination pairs shown . example, using 200 points randomly selected data set.","code":"data_path <- system.file(\"extdata/poa\", package = \"r5r\") list.files(data_path) #>  [1] \"fares\"                      \"network_settings.json\"      #>  [3] \"network.dat\"                \"poa_elevation.tif\"          #>  [5] \"poa_eptc.zip\"               \"poa_hexgrid.csv\"            #>  [7] \"poa_osm_congestion.csv\"     \"poa_osm.pbf\"                #>  [9] \"poa_osm.pbf.mapdb\"          \"poa_osm.pbf.mapdb.p\"        #> [11] \"poa_points_of_interest.csv\" \"poa_trensurb.zip\"           #> [13] \"r5rlog_20250626.log\" poi <- fread(file.path(data_path, \"poa_points_of_interest.csv\")) head(poi) #>                     id       lat       lon #>                 <char>     <num>     <num> #> 1:       public_market -30.02756 -51.22781 #> 2: bus_central_station -30.02329 -51.21886 #> 3:    gasometer_museum -30.03404 -51.24095 #> 4: santa_casa_hospital -30.03043 -51.22240 #> 5:            townhall -30.02800 -51.22865 #> 6:     piratini_palace -30.03363 -51.23068 points <- fread(file.path(data_path, \"poa_hexgrid.csv\"))  # sample points sampled_rows <-  sample(1:nrow(points), 200, replace=TRUE) points <- points[ sampled_rows, ] head(points) #>                 id       lon       lat population schools  jobs healthcare #>             <char>     <num>     <num>      <int>   <int> <int>      <int> #> 1: 89a90128427ffff -51.20502 -30.08176        709       0     7          0 #> 2: 89a9012980fffff -51.17212 -30.02075       2073       0   127          0 #> 3: 89a90128043ffff -51.18627 -30.06949         21       1   100          0 #> 4: 89a9012828fffff -51.17700 -30.06612        965       0   219          0 #> 5: 89a90128657ffff -51.16852 -30.08209        678       0     0          0 #> 6: 89a9012826bffff -51.16740 -30.05445        240       1   180          0"},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"building-routable-transport-network-with-setup_r5","dir":"Articles","previous_headings":"4. Demonstration on sample data","what":"4.1 Building routable transport network with setup_r5()","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"first step build multimodal transport network used routing R5. done setup_r5 function. function two things: (1) downloads/updates compiled JAR file R5 stores locally r5r package directory future use; (2) combines osm.pbf gtfs.zip data sets build routable network object.","code":"# Indicate the path where OSM and GTFS data are stored r5r_core <- setup_r5(data_path = data_path)"},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"accessibility-analysis","dir":"Articles","previous_headings":"4. Demonstration on sample data","what":"4.2 Accessibility analysis","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"fastest way calculate accessibility estimates using accessibility() function. example, calculate number schools health care facilities accessible less 60 minutes public transport walking. details vignette Calculating visualizing Accessibility.","code":"# set departure datetime input departure_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",                                  format = \"%d-%m-%Y %H:%M:%S\")  # calculate accessibility access <- accessibility(r5r_core = r5r_core,                         origins = points,                         destinations = points,                         opportunities_colnames = c(\"schools\", \"healthcare\"),                         mode = c(\"WALK\", \"TRANSIT\"),                         departure_datetime = departure_datetime,                         decay_function = \"step\",                         cutoffs = 60                         ) head(access) #>                 id opportunity percentile cutoff accessibility #>             <char>      <char>      <int>  <int>         <num> #> 1: 89a90128427ffff     schools         50     60            26 #> 2: 89a90128427ffff  healthcare         50     60            34 #> 3: 89a9012980fffff     schools         50     60            23 #> 4: 89a9012980fffff  healthcare         50     60            28 #> 5: 89a90128043ffff     schools         50     60            30 #> 6: 89a90128043ffff  healthcare         50     60            37"},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"routing-analysis","dir":"Articles","previous_headings":"4. Demonstration on sample data","what":"4.3 Routing analysis","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"fast routing analysis, r5r currently three core functions: travel_time_matrix(), expanded_travel_time_matrix() detailed_itineraries().","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"fast-many-to-many-travel-time-matrix","dir":"Articles","previous_headings":"4. Demonstration on sample data > 4.3 Routing analysis","what":"Fast many to many travel time matrix","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"travel_time_matrix() function really simple fast function compute travel time estimates one multiple origin/destination pairs. origin/destination input can either spatial sf POINT object, data.frame containing columns id, lon, lat. function also receives inputs max walking distance, meters, max trip duration, minutes. Resulting travel times also output minutes. function also allows users efficiently capture travel time uncertainties inside given time window considering multiple departure times. info vignette.","code":"# set inputs mode <- c(\"WALK\", \"TRANSIT\") max_walk_time <- 30 # minutes max_trip_duration <- 120 # minutes departure_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",                                  format = \"%d-%m-%Y %H:%M:%S\")  # calculate a travel time matrix ttm <- travel_time_matrix(r5r_core = r5r_core,                           origins = poi,                           destinations = poi,                           mode = mode,                           departure_datetime = departure_datetime,                           max_walk_time = max_walk_time,                           max_trip_duration = max_trip_duration)  head(ttm) #>          from_id               to_id travel_time_p50 #>           <char>              <char>           <int> #> 1: public_market       public_market               0 #> 2: public_market bus_central_station              14 #> 3: public_market    gasometer_museum              12 #> 4: public_market santa_casa_hospital              15 #> 5: public_market            townhall               3 #> 6: public_market     piratini_palace              17"},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"expanded-travel-time-matrix-with-minute-by-minute-estimates","dir":"Articles","previous_headings":"4. Demonstration on sample data > 4.3 Routing analysis","what":"Expanded travel time matrix with minute-by-minute estimates","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"interested detailed outputs, expanded_travel_time_matrix() works similarly travel_time_matrix() brings much information. estimates origin destination pair routes used total time disaggregated access, waiting, -vehicle transfer times. Please note function can memory intensive large data sets.","code":"# calculate a travel time matrix ettm <- expanded_travel_time_matrix(r5r_core = r5r_core,                           origins = poi,                           destinations = poi,                           mode = mode,                           departure_datetime = departure_datetime,                           breakdown = TRUE,                           max_walk_time = max_walk_time,                           max_trip_duration = max_trip_duration)  head(ettm) #>          from_id         to_id departure_time draw_number access_time wait_time #>           <char>        <char>         <char>       <int>       <num>     <num> #> 1: public_market public_market       14:00:00           1           0         0 #> 2: public_market public_market       14:01:00           1           0         0 #> 3: public_market public_market       14:02:00           1           0         0 #> 4: public_market public_market       14:03:00           1           0         0 #> 5: public_market public_market       14:04:00           1           0         0 #> 6: public_market public_market       14:05:00           1           0         0 #>    ride_time transfer_time egress_time routes n_rides total_time #>        <num>         <num>       <num> <char>   <int>      <num> #> 1:         0             0           0 [WALK]       0          0 #> 2:         0             0           0 [WALK]       0          0 #> 3:         0             0           0 [WALK]       0          0 #> 4:         0             0           0 [WALK]       0          0 #> 5:         0             0           0 [WALK]       0          0 #> 6:         0             0           0 [WALK]       0          0"},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"detailed-itineraries","dir":"Articles","previous_headings":"4. Demonstration on sample data > 4.3 Routing analysis","what":"Detailed itineraries","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"routing packages return fastest route. key advantage detailed_itineraries() function allows fast routing analysis providing multiple alternative routes origin destination pairs. output also brings detailed information route alternative trip segment level, including transport mode, waiting times, travel time distance trip segment. example , want know alternative routes one origin/destination pair . output data.frame sf object, can easily visualize results.","code":"# set inputs origins <- poi[10,] destinations <- poi[12,] mode <- c(\"WALK\", \"TRANSIT\") max_walk_time <- 60 # minutes departure_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",                                  format = \"%d-%m-%Y %H:%M:%S\")  # calculate detailed itineraries det <- detailed_itineraries(r5r_core = r5r_core,                             origins = origins,                             destinations = destinations,                             mode = mode,                             departure_datetime = departure_datetime,                             max_walk_time = max_walk_time,                             shortest_path = FALSE)  head(det) #> Simple feature collection with 6 features and 16 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -51.24094 ymin: -30.05 xmax: -51.19762 ymax: -29.99729 #> Geodetic CRS:  WGS 84 #>            from_id  from_lat  from_lon                          to_id    to_lat #> 1 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 2 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 3 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 4 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 5 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 6 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #>      to_lon option departure_time total_duration total_distance segment mode #> 1 -51.22875      1       14:09:10           36.2           9460       1 WALK #> 2 -51.22875      1       14:09:10           36.2           9460       2 RAIL #> 3 -51.22875      1       14:09:10           36.2           9460       3 WALK #> 4 -51.22875      1       14:09:10           36.2           9460       4  BUS #> 5 -51.22875      1       14:09:10           36.2           9460       5 WALK #> 6 -51.22875      2       14:09:43           48.7           8779       1 WALK #>   segment_duration wait distance  route                       geometry #> 1              4.6  0.0      174        LINESTRING (-51.1981 -29.99... #> 2              6.6  1.3     4796 LINHA1 LINESTRING (-51.19763 -29.9... #> 3              5.7  0.0      256        LINESTRING (-51.22827 -30.0... #> 4             10.4  4.4     4083    188 LINESTRING (-51.22926 -30.0... #> 5              3.2  0.0      151        LINESTRING (-51.22949 -30.0... #> 6              4.6  0.0      174        LINESTRING (-51.1981 -29.99..."},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"visualize-results","dir":"Articles","previous_headings":"4. Demonstration on sample data > 4.3 Routing analysis > Detailed itineraries","what":"Visualize results","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"Static visualization ggplot2 package: provide geographic context visualization results ggplot2, can also use street_network_to_sf() function extract OSM street network used routing.","code":"# extract OSM network street_net <- street_network_to_sf(r5r_core)  # extract public transport network transit_net <- r5r::transit_network_to_sf(r5r_core)  # plot ggplot() +   geom_sf(data = street_net$edges, color='gray85') +   geom_sf(data = det, aes(color=mode)) +   facet_wrap(.~option) +    theme_void()"},{"path":"https://ipeagit.github.io/r5r/dev/articles/r5r.html","id":"cleaning-up-after-usage","dir":"Articles","previous_headings":"4. Demonstration on sample data > 4.3 Routing analysis","what":"Cleaning up after usage","title":"Intro to r5r: Rapid Realistic Routing with R5 in R","text":"r5r objects still allocated amount memory previously set done calculations. order remove existing r5r object reallocate memory using, use stop_r5 function followed call Java’s garbage collector, follows: suggestions want report error, please visit package GitHub page.","code":"r5r::stop_r5(r5r_core) rJava::.jgc(R.gc = TRUE)"},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/articles/time_window.html","id":"the-problem","dir":"Articles","previous_headings":"1. Introduction","what":"The problem","title":"Using the time_window parameter","text":"calculate travel time B, calculate accessibility level given location, one select departure time. However, travel time accessibility estimates can differ significantly different departure times public transport service levels vary across day (Stepniak et al. 2019). Even small difference, say leaving 10:00am 10:04am might importantly change travel time accessibility estimates depending person departs relative public transport vehicle arrives, well transfers coordinated given service timetable. common issue related modifiable temporal unit problem (MTUP) (Pereira 2019; Levinson et al. 2020). problem gets even complicated public transport GTFS feeds frequencies.txt table. cases, know exact departure time vehicles, creates greater uncertainty travel time accessibility estimates (Conway, Byrd, van Eggermond 2018; Stewart Byrd 2022).","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/time_window.html","id":"the-solution","dir":"Articles","previous_headings":"1. Introduction","what":"The solution","title":"Using the time_window parameter","text":"common strategy overcome problem calculate travel times accessibilities multiple departure times sampled time window, take average median value. Now may ask, many departure times use? might also thinking multiple repeated routing analysis can cumbersome take lot time. Right? r5r comes . travel_time_matrix()accessibility() functions parameter called time_window. parameter set, R5 automatically compute multiple travel times / accessibility estimates considering multiple departures per minute within time_window selected user. vignette shows reproducible example explain one can use time_window interpret results.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/time_window.html","id":"how-the-time_window-works-and-how-to-interpret-the-results-","dir":"Articles","previous_headings":"","what":"2. How the time_window works and how to interpret the results.","title":"Using the time_window parameter","text":"mentioned , time_window set, R5 computes multiple travel times / accessibility estimates starting specified departure_datetime within time_window selected user. default, r5r generate one estimate per minute. Nonetheless, users can set number draws_per_minute parameter change number Monte Carlo draws perform per time window minute. default value draws_per_minute 5, mean 300 draws 60 minutes time window, example. detailed discussion effect number draws result stability, see Stewart et al (2022). case, isn’t single estimate travel time / accessibility, distribution several estimates reflect travel time / accessibility uncertainties specified time window. get heads around many estimates, can use percentiles parameter specify percentiles distribution interested . example, select 25th travel time percentile results show travel time estimate B 15 minutes, means 25% trips taken points within specified time window shorter 15 minutes. Let’s see couple concrete examples now.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/articles/time_window.html","id":"build-routable-transport-network-with-setup_r5","dir":"Articles","previous_headings":"3. Demonstration of time_window.","what":"3.1 Build routable transport network with setup_r5()","title":"Using the time_window parameter","text":"First, let’s build network create routing inputs. example ’ll using sample data set city São Paulo (Brazil) included r5r. ps. Please keep mind Monte Carlo draws time_window affects results GTFS feeds contain frequencies.txt table. GTFS feed frequency table, r5r still allow multiple runs set time_window deterministic way.","code":"# increase Java memory options(java.parameters = \"-Xmx2G\")  # load libraries library(r5r) library(sf) library(data.table) library(ggplot2) library(dplyr)  # build a routable transport network with r5r data_path <- system.file(\"extdata/spo\", package = \"r5r\") r5r_core <- setup_r5(data_path)  # routing inputs mode <- c('walk', 'transit') max_walk_time <- 30 # minutes max_trip_duration <- 90 # minutes  # load origin/destination points points <- fread(file.path(data_path, \"spo_hexgrid.csv\"))  # departure datetime departure_datetime = as.POSIXct(\"13-05-2019 14:00:00\",                                  format = \"%d-%m-%Y %H:%M:%S\")"},{"path":"https://ipeagit.github.io/r5r/dev/articles/time_window.html","id":"accessibility-with-time_window-","dir":"Articles","previous_headings":"3. Demonstration of time_window.","what":"3.2 Accessibility with time_window.","title":"Using the time_window parameter","text":"example calculate number schools accessible location within 60-minute time window departing 2pm 3pm. example ’ll using cumulative accessibility metric decay_function = \"step\" max time threshold 45 minutes cutoffs = 45. output long format, first 5 rows show result origin. case, see 10% trips departing origin 2pm 3pm person able access 111 schools. Meanwhile, 50% times access 79 schools. contrast, accessibility origin shown output 0, meaning schools accessible location given max travel time 45 minutes. can use plot like one visualize uncertainty accessibility levels might vary 2pm 3pm depending departure time within 60-minute time window.","code":"# estimate accessibility acc <- r5r::accessibility(r5r_core = r5r_core,                              origins = points,                           destinations = points,                            opportunities_colnames = 'schools',                           mode = mode,                           max_walk_time = max_walk_time,                           decay_function = \"step\",                           cutoffs = 45,                           departure_datetime = departure_datetime,                           progress = FALSE,                           time_window = 60,                           percentiles = c(10, 20, 50, 70, 80)                           )  head(acc, n = 10) #>                  id opportunity percentile cutoff accessibility #>              <char>      <char>      <int>  <int>         <num> #>  1: 89a8100c603ffff     schools         10     45            13 #>  2: 89a8100c603ffff     schools         20     45            13 #>  3: 89a8100c603ffff     schools         50     45             7 #>  4: 89a8100c603ffff     schools         70     45             6 #>  5: 89a8100c603ffff     schools         80     45             6 #>  6: 89a8100c617ffff     schools         10     45            14 #>  7: 89a8100c617ffff     schools         20     45            13 #>  8: 89a8100c617ffff     schools         50     45             9 #>  9: 89a8100c617ffff     schools         70     45             6 #> 10: 89a8100c617ffff     schools         80     45             6 # summarize df <- acc[, .(min_acc = min(accessibility),               median = accessibility[which(percentile == 50)],               max_acc = max(accessibility)), by = id]  # plot ggplot(data=df) +   geom_linerange(color='gray', alpha=.5, aes(x = reorder(id, median) ,                        y=median, ymin=min_acc, ymax=max_acc)) +   geom_point(color='#0570b0', size=.5, aes(x = reorder(id, median), y=median)) +   labs(y='N. of schools accessible\\nby public transport', x='Origins sorted by accessibility',        title=\"Accessibility uncertainty between 2pm and 3pm\",        subtitle = 'Upper limit 10% and lower limit 80% of the times') +   theme_classic() +   theme(axis.text.x=element_blank(),         axis.ticks.x=element_blank())"},{"path":"https://ipeagit.github.io/r5r/dev/articles/time_window.html","id":"travel-time-matrix-with-time_window-","dir":"Articles","previous_headings":"3. Demonstration of time_window.","what":"3.3 Travel time matrix with time_window.","title":"Using the time_window parameter","text":"Now let’s calculate --travel time estimates within 60-minute time window departing 2pm 3pm see output looks like. Now let’s look 2nd row output . output tell us 10% trips 2pm 3pm origin-destination pair took 39 minutes less. Meanwhile, 50% trips took tp 45 minutes 80% 48-minute long shorter. last row result NAs. tell us least 50% simulated trips 2pm 3pm origin-destination pair completed took longer max_trip_duration set (90 minutes).","code":"# estimate travel time matrix ttm <- travel_time_matrix(r5r_core = r5r_core,                              origins = points,                           destinations = points,                               mode = mode,                           max_walk_time = max_walk_time,                           max_trip_duration = max_trip_duration,                           departure_datetime = departure_datetime,                           progress = TRUE,                           time_window = 60,                           percentiles = c(10, 20, 50, 70, 80)                           )  head(ttm, n = 10) #>             from_id           to_id travel_time_p10 travel_time_p20 #>              <char>          <char>           <int>           <int> #>  1: 89a8100c603ffff 89a8100c603ffff               0               0 #>  2: 89a8100c603ffff 89a8100c617ffff              13              13 #>  3: 89a8100c603ffff 89a8100c60fffff               6               6 #>  4: 89a8100c603ffff 89a8100c607ffff              11              11 #>  5: 89a8100c603ffff 89a8100c6abffff              20              20 #>  6: 89a8100c603ffff 89a8100c6a3ffff              26              26 #>  7: 89a8100c603ffff 89a8100c677ffff              14              14 #>  8: 89a8100c603ffff 89a8100c63bffff              14              14 #>  9: 89a8100c603ffff 89a8100c633ffff              16              16 #> 10: 89a8100c603ffff 89a8100c6afffff              24              24 #>     travel_time_p50 travel_time_p70 travel_time_p80 #>               <int>           <int>           <int> #>  1:               0               0               0 #>  2:              13              13              13 #>  3:               6               6               6 #>  4:              11              11              11 #>  5:              20              20              20 #>  6:              26              26              26 #>  7:              14              14              14 #>  8:              14              14              14 #>  9:              16              16              16 #> 10:              24              24              24"},{"path":"https://ipeagit.github.io/r5r/dev/articles/time_window.html","id":"expanded-travel-time-matrix-with-time_window-","dir":"Articles","previous_headings":"3. Demonstration of time_window.","what":"3.4 Expanded travel time matrix with time_window.","title":"Using the time_window parameter","text":"Finally, can also use time_window expanded_travel_time_matrix() function. case, though, user sets time_window value, expanded_travel_time_matrix() return fastest route alternative departing minute within specified time window. Please note function can memory intensive large data sets time windows.","code":"ettm <- r5r::expanded_travel_time_matrix(r5r_core = r5r_core,                                        origins = points[1:30,],                                     destinations = points[31:61,],                                         mode = mode,                                     max_walk_time = max_walk_time,                                     max_trip_duration = max_trip_duration,                                     departure_datetime = departure_datetime,                                     progress = FALSE,                                     time_window = 20)  head(ettm, n = 10) #>             from_id           to_id departure_time draw_number  routes #>              <char>          <char>         <char>       <int>  <char> #>  1: 89a8100c603ffff 89a8100c28bffff       14:00:00           1 4491-10 #>  2: 89a8100c603ffff 89a8100c28bffff       14:00:00           2 4491-10 #>  3: 89a8100c603ffff 89a8100c28bffff       14:00:00           3 4491-10 #>  4: 89a8100c603ffff 89a8100c28bffff       14:00:00           4 4491-10 #>  5: 89a8100c603ffff 89a8100c28bffff       14:00:00           5 4491-10 #>  6: 89a8100c603ffff 89a8100c28bffff       14:01:00           1 4491-10 #>  7: 89a8100c603ffff 89a8100c28bffff       14:01:00           2 4491-10 #>  8: 89a8100c603ffff 89a8100c28bffff       14:01:00           3 4491-10 #>  9: 89a8100c603ffff 89a8100c28bffff       14:01:00           4 4491-10 #> 10: 89a8100c603ffff 89a8100c28bffff       14:01:00           5 4491-10 #>     total_time #>          <num> #>  1:       50.1 #>  2:       46.8 #>  3:       48.8 #>  4:       40.4 #>  5:       44.5 #>  6:       46.4 #>  7:       47.5 #>  8:       49.7 #>  9:       49.5 #> 10:       37.9"},{"path":"https://ipeagit.github.io/r5r/dev/articles/time_window.html","id":"detailed-itineraries-with-time_window-","dir":"Articles","previous_headings":"3. Demonstration of time_window.","what":"3.5 Detailed itineraries with time_window.","title":"Using the time_window parameter","text":"detailed_itineraries() function, number Monte Carlo draws per minute hardcoded 1. means function simulates one departure per minute within time_window. set time_window 10 minutes, simulate 10 departures, one minute. largely time_window behaves slightly differently . See, functions like travel_time_matrix() accessibility(), example, return estimates travel times accessibility. cases, use time_window parameter, functions output selected percentiles values generated based distribution estimates result multiple trip simulations. detailed_itineraries(), hand, return travel times accessibility estimates. returns alternatives trip journeys. case, use time_window parameter, function return optimal trip itinerary found within time window. can also return optimal route along multiple sub-optimal journey alternatives found within time window user sets shortest_path = FALSE. obs. Mind detailed_itineraries() computed public transport trips network uses frequencies-based GTFS feed. cases, suggest using gtfstools::frequencies_to_stop_times() create suitable feed.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/time_window.html","id":"cleaning-up-after-usage","dir":"Articles","previous_headings":"3. Demonstration of time_window.","what":"Cleaning up after usage","title":"Using the time_window parameter","text":"r5r objects still allocated amount memory previously set done calculations. order remove existing r5r object reallocate memory using, use stop_r5 function followed call Java’s garbage collector, follows: suggestions want report error, please visit package GitHub page.","code":"r5r::stop_r5(r5r_core) rJava::.jgc(R.gc = TRUE)"},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/articles/travel_time_matrix.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Travel time matrices","text":"common tasks transport planning modeling involve require good quality data travel time estimates origins destinations. R5 incredibly fast generating realistic door--door travel time estimates multimodal transport systems. r5r package two functions allow users leverage computing power R5: - travel_time_matrix() - expanded_travel_time_matrix() - arrival_travel_time_matrix() vignette shows reproducible example explain two functions work differences .","code":""},{"path":"https://ipeagit.github.io/r5r/dev/articles/travel_time_matrix.html","id":"build-routable-transport-network-with-setup_r5","dir":"Articles","previous_headings":"","what":"2. Build routable transport network with setup_r5()","title":"Travel time matrices","text":"First, let’s build multimodal transport network ’ll using vignette. example ’ll using sample data set city Porto Alegre (Brazil) included r5r.","code":"# increase Java memory options(java.parameters = \"-Xmx2G\")  # load libraries library(r5r) library(data.table) library(ggplot2)  # build a routable transport network with r5r data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path)  # routing inputs mode <- c('walk', 'transit') max_trip_duration <- 60 # minutes  # departure time departure_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",                                   format = \"%d-%m-%Y %H:%M:%S\")  # load origin/destination points points <- fread(file.path(data_path, \"poa_points_of_interest.csv\"))"},{"path":"https://ipeagit.github.io/r5r/dev/articles/travel_time_matrix.html","id":"the-travel_time_matrix-function","dir":"Articles","previous_headings":"","what":"3. The travel_time_matrix() function","title":"Travel time matrices","text":"travel_time_matrix() function provides simple really fast way calculate travel time possible origin destination pairs given departure time using given transport mode. user can also customize many parameters : - max_trip_duration: maximum trip duration - max_rides: maximum number transfer public transport system - max_walk_time max_bike_time: maximum walking cycling time public transport - walk_speed bike_speed: maximum walking cycling speed - max_fare: maximum monetary cost public transport. See vignette. Now remember travel time estimates can vary significantly across day variations public transport service levels. order account , might want calculate multiple travel time matrices departing different times. can done efficiently using time_window percentile parameters travel_time_matrix() function. parameters set, R5 automatically compute multiple travel times estimates considering multiple departures per minute within time_window selected user. information functionality can found vignette.","code":"# estimate travel time matrix ttm <- travel_time_matrix(r5r_core,                              origins = points,                           destinations = points,                               mode = mode,                           max_trip_duration = max_trip_duration,                           departure_datetime = departure_datetime )  head(ttm, n = 10) #>           from_id                     to_id travel_time_p50 #>            <char>                    <char>           <int> #>  1: public_market             public_market               0 #>  2: public_market       bus_central_station              14 #>  3: public_market          gasometer_museum              12 #>  4: public_market       santa_casa_hospital              15 #>  5: public_market                  townhall               3 #>  6: public_market           piratini_palace              17 #>  7: public_market    metropolitan_cathedral              17 #>  8: public_market          farroupilha_park              18 #>  9: public_market moinhos_de_vento_hospital              20 #> 10: public_market          farrapos_station              21"},{"path":"https://ipeagit.github.io/r5r/dev/articles/travel_time_matrix.html","id":"the-expanded_travel_time_matrix-function","dir":"Articles","previous_headings":"","what":"4. The expanded_travel_time_matrix() function","title":"Travel time matrices","text":"Sometimes, want know simply total travel time B. expanded_travel_time_matrix() function comes . default, output function also tell public transport routes taken origin destination pair. Nonetheless, may set parameter breakdown = TRUE gather much info trip. case, expanded_travel_time_matrix() tell number transfers used complete trip total access, waiting, -vehicle transfer times. Please note setting breakdown = TRUE can make function slower large data sets. general call expanded_travel_time_matrix() Calling expanded_travel_time_matrix() breakdown = TRUE notice documentation expanded_travel_time_matrix() also time_window parameter. case, though, user sets time_window value, expanded_travel_time_matrix() return fastest route alternative departing minute within specified time window. Please note function can memory intensive large data sets time windows.","code":"ettm <- expanded_travel_time_matrix(r5r_core,                                        origins = points,                                     destinations = points,                                         mode = mode,                                     max_trip_duration = max_trip_duration,                                     departure_datetime = departure_datetime )  head(ettm, n = 10) #>           from_id         to_id departure_time draw_number routes total_time #>            <char>        <char>         <char>       <int> <char>      <num> #>  1: public_market public_market       14:00:00           1 [WALK]          0 #>  2: public_market public_market       14:01:00           1 [WALK]          0 #>  3: public_market public_market       14:02:00           1 [WALK]          0 #>  4: public_market public_market       14:03:00           1 [WALK]          0 #>  5: public_market public_market       14:04:00           1 [WALK]          0 #>  6: public_market public_market       14:05:00           1 [WALK]          0 #>  7: public_market public_market       14:06:00           1 [WALK]          0 #>  8: public_market public_market       14:07:00           1 [WALK]          0 #>  9: public_market public_market       14:08:00           1 [WALK]          0 #> 10: public_market public_market       14:09:00           1 [WALK]          0 ettm2 <- expanded_travel_time_matrix(r5r_core,                                        origins = points,                                     destinations = points,                                         mode = mode,                                     max_trip_duration = max_trip_duration,                                     departure_datetime = departure_datetime,                                     breakdown = TRUE)  head(ettm2, n = 10) #>           from_id         to_id departure_time draw_number access_time #>            <char>        <char>         <char>       <int>       <num> #>  1: public_market public_market       14:00:00           1           0 #>  2: public_market public_market       14:01:00           1           0 #>  3: public_market public_market       14:02:00           1           0 #>  4: public_market public_market       14:03:00           1           0 #>  5: public_market public_market       14:04:00           1           0 #>  6: public_market public_market       14:05:00           1           0 #>  7: public_market public_market       14:06:00           1           0 #>  8: public_market public_market       14:07:00           1           0 #>  9: public_market public_market       14:08:00           1           0 #> 10: public_market public_market       14:09:00           1           0 #>     wait_time ride_time transfer_time egress_time routes n_rides total_time #>         <num>     <num>         <num>       <num> <char>   <int>      <num> #>  1:         0         0             0           0 [WALK]       0          0 #>  2:         0         0             0           0 [WALK]       0          0 #>  3:         0         0             0           0 [WALK]       0          0 #>  4:         0         0             0           0 [WALK]       0          0 #>  5:         0         0             0           0 [WALK]       0          0 #>  6:         0         0             0           0 [WALK]       0          0 #>  7:         0         0             0           0 [WALK]       0          0 #>  8:         0         0             0           0 [WALK]       0          0 #>  9:         0         0             0           0 [WALK]       0          0 #> 10:         0         0             0           0 [WALK]       0          0 ettm_window <- expanded_travel_time_matrix(r5r_core,                                               origins = points,                                            destinations = points,                                                mode = mode,                                            max_trip_duration = max_trip_duration,                                            departure_datetime = departure_datetime,                                            breakdown = TRUE,                                            time_window = 10)  ettm_window[15:25,] #>           from_id               to_id departure_time draw_number access_time #>            <char>              <char>         <char>       <int>       <num> #>  1: public_market bus_central_station       14:04:00           1         1.5 #>  2: public_market bus_central_station       14:05:00           1         4.8 #>  3: public_market bus_central_station       14:06:00           1         4.1 #>  4: public_market bus_central_station       14:07:00           1         4.4 #>  5: public_market bus_central_station       14:08:00           1         2.3 #>  6: public_market bus_central_station       14:09:00           1         2.3 #>  7: public_market    gasometer_museum       14:00:00           1         2.9 #>  8: public_market    gasometer_museum       14:01:00           1         6.0 #>  9: public_market    gasometer_museum       14:02:00           1         6.0 #> 10: public_market    gasometer_museum       14:03:00           1         3.5 #> 11: public_market    gasometer_museum       14:04:00           1         3.5 #>     wait_time ride_time transfer_time egress_time routes n_rides total_time #>         <num>     <num>         <num>       <num> <char>   <int>      <num> #>  1:       1.5       3.5             0         6.7    525       1       13.2 #>  2:       1.2       1.6             0         6.2 LINHA1       1       13.8 #>  3:       1.9       2.0             0         6.7    495       1       14.7 #>  4:       1.6       2.0             0         6.7    493       1       14.7 #>  5:       4.7       1.1             0         7.4    D72       1       15.5 #>  6:       3.7       1.1             0         7.4    D72       1       14.5 #>  7:       1.1       4.5             0         1.8   2821       1       10.3 #>  8:       3.0       4.3             0         1.8    346       1       15.1 #>  9:       2.0       4.3             0         1.8    346       1       14.1 #> 10:       3.5       4.9             0         1.8    244       1       13.7 #> 11:       2.5       4.9             0         1.8    244       1       12.7"},{"path":"https://ipeagit.github.io/r5r/dev/articles/travel_time_matrix.html","id":"the-arrival_travel_time_matrix-function","dir":"Articles","previous_headings":"","what":"4. The arrival_travel_time_matrix() function","title":"Travel time matrices","text":"functions travel_time_matrix() expanded_travel_time_matrix() consider departure time set user. cases, though, might need calculate travel times considering arrival time. cases, can use arrival_travel_time_matrix(). function, need set latest arrival time desired maximum trip duration. function returns travel time trip latest departure time arrives arrival time. function useful modeling user behavior situations arriving specific time important, getting work school set start time (e.g., 9 .m.). scenarios, often convenient person take latest possible departure still ensures arrival required start time, rather choosing trip shortest travel time arriving much earlier waiting unnecessarily destination. Note output function includes information additional columns, like expanded_travel_time_matrix() function (can also use breakdown = TRUE). general call arrival_travel_time_matrix()","code":"arrival_datetime <- as.POSIXct(  \"13-05-2019 14:00:00\",  format = \"%d-%m-%Y %H:%M:%S\" )  arrival_ttm <- arrival_travel_time_matrix(   r5r_core,   origins = points,   destinations = points,   mode = c(\"WALK\", \"TRANSIT\"),   arrival_datetime = arrival_datetime,   max_trip_duration = 60 )  head(arrival_ttm, n = 10) #>           from_id                     to_id departure_time draw_number  routes #>            <char>                    <char>         <char>       <int>  <char> #>  1: public_market             public_market       13:59:00           1  [WALK] #>  2: public_market       bus_central_station       13:45:00           1  LINHA1 #>  3: public_market          gasometer_museum       13:45:00           1    2441 #>  4: public_market       santa_casa_hospital       13:44:00           1  [WALK] #>  5: public_market                  townhall       13:56:00           1  [WALK] #>  6: public_market           piratini_palace       13:42:00           1  [WALK] #>  7: public_market    metropolitan_cathedral       13:42:00           1  [WALK] #>  8: public_market          farroupilha_park       13:40:00           1     R41 #>  9: public_market moinhos_de_vento_hospital       13:36:00           1 731|637 #> 10: public_market          farrapos_station       13:36:00           1     731 #>     total_time #>          <num> #>  1:        0.0 #>  2:       13.8 #>  3:       11.7 #>  4:       15.3 #>  5:        3.5 #>  6:       17.3 #>  7:       17.9 #>  8:       16.5 #>  9:       20.3 #> 10:       21.4"},{"path":"https://ipeagit.github.io/r5r/dev/articles/travel_time_matrix.html","id":"cleaning-up-after-usage","dir":"Articles","previous_headings":"4. The arrival_travel_time_matrix() function","what":"Cleaning up after usage","title":"Travel time matrices","text":"r5r objects still allocated amount memory previously set done calculations. order remove existing r5r object reallocate memory using, use stop_r5 function followed call Java’s garbage collector, follows: suggestions want report error, please visit package GitHub page.","code":"r5r::stop_r5(r5r_core) rJava::.jgc(R.gc = TRUE)"},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marcus Saraiva. Author. Rafael H. M. Pereira. Author, maintainer. Daniel Herszenhut. Author. Carlos Kaue Vieira Braga. Author. Matthew Wigginton Bhagat-Conway. Author. Luyu Liu. Contributor. Alex Magnus. Contributor. Daniel Snow. Contributor. Ipea - Institute Applied Economic Research. Copyright holder, funder. Department Geography & Planning, University Toronto. Funder.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pereira, R. H. M., Saraiva, M., Herszenhut, D., Braga, C. K. V., & Conway, M. W. (2021). r5r: Rapid Realistic Routing Multimodal Transport Networks R5 R. Findings, 21262. https://doi.org/10.32866/001c.21262","code":"@Article{,   title = {r5r: Rapid Realistic Routing on Multimodal Transport Networks with R5 in R},   author = {Rafael H. M. Pereira and Marcus Saraiva and Daniel Herszenhut and Carlos Kaue Vieira Braga and Matthew Wigginton Conway},   journal = {Findings},   year = {2021},   doi = {10.32866/001c.21262},   url = {https://doi.org/10.32866/001c.21262}, }"},{"path":"https://ipeagit.github.io/r5r/dev/index.html","id":"r5r-rapid-realistic-routing-with-r5-in-r-","dir":"","previous_headings":"","what":"Rapid Realistic Routing with R5","title":"Rapid Realistic Routing with R5","text":"r5r R package rapid realistic routing multimodal transport networks (walk, bike, public transport car). provides simple friendly interface R5, Rapid Realistic Routing Real-world Reimagined networks, routing engine developed independently Conveyal. r5r simple way run R5 locally, allowing R users generate detailed routing analysis calculate travel time matrices accessibility using seamless parallel computing. See detailed demonstration r5r intro Vignette. details r5r can found package webpage paper. time, r5r might expanded incorporate functionality R5. repository contains R code (r-package folder) Java code (java-api folder) provides interface R5.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Rapid Realistic Routing with R5","text":"can install r5r: Please bear mind need Java Development Kit (JDK) 21 installed computer use r5r. worries, don’t pay . numerous open-source JDK implementations, work r5r. don’t already preferred JDK, recommend Adoptium/Eclipse Temurin. open-source JDK implementations include Amazon Corretto, Oracle OpenJDK. need install one JDK. easiest way install JDK using new {rJavaEnv} package R:","code":"# from CRAN install.packages(\"r5r\")  # dev version with latest features utils::remove.packages('r5r') devtools::install_github(\"ipeaGIT/r5r\", subdir = \"r-package\") # install.packages('rJavaEnv')  # check version of Java currently installed (if any)  rJavaEnv::java_check_version_rjava()  # install Java 21 rJavaEnv::java_quick_install(version = 21)"},{"path":"https://ipeagit.github.io/r5r/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Rapid Realistic Routing with R5","text":"package seven fundamental functions : Downloads stores locally R5 Jar file (Jar file downloaded per installation) Builds multimodal transport network given (1) OpenStreetMap street network .pbf format (mandatory), (2) one public transport networks GTFS.zip format (optional), (3) elevation data raster.tif (optional). Fast computation access opportunities. function returns data.table accessibility estimates origin points transport mode given selected decay function. Multiple decay functions available, including step (cumulative opportunities), logistic, fixed exponential linear. Fast function returns simple data.table travel time estimates one multiple origin destination pairs considering departure time. Calculates travel time matrices origin destination pairs considering time arrival. output includes additional information routes used total time disaggregated access, waiting, -vehicle transfer times. Calculates travel time matrices origin destination pairs additional information routes used total time disaggregated access, waiting, -vehicle transfer times. Returns data.frame sf LINESTRINGs one multiple alternative routes one multiple origin destination pairs. data output brings detailed information transport mode, travel time, walk distance etc trip segment. Returns data.table travel time monetary cost multiple route alternatives specified origin-destination pairs. Returns sf\" \"data.frame\" showing area can reached origin point given travel time limit. See details function obs. functions also allow users account monetary travel costs generating travel time matrices accessibility estimates. info consider monetary costs can found vignette. obs.2 package also includes convenient function modify_osm_carspeeds() allows one build routable network modified OSM car speeds account different scenarios traffic congestion road closure. See vignette. package also includes support functions. Extract OpenStreetMap network sf format network.dat file. Extract transit network sf format network.dat file. Find snapped locations input points street network. Generate situation report help debug eventual errors.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/index.html","id":"data-requirements","dir":"","previous_headings":"Usage","what":"Data requirements:","title":"Rapid Realistic Routing with R5","text":"use r5r, need: - road network data set OpenStreetMap .pbf format (mandatory) - public transport feed GTFS.zip format (optional) - raster file Digital Elevation Model data .tif format (optional) places can download data sets: osmextract R package geofabrik website hot export tool website BBBike.org website Protomaps website tidytransit R package transitland website Mobility Database website elevatr R package Nasa’s SRTMGL1 website","code":""},{"path":"https://ipeagit.github.io/r5r/dev/index.html","id":"demonstration-on-sample-data","dir":"","previous_headings":"Usage","what":"Demonstration on sample data","title":"Rapid Realistic Routing with R5","text":"See detailed demonstration r5r intro Vignette. illustrate functionality, package includes small sample data set public transport Open Street Map networks Porto Alegre (Brazil). Three steps required use r5r, follows.","code":"# allocate RAM memory to Java **before** loading the {r5r} library options(java.parameters = \"-Xmx2G\")  library(r5r)  # 1) build transport network, pointing to the path where OSM and GTFS data are stored path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path = path, verbose = FALSE)  # 2) load origin/destination points and set arguments points <- read.csv(system.file(\"extdata/poa/poa_hexgrid.csv\", package = \"r5r\")) mode <- c(\"WALK\", \"TRANSIT\") max_walk_time <- 30   # minutes max_trip_duration <- 60 # minutes departure_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",                                  format = \"%d-%m-%Y %H:%M:%S\")  # 3.1) calculate a travel time matrix ttm <- travel_time_matrix(r5r_core = r5r_core,                           origins = points,                           destinations = points,                           mode = mode,                           departure_datetime = departure_datetime,                           max_walk_time = max_walk_time,                           max_trip_duration = max_trip_duration)  # 3.2) or get detailed info on multiple alternative routes det <- detailed_itineraries(r5r_core = r5r_core,                             origins = points[370, ],                             destinations = points[200, ],                             mode = mode,                             departure_datetime = departure_datetime,                             max_walk_time = max_walk_time,                             max_trip_duration = max_trip_duration,                             shortest_path = FALSE,                             drop_geometry = FALSE)  # 4) Calculate number of schools accessible within 20 minutes  access <- accessibility(r5r_core = r5r_core,                         origins = points,                         destinations = points,                         opportunities_colname = \"schools\",                         decay_function = \"step\",                         cutoffs = 21,                         mode =  c(\"WALK\", \"TRANSIT\"),                         verbose = FALSE)"},{"path":"https://ipeagit.github.io/r5r/dev/index.html","id":"related-packages","dir":"","previous_headings":"Usage > Demonstration on sample data","what":"Related packages","title":"Rapid Realistic Routing with R5","text":"growing number R packages functionalities transport routing, analysis planning broadly. theses packages. dodgr: Distances Directed Graphs R gtfsrouter: R package routing GTFS data hereR: R interface REST APIs opentripplanner: OpenTripPlanner R stplanr: sustainable transport planning R r5r package particularly focused fast multimodal transport routing accessibility. key advantage r5r provides simple friendly R interface R5, one fastest robust routing engines available. Python users, might want check sister package: r5py!","code":""},{"path":"https://ipeagit.github.io/r5r/dev/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Rapid Realistic Routing with R5","text":"R5 routing engine developed Conveyal contributions several people.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/index.html","id":"citation-","dir":"","previous_headings":"","what":"Citation","title":"Rapid Realistic Routing with R5","text":"R package r5r developed team Institute Applied Economic Research (Ipea), Brazil. use package research publications, please cite : Pereira, R. H. M., Saraiva, M., Herszenhut, D., Braga, C. K. V., & Conway, M. W. (2021). r5r: Rapid Realistic Routing Multimodal Transport Networks R5 R. Findings, 21262. https://doi.org/10.32866/001c.21262 BibTeX: Please also cite relevant publications relating R⁵ engine r5r builds : Conway, M. W., Byrd, ., & van der Linden, M. (2017): Evidence-Based Transit Land Use Sketch Planning Using Interactive Accessibility Methods Combined Schedule Headway-Based Networks. Transportation Research Record, 2653(1), 45–53. DOI:10.3141/2653-06 Conway, M. W., Byrd, ., & Van Eggermond, M. (2018): Accounting uncertainty variation accessibility metrics public transport sketch planning. Journal Transport Land Use, 11(1). DOI:10.5198/jtlu.2018.1074 Conway, M. W. & Stewart, . F. (2019): Getting Charlie MTA: multiobjective optimization method account cost constraints public transit accessibility metrics. International Journal Geographical Information Science, 33(9), 1759–1787. DOI:10.1080/13658816.2019.1605075","code":"@article{pereira_r5r_2021,     title = {r5r: Rapid Realistic Routing on Multimodal Transport Networks with {R}$^{\\textrm{5}}$ in R},     shorttitle = {r5r},     url = {https://findingspress.org/article/21262-r5r-rapid-realistic-routing-on-multimodal-transport-networks-with-r-5-in-r},     doi = {10.32866/001c.21262},     language = {en},     urldate = {2021-03-04},     journal = {Findings},     author = {Pereira, Rafael H. M. and Saraiva, Marcus and Herszenhut, Daniel and Braga, Carlos Kaue Vieira and Conway, Matthew Wigginton},     month = mar,     year = {2021},     note = {Publisher: Network Design Lab} }"},{"path":"https://ipeagit.github.io/r5r/dev/reference/accessibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate access to opportunities — accessibility","title":"Calculate access to opportunities — accessibility","text":"Fast computation access opportunities given selected decay function.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/accessibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate access to opportunities — accessibility","text":"","code":"accessibility(   r5r_core,   origins,   destinations,   opportunities_colnames = \"opportunities\",   mode = \"WALK\",   mode_egress = \"WALK\",   departure_datetime = Sys.time(),   time_window = 10L,   percentiles = 50L,   decay_function = \"step\",   cutoffs = NULL,   decay_value = NULL,   fare_structure = NULL,   max_fare = Inf,   max_walk_time = Inf,   max_bike_time = Inf,   max_car_time = Inf,   max_trip_duration = 120L,   walk_speed = 3.6,   bike_speed = 12,   max_rides = 3,   max_lts = 2,   draws_per_minute = 5L,   n_threads = Inf,   verbose = FALSE,   progress = FALSE,   output_dir = NULL )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/accessibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate access to opportunities — accessibility","text":"r5r_core object connect R5 routing engine, created setup_r5(). origins, destinations Either POINT sf object WGS84 CRS, data.frame containing columns id, lon lat. opportunities_colnames character vector. names columns destinations input tells number opportunities location. Several different column names can passed, case accessibility kind opportunity calculated. mode character vector. transport modes allowed access, transfer vehicle legs trips. Defaults WALK. Please see details options. mode_egress character vector. transport mode used egress last public transport. can either WALK, BICYCLE CAR. Defaults WALK. Ignored public transport used. departure_datetime POSIXct object. Please note departure time influences public transport legs. working public transport networks, please check calendar.txt within GTFS feeds valid dates. Please see details information datetimes parsed. time_window integer. time window minutes r5r calculate multiple travel time matrices departing minute. Defaults 10 minutes. default, function returns result based median travel times, user can set percentiles parameter extract results. Please read time window vignette details usage vignette(\"time_window\", package = \"r5r\") percentiles integer vector (max length 5). Specifies percentile use returning accessibility estimates within given time window. Please note parameter applied travel time estimates generate accessibility results, accessibility distribution (.e. 25th percentile specified, accessibility calculated 25th percentile travel time, may may equal 25th percentile accessibility distribution ). Defaults 50, returning accessibility calculated median travel time. vector length bigger 1 passed, output contains additional column specifies percentile accessibility estimate. Due upstream restrictions, 5 percentiles can specified time. details, please see R5 documentation https://docs.conveyal.com/analysis/methodology#accounting--variability. decay_function string. decay function use calculating accessibility. One step, exponential, fixed_exponential, linear logistic. Defaults step, equivalent cumulative opportunities measure. Please see details understand alternative works relate cutoffs decay_value parameters. cutoffs numeric vector (maximum length 12). parameter different effects decay function: indicates cutoff times minutes calculating cumulative opportunities accessibility step function, median (inflection point) decay curves logistic linear functions, half-life exponential function. effect using fixed_exponential function. decay_value number. Extra parameter passed selected decay_function. effects decay_function either step exponential. fare_structure fare structure object, following convention set setup_fare_structure(). object describes transit fares calculated. Please see fare structure vignette understand object structured: vignette(\"fare_structure\", package = \"r5r\"). max_fare number. maximum value trips can cost calculating fastest journey origin destination pair. max_walk_time integer. maximum walking time (minutes) access egress transit network, make transfers within network complete walk-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_walk_time 15, get trips 15 minutes walk leg reach transit another 15 minutes walk leg reach destination leaving transit. walk-trips, whenever max_walk_time differs max_trip_duration, lowest value considered. max_bike_time integer. maximum cycling time (minutes) access egress transit network, make transfers within network complete bicycle-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_bike_time 15, get trips 15 minutes cycle leg reach transit another 15 minutes cycle leg reach destination leaving transit. bicycle-trips, whenever max_bike_time differs max_trip_duration, lowest value considered. max_car_time integer. maximum driving time (minutes) access egress transit network. Defaults restrictions, long max_trip_duration respected. max time considered separately leg (e.g. set max_car_time 15 minutes, potentially drive 15 minutes reach transit, another 15 minutes reach destination leaving transit). Defaults Inf, limit. max_trip_duration integer. maximum trip duration minutes. Defaults 120 minutes (2 hours). walk_speed numeric. Average walk speed km/h. Defaults 3.6 km/h. bike_speed numeric. Average cycling speed km/h. Defaults 12 km/h. max_rides integer. maximum number public transport rides allowed trip. Defaults 3. max_lts integer 1 4. maximum level traffic stress cyclists tolerate. value 1 means cyclists travel quietest streets, value 4 indicates cyclists can travel road. Defaults 2. Please see details information. draws_per_minute integer. number Monte Carlo draws perform per time window minute calculating travel time matrices estimating accessibility. Defaults 5. mean 300 draws 60-minute time window, example. parameter affects results GTFS feeds contain frequencies.txt table. GTFS feed frequency table, r5r still allows multiple runs set time_window deterministic way. n_threads integer. number threads use running router parallel. Defaults use available threads (Inf). verbose logical. Whether show R5 informative messages running function. Defaults FALSE (please note case R5 error messages still shown). Setting verbose TRUE shows detailed output, can useful debugging issues caught r5r. progress logical. Whether show progress counter running router. Defaults FALSE. works verbose set FALSE, progress counter interfere R5's output messages. Setting progress TRUE may impose small penalty computation efficiency, progress counter must synchronized among active threads. output_dir Either NULL path existing directory. NULL (default), function write one .csv file results origin specified directory. case, function returns path specified parameter. parameter particularly useful running memory-constrained settings writing results directly disk prevents r5r loading RAM memory.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/accessibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate access to opportunities — accessibility","text":"data.table accessibility estimates origin points. data.table contain columns listing origin id, type opportunities accessibility calculated, travel time percentile considered accessibility estimate specified cutoff values (except decay_function fixed_exponential, case cutoff parameter used). output_dir NULL, function returns path specified parameter, .csv files containing results saved.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/accessibility.html","id":"decay-functions","dir":"Reference","previous_headings":"","what":"Decay functions","title":"Calculate access to opportunities — accessibility","text":"R5 allows one use different decay functions calculating accessibility. Please see original R5 documentation Conveyal information one one (https://docs.conveyal.com/learn-/decay-functions). summary available option, well value passed decay_function use (inside parentheses) listed : Step, also known cumulative opportunities (\"step\"):  binary decay function used find sum available opportunities within specific travel time cutoff. Logistic CDF (\"logistic\"):  logistic function, .e. cumulative distribution function logistic distribution, expressed parameters median (inflection point) standard deviation. function applies sigmoid rolloff convenient relationship discrete choice theory. parameters can set reflect whole population's tolerance making trips different travel times. function's value represents probability randomly chosen member population accept making trip, given duration. Opportunities weighted likely person consider \"reachable\". Calibration: median parameter controlled cutoff parameter, leaving standard deviation configure decay_value parameter. Fixed Exponential (\"fixed_exponential\"):  function form exp(-Lt) L single fixed decay constant range (0, 1). constrained positive ensure weights decrease (rather grow) increasing travel time. Calibration: function controlled exclusively L constant, given decay_value parameter. Values provided cutoffs ignored. Half-life Exponential Decay (\"exponential\"):  similar fixed-exponential option , case decay parameter inferred cutoffs parameter values, treated half-life decay. Linear (\"linear\"):  simple, vaguely sigmoid option, may useful sense maximum travel time tolerated traveler, minimum time travel perceived equally easy. Calibration: transition region transposable symmetric around cutoffs parameter values, taking decay_value minutes taper one zero.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/accessibility.html","id":"transport-modes","dir":"Reference","previous_headings":"","what":"Transport modes","title":"Calculate access to opportunities — accessibility","text":"R5 allows multiple combinations transport modes. options include: Transit modes: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR. option TRANSIT automatically considers public transport modes available. Non transit modes: WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/accessibility.html","id":"level-of-traffic-stress-lts-","dir":"Reference","previous_headings":"","what":"Level of Traffic Stress (LTS)","title":"Calculate access to opportunities — accessibility","text":"cycling enabled R5 (passing value BIKE either mode mode_egress), setting max_lts allow cycling streets given level danger/stress. Setting max_lts 1, example, allow cycling separated bicycle infrastructure low-traffic streets routing revert walking traversing links LTS exceeding 1. Setting max_lts 3 allow cycling links LTS 1, 2 3. Routing also reverts walking street segment tagged non-bikable OSM (e.g. staircase), independently specified max LTS. default methodology assigning LTS values network edges based commonly tagged attributes OSM ways. See info LTS original documentation R5 Conveyal https://docs.conveyal.com/learn-/traffic-stress. summary: LTS 1: Tolerable children. includes low-speed, low-volume streets, well separated bicycle facilities (parking-protected lanes cycle tracks). LTS 2: Tolerable mainstream adult population. includes streets cyclists dedicated lanes interact traffic formal crossing. LTS 3: Tolerable \"enthused confident\" cyclists. includes streets may involve close proximity moderate- high-speed vehicular traffic. LTS 4: Tolerable \"strong fearless\" cyclists. includes streets cyclists required mix moderate- high-speed vehicular traffic. advanced users, can provide custom LTS values adding tag <key = \"lts\"> osm.pbf file.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/accessibility.html","id":"datetime-parsing","dir":"Reference","previous_headings":"","what":"Datetime parsing","title":"Calculate access to opportunities — accessibility","text":"r5r ignores timezone attribute datetime objects parsing dates times, using study area's timezone instead. example, say running calculations using Rio de Janeiro, Brazil, study area. datetime .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\") parsed May 13th, 2019, 14:00h Rio's local time, expected. .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\", tz = \"Europe/Paris\") also parsed exact date time Rio's local time, perhaps surprisingly, ignoring timezone attribute.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/accessibility.html","id":"routing-algorithm","dir":"Reference","previous_headings":"","what":"Routing algorithm","title":"Calculate access to opportunities — accessibility","text":"travel_time_matrix(), expanded_travel_time_matrix(), arrival_travel_time_matrix()  accessibility() functions use R5-specific extension RAPTOR routing algorithm (see Conway et al., 2017). RAPTOR extension uses systematic sample one departure per minute time window set user 'time_window' parameter. detailed description base RAPTOR can found Delling et al (2015). However, whenever user includes transit fares inputs functions, automatically switch use R5-specific extension McRAPTOR routing algorithm. Conway, M. W., Byrd, ., & van der Linden, M. (2017). Evidence-based transit land use sketch planning using interactive accessibility methods combined schedule headway-based networks. Transportation Research Record, 2653(1), 45-53. doi:10.3141/2653-06 Delling, D., Pajor, T., & Werneck, R. F. (2015). Round-based public transit routing. Transportation Science, 49(3), 591-604. doi:10.1287/trsc.2014.0534","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/accessibility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate access to opportunities — accessibility","text":"","code":"library(r5r)  data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path) #> Downloading R5 jar file to /home/runner/.cache/R/r5r/r5_jar_v7.4.0/r5-v7.4-all.jar #>  #> Finished building network.dat at /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat points <- read.csv(file.path(data_path, \"poa_hexgrid.csv\"))[1:5, ]  departure_datetime <- as.POSIXct(   \"13-05-2019 14:00:00\",   format = \"%d-%m-%Y %H:%M:%S\" )  access <- accessibility(   r5r_core,   origins = points,   destinations = points,   opportunities_colnames = \"schools\",   mode = \"WALK\",   departure_datetime = departure_datetime,   decay_function = \"step\",   cutoffs = 30,   max_trip_duration = 30 ) head(access) #>                 id opportunity percentile cutoff accessibility #>             <char>      <char>      <int>  <int>         <num> #> 1: 89a901291abffff     schools         50     30             0 #> 2: 89a9012a3cfffff     schools         50     30             0 #> 3: 89a901295b7ffff     schools         50     30             0 #> 4: 89a901284a3ffff     schools         50     30             0 #> 5: 89a9012809bffff     schools         50     30             0  # using a different decay function access <- accessibility(   r5r_core,   origins = points,   destinations = points,   opportunities_colnames = \"schools\",   mode = \"WALK\",   departure_datetime = departure_datetime,   decay_function = \"logistic\",   cutoffs = 30,   decay_value = 1,   max_trip_duration = 30 ) head(access) #>                 id opportunity percentile cutoff accessibility #>             <char>      <char>      <int>  <int>         <num> #> 1: 89a901291abffff     schools         50     30             0 #> 2: 89a9012a3cfffff     schools         50     30             0 #> 3: 89a901295b7ffff     schools         50     30             0 #> 4: 89a901284a3ffff     schools         50     30             0 #> 5: 89a9012809bffff     schools         50     30             0  # using several cutoff values access <- accessibility(   r5r_core,   origins = points,   destinations = points,   opportunities_colnames = \"schools\",   mode = \"WALK\",   departure_datetime = departure_datetime,   decay_function = \"step\",   cutoffs = c(15, 30),   max_trip_duration = 30 ) head(access) #>                 id opportunity percentile cutoff accessibility #>             <char>      <char>      <int>  <int>         <num> #> 1: 89a901291abffff     schools         50     15             0 #> 2: 89a901291abffff     schools         50     30             0 #> 3: 89a9012a3cfffff     schools         50     15             0 #> 4: 89a9012a3cfffff     schools         50     30             0 #> 5: 89a901295b7ffff     schools         50     15             0 #> 6: 89a901295b7ffff     schools         50     30             0  # calculating access to different types of opportunities access <- accessibility(   r5r_core,   origins = points,   destinations = points,   opportunities_colnames = c(\"schools\", \"healthcare\"),   mode = \"WALK\",   departure_datetime = departure_datetime,   decay_function = \"step\",   cutoffs = 30,   max_trip_duration = 30 ) head(access) #>                 id opportunity percentile cutoff accessibility #>             <char>      <char>      <int>  <int>         <num> #> 1: 89a901291abffff     schools         50     30             0 #> 2: 89a901291abffff  healthcare         50     30             0 #> 3: 89a9012a3cfffff     schools         50     30             0 #> 4: 89a9012a3cfffff  healthcare         50     30             0 #> 5: 89a901295b7ffff     schools         50     30             0 #> 6: 89a901295b7ffff  healthcare         50     30             1  stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/arrival_travel_time_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate travel time matrix between origin destination pairs considering a time of arrival — arrival_travel_time_matrix","title":"Calculate travel time matrix between origin destination pairs considering a time of arrival — arrival_travel_time_matrix","text":"Computation travel time estimates one multiple origin destination pairs considering time arrival. function considers time arrival set user. function returns travel time trip latest departure time arrives arrival time set user. want calculate travel times considering departure time, ' look travel_time_matrix() function. function wrapper around expanded_travel_time_matrix(). one hand, means output function columns (info) compared output travel_time_matrix(). hand, function can memory intensive user allows really long max trip duration.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/arrival_travel_time_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate travel time matrix between origin destination pairs considering a time of arrival — arrival_travel_time_matrix","text":"","code":"arrival_travel_time_matrix(   r5r_core,   origins,   destinations,   mode = \"WALK\",   mode_egress = \"WALK\",   arrival_datetime = Sys.time(),   breakdown = FALSE,   max_walk_time = Inf,   max_bike_time = Inf,   max_car_time = Inf,   max_trip_duration = 120L,   walk_speed = 3.6,   bike_speed = 12,   max_rides = 3,   max_lts = 2,   draws_per_minute = 5L,   n_threads = Inf,   verbose = FALSE,   progress = FALSE,   output_dir = NULL )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/arrival_travel_time_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate travel time matrix between origin destination pairs considering a time of arrival — arrival_travel_time_matrix","text":"r5r_core object connect R5 routing engine, created setup_r5(). origins, destinations Either POINT sf object WGS84 CRS, data.frame containing columns id, lon lat. mode character vector. transport modes allowed access, transfer vehicle legs trips. Defaults WALK. Please see details options. mode_egress character vector. transport mode used egress last public transport. can either WALK, BICYCLE CAR. Defaults WALK. Ignored public transport used. arrival_datetime POSIXct object. breakdown logical. Whether include detailed information trip output. FALSE (default), output lists total time origin-destination pair routes used complete trip minute specified time window. TRUE, output includes total access, waiting, -vehicle transfer time trip. Please note setting parameter TRUE makes function significantly slower. max_walk_time integer. maximum walking time (minutes) access egress transit network, make transfers within network complete walk-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_walk_time 15, get trips 15 minutes walk leg reach transit another 15 minutes walk leg reach destination leaving transit. walk-trips, whenever max_walk_time differs max_trip_duration, lowest value considered. max_bike_time integer. maximum cycling time (minutes) access egress transit network, make transfers within network complete bicycle-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_bike_time 15, get trips 15 minutes cycle leg reach transit another 15 minutes cycle leg reach destination leaving transit. bicycle-trips, whenever max_bike_time differs max_trip_duration, lowest value considered. max_car_time integer. maximum driving time (minutes) access egress transit network. Defaults restrictions, long max_trip_duration respected. max time considered separately leg (e.g. set max_car_time 15 minutes, potentially drive 15 minutes reach transit, another 15 minutes reach destination leaving transit). Defaults Inf, limit. max_trip_duration integer. maximum trip duration minutes. Defaults 120 minutes (2 hours). walk_speed numeric. Average walk speed km/h. Defaults 3.6 km/h. bike_speed numeric. Average cycling speed km/h. Defaults 12 km/h. max_rides integer. maximum number public transport rides allowed trip. Defaults 3. max_lts integer 1 4. maximum level traffic stress cyclists tolerate. value 1 means cyclists travel quietest streets, value 4 indicates cyclists can travel road. Defaults 2. Please see details information. draws_per_minute integer. number Monte Carlo draws perform per time window minute calculating travel time matrices estimating accessibility. Defaults 5. mean 300 draws 60-minute time window, example. parameter affects results GTFS feeds contain frequencies.txt table. GTFS feed frequency table, r5r still allows multiple runs set time_window deterministic way. n_threads integer. number threads use running router parallel. Defaults use available threads (Inf). verbose logical. Whether show R5 informative messages running function. Defaults FALSE (please note case R5 error messages still shown). Setting verbose TRUE shows detailed output, can useful debugging issues caught r5r. progress logical. Whether show progress counter running router. Defaults FALSE. works verbose set FALSE, progress counter interfere R5's output messages. Setting progress TRUE may impose small penalty computation efficiency, progress counter must synchronized among active threads. output_dir Either NULL path existing directory. NULL (default), function write one .csv file results origin specified directory. case, function returns path specified parameter. parameter particularly useful running memory-constrained settings writing results directly disk prevents r5r loading RAM memory.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/arrival_travel_time_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate travel time matrix between origin destination pairs considering a time of arrival — arrival_travel_time_matrix","text":"data.table travel time estimates (minutes) routes used trip origin destination pairs, minute specified time window. set origin, destination departure minute can appear N times, N number Monte Carlo draws specified function arguments (please note applies GTFS feeds describe transit network include frequencies table, otherwise single draw performed). pair completely absent final output trips completed minutes time window. single pair trips completed minutes time window, , minutes trips completed NA travel time routes used. output_dir NULL, function returns path specified parameter, .csv files containing results saved.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/arrival_travel_time_matrix.html","id":"transport-modes","dir":"Reference","previous_headings":"","what":"Transport modes","title":"Calculate travel time matrix between origin destination pairs considering a time of arrival — arrival_travel_time_matrix","text":"R5 allows multiple combinations transport modes. options include: Transit modes: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR. option TRANSIT automatically considers public transport modes available. Non transit modes: WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/arrival_travel_time_matrix.html","id":"level-of-traffic-stress-lts-","dir":"Reference","previous_headings":"","what":"Level of Traffic Stress (LTS)","title":"Calculate travel time matrix between origin destination pairs considering a time of arrival — arrival_travel_time_matrix","text":"cycling enabled R5 (passing value BIKE either mode mode_egress), setting max_lts allow cycling streets given level danger/stress. Setting max_lts 1, example, allow cycling separated bicycle infrastructure low-traffic streets routing revert walking traversing links LTS exceeding 1. Setting max_lts 3 allow cycling links LTS 1, 2 3. Routing also reverts walking street segment tagged non-bikable OSM (e.g. staircase), independently specified max LTS. default methodology assigning LTS values network edges based commonly tagged attributes OSM ways. See info LTS original documentation R5 Conveyal https://docs.conveyal.com/learn-/traffic-stress. summary: LTS 1: Tolerable children. includes low-speed, low-volume streets, well separated bicycle facilities (parking-protected lanes cycle tracks). LTS 2: Tolerable mainstream adult population. includes streets cyclists dedicated lanes interact traffic formal crossing. LTS 3: Tolerable \"enthused confident\" cyclists. includes streets may involve close proximity moderate- high-speed vehicular traffic. LTS 4: Tolerable \"strong fearless\" cyclists. includes streets cyclists required mix moderate- high-speed vehicular traffic. advanced users, can provide custom LTS values adding tag <key = \"lts\"> osm.pbf file.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/arrival_travel_time_matrix.html","id":"datetime-parsing","dir":"Reference","previous_headings":"","what":"Datetime parsing","title":"Calculate travel time matrix between origin destination pairs considering a time of arrival — arrival_travel_time_matrix","text":"r5r ignores timezone attribute datetime objects parsing dates times, using study area's timezone instead. example, say running calculations using Rio de Janeiro, Brazil, study area. datetime .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\") parsed May 13th, 2019, 14:00h Rio's local time, expected. .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\", tz = \"Europe/Paris\") also parsed exact date time Rio's local time, perhaps surprisingly, ignoring timezone attribute.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/arrival_travel_time_matrix.html","id":"routing-algorithm","dir":"Reference","previous_headings":"","what":"Routing algorithm","title":"Calculate travel time matrix between origin destination pairs considering a time of arrival — arrival_travel_time_matrix","text":"travel_time_matrix(), expanded_travel_time_matrix(), arrival_travel_time_matrix()  accessibility() functions use R5-specific extension RAPTOR routing algorithm (see Conway et al., 2017). RAPTOR extension uses systematic sample one departure per minute time window set user 'time_window' parameter. detailed description base RAPTOR can found Delling et al (2015). However, whenever user includes transit fares inputs functions, automatically switch use R5-specific extension McRAPTOR routing algorithm. Conway, M. W., Byrd, ., & van der Linden, M. (2017). Evidence-based transit land use sketch planning using interactive accessibility methods combined schedule headway-based networks. Transportation Research Record, 2653(1), 45-53. doi:10.3141/2653-06 Delling, D., Pajor, T., & Werneck, R. F. (2015). Round-based public transit routing. Transportation Science, 49(3), 591-604. doi:10.1287/trsc.2014.0534","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/arrival_travel_time_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate travel time matrix between origin destination pairs considering a time of arrival — arrival_travel_time_matrix","text":"","code":"library(r5r)  # build transport network data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path ) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  # load origin/destination points points <- read.csv(file.path(data_path, \"poa_points_of_interest.csv\"))  arrival_datetime <- as.POSIXct(   \"13-05-2019 14:00:00\",   format = \"%d-%m-%Y %H:%M:%S\" )  # by default only returns the total time between each pair in each minute of # the specified time window arrival_ttm <- arrival_travel_time_matrix(   r5r_core,   origins = points,   destinations = points,   mode = c(\"WALK\", \"TRANSIT\"),   arrival_datetime = arrival_datetime,   max_trip_duration = 60 )  head(arrival_ttm) #>          from_id               to_id departure_time draw_number routes #>           <char>              <char>         <char>       <int> <char> #> 1: public_market       public_market       13:59:00           1 [WALK] #> 2: public_market bus_central_station       13:45:00           1 LINHA1 #> 3: public_market    gasometer_museum       13:45:00           1   2441 #> 4: public_market santa_casa_hospital       13:44:00           1 [WALK] #> 5: public_market            townhall       13:56:00           1 [WALK] #> 6: public_market     piratini_palace       13:42:00           1 [WALK] #>    total_time #>         <num> #> 1:        0.0 #> 2:       13.8 #> 3:       11.7 #> 4:       15.3 #> 5:        3.5 #> 6:       17.3  # when breakdown = TRUE the output contains much more information arrival_ttm2 <- arrival_travel_time_matrix(   r5r_core,   origins = points,   destinations = points,   mode = c(\"WALK\", \"TRANSIT\"),   arrival_datetime = arrival_datetime,   max_trip_duration = 60,   breakdown = TRUE )  head(arrival_ttm2) #>          from_id               to_id departure_time draw_number access_time #>           <char>              <char>         <char>       <int>       <num> #> 1: public_market       public_market       13:59:00           1         0.0 #> 2: public_market bus_central_station       13:45:00           1         4.8 #> 3: public_market    gasometer_museum       13:45:00           1         3.5 #> 4: public_market santa_casa_hospital       13:44:00           1         0.0 #> 5: public_market            townhall       13:56:00           1         0.0 #> 6: public_market     piratini_palace       13:42:00           1         0.0 #>    wait_time ride_time transfer_time egress_time routes n_rides total_time #>        <num>     <num>         <num>       <num> <char>   <int>      <num> #> 1:       0.0       0.0             0         0.0 [WALK]       0        0.0 #> 2:       1.2       1.6             0         6.2 LINHA1       1       13.8 #> 3:       1.5       4.9             0         1.8   2441       1       11.7 #> 4:       0.0       0.0             0         0.0 [WALK]       0       15.3 #> 5:       0.0       0.0             0         0.0 [WALK]       0        3.5 #> 6:       0.0       0.0             0         0.0 [WALK]       0       17.3  stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/assert_fare_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert fare structure — assert_fare_structure","title":"Assert fare structure — assert_fare_structure","text":"Asserts whether specified fare structure object complies structure set setup_fare_structure().","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assert_fare_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert fare structure — assert_fare_structure","text":"","code":"assert_fare_structure(fare_structure)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assert_fare_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert fare structure — assert_fare_structure","text":"fare_structure fare structure object, following convention set setup_fare_structure(). object describes transit fares calculated. Please see fare structure vignette understand object structured: vignette(\"fare_structure\", package = \"r5r\").","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assert_fare_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert fare structure — assert_fare_structure","text":"Throws error upon failure invisibly returns TRUE success.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_decay_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign decay function and parameter values — assign_decay_function","title":"Assign decay function and parameter values — assign_decay_function","text":"Checks assigns decay function values.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_decay_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign decay function and parameter values — assign_decay_function","text":"","code":"assign_decay_function(decay_function, decay_value)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_decay_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign decay function and parameter values — assign_decay_function","text":"decay_function string, name decay function. decay_value number, value decay parameter.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_decay_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign decay function and parameter values — assign_decay_function","text":"list validated decay function parameter value.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_departure.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and convert POSIXct objects to strings — assign_departure","title":"Check and convert POSIXct objects to strings — assign_departure","text":"Check convert POSIXct objects strings","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_departure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and convert POSIXct objects to strings — assign_departure","text":"","code":"assign_departure(datetime)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_departure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and convert POSIXct objects to strings — assign_departure","text":"datetime object POSIXct class.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_departure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and convert POSIXct objects to strings — assign_departure","text":"list date time trip departure characters.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_drop_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign drop geometry — assign_drop_geometry","title":"Assign drop geometry — assign_drop_geometry","text":"Check drop geometry input.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_drop_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign drop geometry — assign_drop_geometry","text":"","code":"assign_drop_geometry(drop_geometry)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_drop_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign drop geometry — assign_drop_geometry","text":"drop_geometry logical.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_drop_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign drop geometry — assign_drop_geometry","text":"logical.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_max_street_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign max street time from walk/bike distance and speed — assign_max_street_time","title":"Assign max street time from walk/bike distance and speed — assign_max_street_time","text":"Checks time duration speed inputs converts distance.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_max_street_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign max street time from walk/bike distance and speed — assign_max_street_time","text":"","code":"assign_max_street_time(max_time, speed, max_trip_duration, mode)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_max_street_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign max street time from walk/bike distance and speed — assign_max_street_time","text":"max_time numeric length 1. Maximum walking distance (meters) whole trip. Passed routing functions. speed numeric length 1. Average walk speed km/h. Defaults 3.6 Km/h. Passed routing functions. max_trip_duration numeric length 1. Maximum trip duration seconds. Defaults 120 minutes (2 hours). Passed routing functions. mode string. Either \"bike\" \"walk\".","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_max_street_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign max street time from walk/bike distance and speed — assign_max_street_time","text":"integer representing maximum number minutes walking.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_max_trip_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign max trip duration — assign_max_trip_duration","title":"Assign max trip duration — assign_max_trip_duration","text":"Check convert max trip duration input.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_max_trip_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign max trip duration — assign_max_trip_duration","text":"","code":"assign_max_trip_duration(   max_trip_duration,   modes,   max_walk_time,   max_bike_time )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_max_trip_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign max trip duration — assign_max_trip_duration","text":"max_trip_duration number.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_max_trip_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign max trip duration — assign_max_trip_duration","text":"integer representing maximum trip duration minutes.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and select transport modes from user input — assign_mode","title":"Check and select transport modes from user input — assign_mode","text":"Selects transport modes used routing functions. one direct access/egress modes allowed time.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and select transport modes from user input — assign_mode","text":"","code":"assign_mode(mode, mode_egress, style)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and select transport modes from user input — assign_mode","text":"mode character vector, passed routing functions. mode_egress character vector, passed routing functions.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and select transport modes from user input — assign_mode","text":"list transport modes used routing.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_opportunities.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign opportunities data — assign_opportunities","title":"Assign opportunities data — assign_opportunities","text":"Check create opportunities dataset.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_opportunities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign opportunities data — assign_opportunities","text":"","code":"assign_opportunities(destinations, opportunities_colnames)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_opportunities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign opportunities data — assign_opportunities","text":"destinations Either data.frame POINT sf. opportunities_colnames character vector names opportunities columns destinations.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_opportunities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign opportunities data — assign_opportunities","text":"list Java-Array objects.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_osm_link_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign osm_link_ids — assign_osm_link_ids","title":"Assign osm_link_ids — assign_osm_link_ids","text":"Check osm_link_ids input.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_osm_link_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign osm_link_ids — assign_osm_link_ids","text":"","code":"assign_osm_link_ids(osm_link_ids, drop_geometry)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_osm_link_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign osm_link_ids — assign_osm_link_ids","text":"osm_link_ids logical. drop_geometry logical.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_osm_link_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign osm_link_ids — assign_osm_link_ids","text":"logical.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_points_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and convert origin and destination inputs — assign_points_input","title":"Check and convert origin and destination inputs — assign_points_input","text":"Check convert origin destination inputs","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_points_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and convert origin and destination inputs — assign_points_input","text":"","code":"assign_points_input(df, name)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_points_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and convert origin and destination inputs — assign_points_input","text":"df Either data.frame POINT sf. name Object name.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_points_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and convert origin and destination inputs — assign_points_input","text":"data.frame columns id, lon lat.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_shortest_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign shortest path — assign_shortest_path","title":"Assign shortest path — assign_shortest_path","text":"Check shortest path input.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_shortest_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign shortest path — assign_shortest_path","text":"","code":"assign_shortest_path(shortest_path)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_shortest_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign shortest path — assign_shortest_path","text":"shortest_path logical.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/assign_shortest_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign shortest path — assign_shortest_path","text":"logical.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/detailed_itineraries.html","id":null,"dir":"Reference","previous_headings":"","what":"Detailed itineraries between origin-destination pairs — detailed_itineraries","title":"Detailed itineraries between origin-destination pairs — detailed_itineraries","text":"Returns detailed trip information origin-destination pairs. output includes waiting moving time trip leg, well info distance traveled, routes used geometry leg. Please note function originally conceptualized trip planning functionality, similar commercial non-commercial APIs apps (e.g. Moovit, Google's Directions API, OpenTripPlanning's PlannerResource API). Thus, consumes much time memory (analytical) routing functions included package.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/detailed_itineraries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detailed itineraries between origin-destination pairs — detailed_itineraries","text":"","code":"detailed_itineraries(   r5r_core,   origins,   destinations,   mode = \"WALK\",   mode_egress = \"WALK\",   departure_datetime = Sys.time(),   time_window = 10L,   suboptimal_minutes = 0L,   fare_structure = NULL,   max_fare = Inf,   max_walk_time = Inf,   max_bike_time = Inf,   max_car_time = Inf,   max_trip_duration = 120L,   walk_speed = 3.6,   bike_speed = 12,   max_rides = 3,   max_lts = 2,   shortest_path = TRUE,   all_to_all = FALSE,   n_threads = Inf,   verbose = FALSE,   progress = FALSE,   drop_geometry = FALSE,   osm_link_ids = FALSE,   output_dir = NULL )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/detailed_itineraries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detailed itineraries between origin-destination pairs — detailed_itineraries","text":"r5r_core object connect R5 routing engine, created setup_r5(). origins, destinations Either POINT sf object WGS84 CRS, data.frame containing columns id, lon lat. mode character vector. transport modes allowed access, transfer vehicle legs trips. Defaults WALK. Please see details options. mode_egress character vector. transport mode used egress last public transport. can either WALK, BICYCLE CAR. Defaults WALK. Ignored public transport used. departure_datetime POSIXct object. Please note departure time influences public transport legs. working public transport networks, please check calendar.txt within GTFS feeds valid dates. Please see details information datetimes parsed. time_window integer. time window minutes r5r calculate multiple itineraries departing minute. Defaults 10 minutes. sequence routes appear different minutes time window, fastest kept output. happens result aggregated percentile, opposed routing functions package. , output may contain trips departing specified departure_datetime, still within time window. Please read time window vignette details argument affects results routing function: vignette(\"time_window\", package = \"r5r\"). suboptimal_minutes number. difference minutes non-optimal RAPTOR branch can optimal branch without disregarded routing algorithm. , example, users set suboptimal_minutes = 10, routing algorithm consider sub-optimal routes arrive 10 minutes arrival optimal one. argument emulates real-life behaviour makes people want take path technically optimal terms travel time, example, practical reasons (e.g. mode preference, safety, etc). practice, higher value, itineraries returned final result. fare_structure fare structure object, following convention set setup_fare_structure(). object describes transit fares calculated. Please see fare structure vignette understand object structured: vignette(\"fare_structure\", package = \"r5r\"). max_fare number. maximum value trips can cost calculating fastest journey origin destination pair. max_walk_time integer. maximum walking time (minutes) access egress transit network, make transfers within network complete walk-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_walk_time 15, get trips 15 minutes walk leg reach transit another 15 minutes walk leg reach destination leaving transit. walk-trips, whenever max_walk_time differs max_trip_duration, lowest value considered. max_bike_time integer. maximum cycling time (minutes) access egress transit network, make transfers within network complete bicycle-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_bike_time 15, get trips 15 minutes cycle leg reach transit another 15 minutes cycle leg reach destination leaving transit. bicycle-trips, whenever max_bike_time differs max_trip_duration, lowest value considered. max_car_time integer. maximum driving time (minutes) access egress transit network. Defaults restrictions, long max_trip_duration respected. max time considered separately leg (e.g. set max_car_time 15 minutes, potentially drive 15 minutes reach transit, another 15 minutes reach destination leaving transit). Defaults Inf, limit. max_trip_duration integer. maximum trip duration minutes. Defaults 120 minutes (2 hours). walk_speed numeric. Average walk speed km/h. Defaults 3.6 km/h. bike_speed numeric. Average cycling speed km/h. Defaults 12 km/h. max_rides integer. maximum number public transport rides allowed trip. Defaults 3. max_lts integer 1 4. maximum level traffic stress cyclists tolerate. value 1 means cyclists travel quietest streets, value 4 indicates cyclists can travel road. Defaults 2. Please see details information. shortest_path logical. Whether function return fastest itinerary origin destination pair (default) multiple alternatives. all_to_all logical. Whether query routes 1st origin 1st destination, 2nd origin 2nd destination, (FALSE, default) query routes origins destinations (TRUE). n_threads integer. number threads use running router parallel. Defaults use available threads (Inf). verbose logical. Whether show R5 informative messages running function. Defaults FALSE (please note case R5 error messages still shown). Setting verbose TRUE shows detailed output, can useful debugging issues caught r5r. progress logical. Whether show progress counter running router. Defaults FALSE. works verbose set FALSE, progress counter interfere R5's output messages. Setting progress TRUE may impose small penalty computation efficiency, progress counter must synchronized among active threads. drop_geometry logical. Whether output include geometry trip leg . default value FALSE keeps geometry column result. osm_link_ids logical. Whether output include additional columns OSM ids road segments used along trip geometry. Defaults FALSE. Keep mind osm_id road returned even route uses small stretch road (e.g. 5m 600m street segment). want precision use column edge_id returns segments exact length used trip, can later tie back osm_id. output_dir Either NULL path existing directory. NULL (default), function write one .csv file results origin specified directory. case, function returns path specified parameter. parameter particularly useful running memory-constrained settings writing results directly disk prevents r5r loading RAM memory.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/detailed_itineraries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detailed itineraries between origin-destination pairs — detailed_itineraries","text":"drop_geometry FALSE, function outputs LINESTRING sf detailed information itineraries specified origins destinations. TRUE, output data.table. distances meters travel times minutes. output_dir NULL, function returns path specified parameter, .csv files containing results saved.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/detailed_itineraries.html","id":"transport-modes","dir":"Reference","previous_headings":"","what":"Transport modes","title":"Detailed itineraries between origin-destination pairs — detailed_itineraries","text":"R5 allows multiple combinations transport modes. options include: Transit modes: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR. option TRANSIT automatically considers public transport modes available. Non transit modes: WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/detailed_itineraries.html","id":"level-of-traffic-stress-lts-","dir":"Reference","previous_headings":"","what":"Level of Traffic Stress (LTS)","title":"Detailed itineraries between origin-destination pairs — detailed_itineraries","text":"cycling enabled R5 (passing value BIKE either mode mode_egress), setting max_lts allow cycling streets given level danger/stress. Setting max_lts 1, example, allow cycling separated bicycle infrastructure low-traffic streets routing revert walking traversing links LTS exceeding 1. Setting max_lts 3 allow cycling links LTS 1, 2 3. Routing also reverts walking street segment tagged non-bikable OSM (e.g. staircase), independently specified max LTS. default methodology assigning LTS values network edges based commonly tagged attributes OSM ways. See info LTS original documentation R5 Conveyal https://docs.conveyal.com/learn-/traffic-stress. summary: LTS 1: Tolerable children. includes low-speed, low-volume streets, well separated bicycle facilities (parking-protected lanes cycle tracks). LTS 2: Tolerable mainstream adult population. includes streets cyclists dedicated lanes interact traffic formal crossing. LTS 3: Tolerable \"enthused confident\" cyclists. includes streets may involve close proximity moderate- high-speed vehicular traffic. LTS 4: Tolerable \"strong fearless\" cyclists. includes streets cyclists required mix moderate- high-speed vehicular traffic. advanced users, can provide custom LTS values adding tag <key = \"lts\"> osm.pbf file.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/detailed_itineraries.html","id":"datetime-parsing","dir":"Reference","previous_headings":"","what":"Datetime parsing","title":"Detailed itineraries between origin-destination pairs — detailed_itineraries","text":"r5r ignores timezone attribute datetime objects parsing dates times, using study area's timezone instead. example, say running calculations using Rio de Janeiro, Brazil, study area. datetime .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\") parsed May 13th, 2019, 14:00h Rio's local time, expected. .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\", tz = \"Europe/Paris\") also parsed exact date time Rio's local time, perhaps surprisingly, ignoring timezone attribute.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/detailed_itineraries.html","id":"routing-algorithm","dir":"Reference","previous_headings":"","what":"Routing algorithm","title":"Detailed itineraries between origin-destination pairs — detailed_itineraries","text":"detailed_itineraries() pareto_frontier() functions use R5-specific extension McRAPTOR routing algorithm. implementation used detailed_itineraries() allows router find paths optimal less optimal terms travel time, heuristics around multiple access modes, riding patterns, etc. specific extension McRAPTOR suboptimal path routing documented yet, detailed description base McRAPTOR can found Delling et al (2015). implementation used pareto_frontier(), hand, returns fastest trip within given monetary cutoff, ignoring slower trips cost . detailed discussion algorithm can found Conway Stewart (2019). Delling, D., Pajor, T., & Werneck, R. F. (2015). Round-based public transit routing. Transportation Science, 49(3), 591-604. doi:10.1287/trsc.2014.0534 Conway, M. W., & Stewart, . F. (2019). Getting Charlie MTA: multiobjective optimization method account cost constraints public transit accessibility metrics. International Journal Geographical Information Science, 33(9), 1759-1787. doi:10.1080/13658816.2019.1605075","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/detailed_itineraries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detailed itineraries between origin-destination pairs — detailed_itineraries","text":"","code":"library(r5r)  # build transport network data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  # load origin/destination points points <- read.csv(file.path(data_path, \"poa_points_of_interest.csv\"))  # inputs departure_datetime <- as.POSIXct(   \"13-05-2019 14:00:00\",   format = \"%d-%m-%Y %H:%M:%S\" )  det <- detailed_itineraries(   r5r_core,   origins = points[10,],   destinations = points[12,],   mode = c(\"WALK\", \"TRANSIT\"),   departure_datetime = departure_datetime,   max_trip_duration = 60 ) head(det) #> Simple feature collection with 5 features and 16 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -51.24094 ymin: -30.05 xmax: -51.19762 ymax: -29.99729 #> Geodetic CRS:  WGS 84 #>            from_id  from_lat  from_lon                          to_id    to_lat #> 1 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 2 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 3 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 4 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #> 5 farrapos_station -29.99772 -51.19762 praia_de_belas_shopping_center -30.04995 #>      to_lon option departure_time total_duration total_distance segment mode #> 1 -51.22875      1       14:09:10           36.2           9460       1 WALK #> 2 -51.22875      1       14:09:10           36.2           9460       2 RAIL #> 3 -51.22875      1       14:09:10           36.2           9460       3 WALK #> 4 -51.22875      1       14:09:10           36.2           9460       4  BUS #> 5 -51.22875      1       14:09:10           36.2           9460       5 WALK #>   segment_duration wait distance  route                       geometry #> 1              4.6  0.0      174        LINESTRING (-51.1981 -29.99... #> 2              6.6  1.3     4796 LINHA1 LINESTRING (-51.19763 -29.9... #> 3              5.7  0.0      256        LINESTRING (-51.22827 -30.0... #> 4             10.4  4.4     4083    188 LINESTRING (-51.22926 -30.0... #> 5              3.2  0.0      151        LINESTRING (-51.22949 -30.0...  stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/download_r5.html","id":null,"dir":"Reference","previous_headings":"","what":"Download R5.jar — download_r5","title":"Download R5.jar — download_r5","text":"Downloads R5.jar saves locally, inside package directory.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/download_r5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download R5.jar — download_r5","text":"","code":"download_r5(   version = NULL,   quiet = FALSE,   force_update = FALSE,   temp_dir = FALSE )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/download_r5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download R5.jar — download_r5","text":"version string. version R5 downloaded. NULL, defaults latest version. quiet logical. Whether show informative messages downloading file. Defaults FALSE. force_update logical. Whether overwrite previously downloaded R5.jar local directory. Defaults FALSE. temp_dir logical. Whether file saved temporary directory. Defaults FALSE.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/download_r5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download R5.jar — download_r5","text":"path downloaded file.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/download_r5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download R5.jar — download_r5","text":"","code":"library(r5r)  download_r5(temp_dir = TRUE) #> Downloading R5 jar file to /tmp/RtmpDjJ1o2/r5-v7.4-all.jar #> [1] \"/tmp/RtmpDjJ1o2/r5-v7.4-all.jar\""},{"path":"https://ipeagit.github.io/r5r/dev/reference/expand_od_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand origin-destination pairs — expand_od_pairs","title":"Expand origin-destination pairs — expand_od_pairs","text":"function used detailed_itineraries() update origins destinations datasets.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/expand_od_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand origin-destination pairs — expand_od_pairs","text":"","code":"expand_od_pairs(origins, destinations, all_to_all)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/expand_od_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand origin-destination pairs — expand_od_pairs","text":"origins Passed detailed_itineraries(). destinations Passed detailed_itineraries(). all_to_all Passed detailed_itineraries().","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/expanded_travel_time_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate minute-by-minute travel times between origin destination pairs — expanded_travel_time_matrix","title":"Calculate minute-by-minute travel times between origin destination pairs — expanded_travel_time_matrix","text":"Detailed computation travel time estimates one multiple origin destination pairs. Results show travel time fastest route alternative departing minute within specified time window. Please note function can memory intensive large data sets time windows.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/expanded_travel_time_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate minute-by-minute travel times between origin destination pairs — expanded_travel_time_matrix","text":"","code":"expanded_travel_time_matrix(   r5r_core,   origins,   destinations,   mode = \"WALK\",   mode_egress = \"WALK\",   departure_datetime = Sys.time(),   time_window = 10L,   breakdown = FALSE,   max_walk_time = Inf,   max_bike_time = Inf,   max_car_time = Inf,   max_trip_duration = 120L,   walk_speed = 3.6,   bike_speed = 12,   max_rides = 3,   max_lts = 2,   draws_per_minute = 5L,   n_threads = Inf,   verbose = FALSE,   progress = FALSE,   output_dir = NULL )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/expanded_travel_time_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate minute-by-minute travel times between origin destination pairs — expanded_travel_time_matrix","text":"r5r_core object connect R5 routing engine, created setup_r5(). origins, destinations Either POINT sf object WGS84 CRS, data.frame containing columns id, lon lat. mode character vector. transport modes allowed access, transfer vehicle legs trips. Defaults WALK. Please see details options. mode_egress character vector. transport mode used egress last public transport. can either WALK, BICYCLE CAR. Defaults WALK. Ignored public transport used. departure_datetime POSIXct object. Please note departure time influences public transport legs. working public transport networks, please check calendar.txt within GTFS feeds valid dates. Please see details information datetimes parsed. time_window integer. time window minutes r5r calculate multiple travel time matrices departing minute. Defaults 10 minutes. function returns result based median travel times. Please read time window vignette details usage vignette(\"time_window\", package = \"r5r\") breakdown logical. Whether include detailed information trip output. FALSE (default), output lists total time origin-destination pair routes used complete trip minute specified time window. TRUE, output includes total access, waiting, -vehicle transfer time trip. Please note setting parameter TRUE makes function significantly slower. max_walk_time integer. maximum walking time (minutes) access egress transit network, make transfers within network complete walk-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_walk_time 15, get trips 15 minutes walk leg reach transit another 15 minutes walk leg reach destination leaving transit. walk-trips, whenever max_walk_time differs max_trip_duration, lowest value considered. max_bike_time integer. maximum cycling time (minutes) access egress transit network, make transfers within network complete bicycle-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_bike_time 15, get trips 15 minutes cycle leg reach transit another 15 minutes cycle leg reach destination leaving transit. bicycle-trips, whenever max_bike_time differs max_trip_duration, lowest value considered. max_car_time integer. maximum driving time (minutes) access egress transit network. Defaults restrictions, long max_trip_duration respected. max time considered separately leg (e.g. set max_car_time 15 minutes, potentially drive 15 minutes reach transit, another 15 minutes reach destination leaving transit). Defaults Inf, limit. max_trip_duration integer. maximum trip duration minutes. Defaults 120 minutes (2 hours). walk_speed numeric. Average walk speed km/h. Defaults 3.6 km/h. bike_speed numeric. Average cycling speed km/h. Defaults 12 km/h. max_rides integer. maximum number public transport rides allowed trip. Defaults 3. max_lts integer 1 4. maximum level traffic stress cyclists tolerate. value 1 means cyclists travel quietest streets, value 4 indicates cyclists can travel road. Defaults 2. Please see details information. draws_per_minute integer. number Monte Carlo draws perform per time window minute calculating travel time matrices estimating accessibility. Defaults 5. mean 300 draws 60-minute time window, example. parameter affects results GTFS feeds contain frequencies.txt table. GTFS feed frequency table, r5r still allows multiple runs set time_window deterministic way. n_threads integer. number threads use running router parallel. Defaults use available threads (Inf). verbose logical. Whether show R5 informative messages running function. Defaults FALSE (please note case R5 error messages still shown). Setting verbose TRUE shows detailed output, can useful debugging issues caught r5r. progress logical. Whether show progress counter running router. Defaults FALSE. works verbose set FALSE, progress counter interfere R5's output messages. Setting progress TRUE may impose small penalty computation efficiency, progress counter must synchronized among active threads. output_dir Either NULL path existing directory. NULL (default), function write one .csv file results origin specified directory. case, function returns path specified parameter. parameter particularly useful running memory-constrained settings writing results directly disk prevents r5r loading RAM memory.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/expanded_travel_time_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate minute-by-minute travel times between origin destination pairs — expanded_travel_time_matrix","text":"data.table travel time estimates (minutes) routes used trip origin destination pairs, minute specified time window. set origin, destination departure minute can appear N times, N number Monte Carlo draws specified function arguments (please note applies GTFS feeds describe transit network include frequencies table, otherwise single draw performed). pair completely absent final output trips completed minutes time window. single pair trips completed minutes time window, , minutes trips completed NA travel time routes used. output_dir NULL, function returns path specified parameter, .csv files containing results saved.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/expanded_travel_time_matrix.html","id":"transport-modes","dir":"Reference","previous_headings":"","what":"Transport modes","title":"Calculate minute-by-minute travel times between origin destination pairs — expanded_travel_time_matrix","text":"R5 allows multiple combinations transport modes. options include: Transit modes: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR. option TRANSIT automatically considers public transport modes available. Non transit modes: WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/expanded_travel_time_matrix.html","id":"level-of-traffic-stress-lts-","dir":"Reference","previous_headings":"","what":"Level of Traffic Stress (LTS)","title":"Calculate minute-by-minute travel times between origin destination pairs — expanded_travel_time_matrix","text":"cycling enabled R5 (passing value BIKE either mode mode_egress), setting max_lts allow cycling streets given level danger/stress. Setting max_lts 1, example, allow cycling separated bicycle infrastructure low-traffic streets routing revert walking traversing links LTS exceeding 1. Setting max_lts 3 allow cycling links LTS 1, 2 3. Routing also reverts walking street segment tagged non-bikable OSM (e.g. staircase), independently specified max LTS. default methodology assigning LTS values network edges based commonly tagged attributes OSM ways. See info LTS original documentation R5 Conveyal https://docs.conveyal.com/learn-/traffic-stress. summary: LTS 1: Tolerable children. includes low-speed, low-volume streets, well separated bicycle facilities (parking-protected lanes cycle tracks). LTS 2: Tolerable mainstream adult population. includes streets cyclists dedicated lanes interact traffic formal crossing. LTS 3: Tolerable \"enthused confident\" cyclists. includes streets may involve close proximity moderate- high-speed vehicular traffic. LTS 4: Tolerable \"strong fearless\" cyclists. includes streets cyclists required mix moderate- high-speed vehicular traffic. advanced users, can provide custom LTS values adding tag <key = \"lts\"> osm.pbf file.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/expanded_travel_time_matrix.html","id":"datetime-parsing","dir":"Reference","previous_headings":"","what":"Datetime parsing","title":"Calculate minute-by-minute travel times between origin destination pairs — expanded_travel_time_matrix","text":"r5r ignores timezone attribute datetime objects parsing dates times, using study area's timezone instead. example, say running calculations using Rio de Janeiro, Brazil, study area. datetime .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\") parsed May 13th, 2019, 14:00h Rio's local time, expected. .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\", tz = \"Europe/Paris\") also parsed exact date time Rio's local time, perhaps surprisingly, ignoring timezone attribute.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/expanded_travel_time_matrix.html","id":"routing-algorithm","dir":"Reference","previous_headings":"","what":"Routing algorithm","title":"Calculate minute-by-minute travel times between origin destination pairs — expanded_travel_time_matrix","text":"travel_time_matrix(), expanded_travel_time_matrix(), arrival_travel_time_matrix()  accessibility() functions use R5-specific extension RAPTOR routing algorithm (see Conway et al., 2017). RAPTOR extension uses systematic sample one departure per minute time window set user 'time_window' parameter. detailed description base RAPTOR can found Delling et al (2015). However, whenever user includes transit fares inputs functions, automatically switch use R5-specific extension McRAPTOR routing algorithm. Conway, M. W., Byrd, ., & van der Linden, M. (2017). Evidence-based transit land use sketch planning using interactive accessibility methods combined schedule headway-based networks. Transportation Research Record, 2653(1), 45-53. doi:10.3141/2653-06 Delling, D., Pajor, T., & Werneck, R. F. (2015). Round-based public transit routing. Transportation Science, 49(3), 591-604. doi:10.1287/trsc.2014.0534","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/expanded_travel_time_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate minute-by-minute travel times between origin destination pairs — expanded_travel_time_matrix","text":"","code":"library(r5r)  # build transport network data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  # load origin/destination points points <- read.csv(file.path(data_path, \"poa_points_of_interest.csv\"))  departure_datetime <- as.POSIXct(   \"13-05-2019 14:00:00\",   format = \"%d-%m-%Y %H:%M:%S\" )  # by default only returns the total time between each pair in each minute of # the specified time window ettm <- expanded_travel_time_matrix(   r5r_core,   origins = points,   destinations = points,   mode = c(\"WALK\", \"TRANSIT\"),   time_window = 20,   departure_datetime = departure_datetime,   max_trip_duration = 60 ) head(ettm) #>          from_id         to_id departure_time draw_number routes total_time #>           <char>        <char>         <char>       <int> <char>      <num> #> 1: public_market public_market       14:00:00           1 [WALK]          0 #> 2: public_market public_market       14:01:00           1 [WALK]          0 #> 3: public_market public_market       14:02:00           1 [WALK]          0 #> 4: public_market public_market       14:03:00           1 [WALK]          0 #> 5: public_market public_market       14:04:00           1 [WALK]          0 #> 6: public_market public_market       14:05:00           1 [WALK]          0  # when breakdown = TRUE the output contains much more information ettm <- expanded_travel_time_matrix(   r5r_core,   origins = points,   destinations = points,   mode = c(\"WALK\", \"TRANSIT\"),   time_window = 20,   departure_datetime = departure_datetime,   max_trip_duration = 60,   breakdown = TRUE ) head(ettm) #>          from_id         to_id departure_time draw_number access_time wait_time #>           <char>        <char>         <char>       <int>       <num>     <num> #> 1: public_market public_market       14:00:00           1           0         0 #> 2: public_market public_market       14:01:00           1           0         0 #> 3: public_market public_market       14:02:00           1           0         0 #> 4: public_market public_market       14:03:00           1           0         0 #> 5: public_market public_market       14:04:00           1           0         0 #> 6: public_market public_market       14:05:00           1           0         0 #>    ride_time transfer_time egress_time routes n_rides total_time #>        <num>         <num>       <num> <char>   <int>      <num> #> 1:         0             0           0 [WALK]       0          0 #> 2:         0             0           0 [WALK]       0          0 #> 3:         0             0           0 [WALK]       0          0 #> 4:         0             0           0 [WALK]       0          0 #> 5:         0             0           0 [WALK]       0          0 #> 6:         0             0           0 [WALK]       0          0  stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/fileurl_from_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get most recent JAR file url from metadata — fileurl_from_metadata","title":"Get most recent JAR file url from metadata — fileurl_from_metadata","text":"Returns recent JAR file url metadata, depending version.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/fileurl_from_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get most recent JAR file url from metadata — fileurl_from_metadata","text":"","code":"fileurl_from_metadata(version = NULL)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/fileurl_from_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get most recent JAR file url from metadata — fileurl_from_metadata","text":"version string. version R5 downloaded. NULL, defaults latest version.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/fileurl_from_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get most recent JAR file url from metadata — fileurl_from_metadata","text":"url string.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/find_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Find snapped locations of input points on street network — find_snap","title":"Find snapped locations of input points on street network — find_snap","text":"Finds snapped location points R5 network. Snapping important step routing process, origins destinations specified user actually positioned network created R5. snapping process R5 composed two rounds. First, tries snap points within radius 300 meters . first round unsuccessful, R5 expands search radius specified (default 1.6km). yet unsuccessful, unsnapped points used routing process. snapped location point depends transport mode set user, network edges available specific modes (e.g. pedestrian-street used snap car trips).","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/find_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find snapped locations of input points on street network — find_snap","text":"","code":"find_snap(r5r_core, points, radius = 1600, mode = \"WALK\")"},{"path":"https://ipeagit.github.io/r5r/dev/reference/find_snap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find snapped locations of input points on street network — find_snap","text":"r5r_core object connect R5 routing engine, created setup_r5(). points Either POINT sf object WGS84 CRS, data.frame containing columns id, lon lat. radius Numeric. maximum radius meters within snap. Defaults 1600m. mode string. mode consider trying snap points network. Defaults WALK, also allows BICYCLE CAR.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/find_snap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find snapped locations of input points on street network — find_snap","text":"data.table original points, respective snapped coordinates street network Euclidean distance (meters) original points snapped location. Points snapped show NA coordinates found = FALSE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/find_snap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find snapped locations of input points on street network — find_snap","text":"","code":"library(r5r)  path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path = path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat points <- read.csv(file.path(path, \"poa_hexgrid.csv\"))  snap_df <- find_snap(r5r_core, points, radius = 2000, mode = \"WALK\")  stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/isochrone.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate isochrones from a given location — isochrone","title":"Estimate isochrones from a given location — isochrone","text":"Fast computation isochrones given location. function can return either polygon-based line-based isochrones. Polygon-based isochrones generated concave polygons based travel times trip origin nodes transport network. Meanwhile, line-based isochronesare based travel times origin centroids segments transport network.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/isochrone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate isochrones from a given location — isochrone","text":"","code":"isochrone(   r5r_core,   origins,   mode = \"transit\",   mode_egress = \"walk\",   cutoffs = c(0, 15, 30),   sample_size = 0.8,   departure_datetime = Sys.time(),   polygon_output = TRUE,   time_window = 10L,   max_walk_time = Inf,   max_bike_time = Inf,   max_car_time = Inf,   max_trip_duration = 120L,   walk_speed = 3.6,   bike_speed = 12,   max_rides = 3,   max_lts = 2,   draws_per_minute = 5L,   n_threads = Inf,   verbose = FALSE,   progress = TRUE )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/isochrone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate isochrones from a given location — isochrone","text":"r5r_core object connect R5 routing engine, created setup_r5(). origins Either POINT sf object WGS84 CRS, data.frame containing columns id, lon lat. mode character vector. transport modes allowed access, transfer vehicle legs trips. Defaults WALK. Please see details options. mode_egress character vector. transport mode used egress last public transport. can either WALK, BICYCLE CAR. Defaults WALK. Ignored public transport used. cutoffs numeric vector. Number minutes define time span Isochrone. Defaults c(0, 15, 30). sample_size numeric. Sample size nodes transport network used estimate isochrones. Defaults 0.8 (80% nodes transport network). Value can range 0.2 1. Smaller values increase computation speed return results lower precision. parameter effect polygon_output = FALSE. departure_datetime POSIXct object. Please note departure time influences public transport legs. working public transport networks, please check calendar.txt within GTFS feeds valid dates. Please see details information datetimes parsed. polygon_output Logical. TRUE, function outputs polygon-based isochrones (default) based travel times origin sample random  sample nodes transport network (see parameter sample_size). FALSE, function outputs line-based isochrones based travel times origin centroids segments transport network. time_window integer. time window minutes r5r calculate multiple travel time matrices departing minute. Defaults 10 minutes. function returns result based median travel times. Please read time window vignette details usage vignette(\"time_window\", package = \"r5r\") max_walk_time integer. maximum walking time (minutes) access egress transit network, make transfers within network. Defaults restrictions, long max_trip_duration respected. max time considered separately leg (e.g. set max_walk_time 15, potentially walk 15 minutes reach transit, another 15 minutes reach destination leaving transit). Defaults Inf, limit. max_bike_time integer. maximum cycling time (minutes) access egress transit network. Defaults restrictions, long max_trip_duration respected. max time considered separately leg (e.g. set max_bike_time 15 minutes, potentially cycle 15 minutes reach transit, another 15 minutes reach destination leaving transit). Defaults Inf, limit. max_car_time integer. maximum driving time (minutes) access egress transit network. Defaults restrictions, long max_trip_duration respected. max time considered separately leg (e.g. set max_car_time 15 minutes, potentially drive 15 minutes reach transit, another 15 minutes reach destination leaving transit). Defaults Inf, limit. max_trip_duration integer. maximum trip duration minutes. Defaults 120 minutes (2 hours). walk_speed numeric. Average walk speed km/h. Defaults 3.6 km/h. bike_speed numeric. Average cycling speed km/h. Defaults 12 km/h. max_rides integer. maximum number public transport rides allowed trip. Defaults 3. max_lts integer 1 4. maximum level traffic stress cyclists tolerate. value 1 means cyclists travel quietest streets, value 4 indicates cyclists can travel road. Defaults 2. Please see details information. draws_per_minute integer. number Monte Carlo draws perform per time window minute calculating travel time matrices estimating accessibility. Defaults 5. mean 300 draws 60-minute time window, example. parameter affects results GTFS feeds contain frequencies.txt table. GTFS feed frequency table, r5r still allows multiple runs set time_window deterministic way. n_threads integer. number threads use running router parallel. Defaults use available threads (Inf). verbose logical. Whether show R5 informative messages running function. Defaults FALSE (please note case R5 error messages still shown). Setting verbose TRUE shows detailed output, can useful debugging issues caught r5r. progress logical. Whether show progress counter running router. Defaults FALSE. works verbose set FALSE, progress counter interfere R5's output messages. Setting progress TRUE may impose small penalty computation efficiency, progress counter must synchronized among active threads.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/isochrone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate isochrones from a given location — isochrone","text":"\"sf\" \"data.frame\" isochrone origin.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/isochrone.html","id":"transport-modes","dir":"Reference","previous_headings":"","what":"Transport modes","title":"Estimate isochrones from a given location — isochrone","text":"R5 allows multiple combinations transport modes. options include: Transit modes: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR. option TRANSIT automatically considers public transport modes available. Non transit modes: WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/isochrone.html","id":"level-of-traffic-stress-lts-","dir":"Reference","previous_headings":"","what":"Level of Traffic Stress (LTS)","title":"Estimate isochrones from a given location — isochrone","text":"cycling enabled R5 (passing value BIKE either mode mode_egress), setting max_lts allow cycling streets given level danger/stress. Setting max_lts 1, example, allow cycling separated bicycle infrastructure low-traffic streets routing revert walking traversing links LTS exceeding 1. Setting max_lts 3 allow cycling links LTS 1, 2 3. Routing also reverts walking street segment tagged non-bikable OSM (e.g. staircase), independently specified max LTS. default methodology assigning LTS values network edges based commonly tagged attributes OSM ways. See info LTS original documentation R5 Conveyal https://docs.conveyal.com/learn-/traffic-stress. summary: LTS 1: Tolerable children. includes low-speed, low-volume streets, well separated bicycle facilities (parking-protected lanes cycle tracks). LTS 2: Tolerable mainstream adult population. includes streets cyclists dedicated lanes interact traffic formal crossing. LTS 3: Tolerable \"enthused confident\" cyclists. includes streets may involve close proximity moderate- high-speed vehicular traffic. LTS 4: Tolerable \"strong fearless\" cyclists. includes streets cyclists required mix moderate- high-speed vehicular traffic. advanced users, can provide custom LTS values adding tag <key = \"lts\"> osm.pbf file.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/isochrone.html","id":"datetime-parsing","dir":"Reference","previous_headings":"","what":"Datetime parsing","title":"Estimate isochrones from a given location — isochrone","text":"r5r ignores timezone attribute datetime objects parsing dates times, using study area's timezone instead. example, say running calculations using Rio de Janeiro, Brazil, study area. datetime .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\") parsed May 13th, 2019, 14:00h Rio's local time, expected. .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\", tz = \"Europe/Paris\") also parsed exact date time Rio's local time, perhaps surprisingly, ignoring timezone attribute.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/isochrone.html","id":"routing-algorithm","dir":"Reference","previous_headings":"","what":"Routing algorithm","title":"Estimate isochrones from a given location — isochrone","text":"travel_time_matrix(), expanded_travel_time_matrix(), arrival_travel_time_matrix()  accessibility() functions use R5-specific extension RAPTOR routing algorithm (see Conway et al., 2017). RAPTOR extension uses systematic sample one departure per minute time window set user 'time_window' parameter. detailed description base RAPTOR can found Delling et al (2015). However, whenever user includes transit fares inputs functions, automatically switch use R5-specific extension McRAPTOR routing algorithm. Conway, M. W., Byrd, ., & van der Linden, M. (2017). Evidence-based transit land use sketch planning using interactive accessibility methods combined schedule headway-based networks. Transportation Research Record, 2653(1), 45-53. doi:10.3141/2653-06 Delling, D., Pajor, T., & Werneck, R. F. (2015). Round-based public transit routing. Transportation Science, 49(3), 591-604. doi:10.1287/trsc.2014.0534","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/isochrone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate isochrones from a given location — isochrone","text":"","code":"options(java.parameters = \"-Xmx2G\") library(r5r) library(ggplot2)  # build transport network data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path = data_path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  # load origin/point of interest points <- read.csv(file.path(data_path, \"poa_points_of_interest.csv\")) origin <- points[2,]  departure_datetime <- as.POSIXct(  \"13-05-2019 14:00:00\",  format = \"%d-%m-%Y %H:%M:%S\" )  # estimate polygon-based isochrone from origin iso_poly <- isochrone(   r5r_core,   origins = origin,   mode = \"walk\",   polygon_output = TRUE,   departure_datetime = departure_datetime,   cutoffs = seq(0, 120, 30)   )  head(iso_poly) #> Simple feature collection with 4 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -51.2422 ymin: -30.0778 xmax: -51.1602 ymax: -29.9966 #> Geodetic CRS:  WGS 84 #>                    id isochrone                       polygons #> 1 bus_central_station       120 POLYGON ((-51.2412 -30.0724... #> 2 bus_central_station        90 POLYGON ((-51.2421 -30.0365... #> 3 bus_central_station        60 POLYGON ((-51.2421 -30.0365... #> 4 bus_central_station        30 POLYGON ((-51.2314 -30.0287...   # estimate line-based isochrone from origin iso_lines <- isochrone(   r5r_core,   origins = origin,   mode = \"walk\",   polygon_output = FALSE,   departure_datetime = departure_datetime,   cutoffs = seq(0, 100, 25)   ) #> Warning: st_centroid assumes attributes are constant over geometries  head(iso_lines) #> Simple feature collection with 6 features and 13 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -51.18467 ymin: -30.05426 xmax: -51.17266 ymax: -30.02355 #> Geodetic CRS:  WGS 84 #>   edge_index   osm_id isochrone travel_time_p50 from_vertex to_vertex #> 1        644 27238056       100             100         443       444 #> 2        645 27238056       100             100         444       443 #> 3       1048 27370379       100             100         717       718 #> 4       1049 27370379       100             100         718       717 #> 5       1058 27370382       100             100         722       723 #> 6       1059 27370382       100             100         723       722 #>   street_class  length walk   car car_speed bicycle bicycle_lts #> 1     TERTIARY  78.580 TRUE  TRUE    39.996    TRUE           2 #> 2     TERTIARY  78.580 TRUE FALSE    39.996   FALSE           2 #> 3        OTHER 242.560 TRUE  TRUE    40.248    TRUE           4 #> 4        OTHER 242.560 TRUE  TRUE    40.248    TRUE           4 #> 5        OTHER  85.916 TRUE  TRUE    40.248    TRUE           2 #> 6        OTHER  85.916 TRUE  TRUE    40.248    TRUE           2 #>                         geometry #> 1 LINESTRING (-51.17282 -30.0... #> 2 LINESTRING (-51.17266 -30.0... #> 3 LINESTRING (-51.18231 -30.0... #> 4 LINESTRING (-51.18467 -30.0... #> 5 LINESTRING (-51.18424 -30.0... #> 6 LINESTRING (-51.1839 -30.05...   # plot colors colors <- c('#ffe0a5','#ffcb69','#ffa600','#ff7c43','#f95d6a',             '#d45087','#a05195','#665191','#2f4b7c','#003f5c')  # polygons ggplot() +   geom_sf(data=iso_poly, aes(fill=factor(isochrone))) +   scale_fill_manual(values = colors) +   theme_minimal()   # lines ggplot() +   geom_sf(data=iso_lines, aes(color=factor(isochrone))) +   scale_color_manual(values = colors) +   theme_minimal()   stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/java_to_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Java object to data.table — java_to_dt","title":"Java object to data.table — java_to_dt","text":"Converts Java object returned r5r_core R data.table","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/java_to_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Java object to data.table — java_to_dt","text":"","code":"java_to_dt(obj)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/java_to_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Java object to data.table — java_to_dt","text":"obj Java Object reference","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/java_to_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Java object to data.table — java_to_dt","text":"R data.table","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/modify_osm_carspeeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a transport network used for routing in R5 with modified OSM car speeds — modify_osm_carspeeds","title":"Create a transport network used for routing in R5 with modified OSM car speeds — modify_osm_carspeeds","text":"function builds transport network modified OSM car speeds. new speed factors must passed .csv file indication new max speed OSM edge id.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/modify_osm_carspeeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a transport network used for routing in R5 with modified OSM car speeds — modify_osm_carspeeds","text":"","code":"modify_osm_carspeeds(   pbf_path,   csv_path,   output_dir = tempdir_unique(),   default_speed = NULL,   percentage_mode = TRUE,   verbose = FALSE )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/modify_osm_carspeeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a transport network used for routing in R5 with modified OSM car speeds — modify_osm_carspeeds","text":"pbf_path Character. Path .pbf file OSM network. csv_path Character. Path CSV file witha table specifying speed modifications. table must contain columns osm_id max_speed. output_dir Character. Directory modified network written. Defaults temporary directory. default_speed Numeric. Default speed use segments specified CSV. Must >= 0. Defaults NULL roads listed . CSV speeds unchanged. percentage_mode Logical. TRUE, values max_speed interpreted percentages original speeds; FALSE, absolute speeds (km/h). Defaults TRUE - percentages. verbose Logical. TRUE, function modifies network verbosely creates verbose R5RCore. Defaults FALSE.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/modify_osm_carspeeds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a transport network used for routing in R5 with modified OSM car speeds — modify_osm_carspeeds","text":"R5 core object representing rebuilt network modified car speeds.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/modify_osm_carspeeds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a transport network used for routing in R5 with modified OSM car speeds — modify_osm_carspeeds","text":"CSV must columns named osm_id max_speed. max_speed can specified percentage original road speed absolute speed km/h. function rebuilds network output_dir returns new r5r_core object.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/modify_osm_carspeeds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a transport network used for routing in R5 with modified OSM car speeds — modify_osm_carspeeds","text":"","code":"library(r5r)  # path to OSM .pbf file pbf_path <- system.file(\"extdata/poa/poa_osm.pbf\", package = \"r5r\")  # path to CSV with a table pointing to the new speed info speeds_csv_path <- system.file(\"extdata/poa/poa_osm_congestion.csv\", package = \"r5r\")  r5r_core_new_speed <- r5r::modify_osm_carspeeds(   pbf_path = pbf_path,   csv_path = speeds_csv_path,   output_dir = tempdir(),   percentage_mode = TRUE ) #> No raster .tif files found. Using elevation = 'NONE'. #>  #> No public transport data (gtfs) provided. Graph will be built with the street network only. #>  #> Finished building network.dat at /tmp/RtmpDjJ1o2/network.dat #> New car network with modified speeds built at /tmp/RtmpDjJ1o2"},{"path":"https://ipeagit.github.io/r5r/dev/reference/pareto_frontier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate travel time and monetary cost Pareto frontier — pareto_frontier","title":"Calculate travel time and monetary cost Pareto frontier — pareto_frontier","text":"Fast computation travel time monetary cost Pareto frontier origin destination pairs.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/pareto_frontier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate travel time and monetary cost Pareto frontier — pareto_frontier","text":"","code":"pareto_frontier(   r5r_core,   origins,   destinations,   mode = c(\"WALK\", \"TRANSIT\"),   mode_egress = \"WALK\",   departure_datetime = Sys.time(),   time_window = 10L,   percentiles = 50L,   max_walk_time = Inf,   max_bike_time = Inf,   max_car_time = Inf,   max_trip_duration = 120L,   fare_structure = NULL,   fare_cutoffs = -1L,   walk_speed = 3.6,   bike_speed = 12,   max_rides = 3,   max_lts = 2,   n_threads = Inf,   verbose = FALSE,   progress = FALSE,   output_dir = NULL )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/pareto_frontier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate travel time and monetary cost Pareto frontier — pareto_frontier","text":"r5r_core object connect R5 routing engine, created setup_r5(). origins, destinations Either POINT sf object WGS84 CRS, data.frame containing columns id, lon lat. mode character vector. transport modes allowed access, transfer vehicle legs trips. Defaults WALK. Please see details options. mode_egress character vector. transport mode used egress last public transport. can either WALK, BICYCLE CAR. Defaults WALK. Ignored public transport used. departure_datetime POSIXct object. Please note departure time influences public transport legs. working public transport networks, please check calendar.txt within GTFS feeds valid dates. Please see details information datetimes parsed. time_window integer. time window minutes r5r calculate multiple travel time matrices departing minute. Defaults 10 minutes. default, function returns result based median travel times, user can set percentiles parameter extract results. Please read time window vignette details usage vignette(\"time_window\", package = \"r5r\") percentiles integer vector (max length 5). Specifies percentile use returning travel time estimates within given time window. Please note parameter applied travel time estimates (e.g. 25th percentile specified, output B 15 minutes 10 dollars, 25% trips cheaper 10 dollars taken points shorter 15 minutes). Defaults 50, returning median travel time. vector length bigger 1 passed, output contains additional column specifies percentile travel time monetary cost combination. Due upstream restrictions, 5 percentiles can specified time. details, please see R5 documentation https://docs.conveyal.com/analysis/methodology#accounting--variability. max_walk_time integer. maximum walking time (minutes) access egress transit network, make transfers within network complete walk-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_walk_time 15, get trips 15 minutes walk leg reach transit another 15 minutes walk leg reach destination leaving transit. walk-trips, whenever max_walk_time differs max_trip_duration, lowest value considered. max_bike_time integer. maximum cycling time (minutes) access egress transit network, make transfers within network complete bicycle-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_bike_time 15, get trips 15 minutes cycle leg reach transit another 15 minutes cycle leg reach destination leaving transit. bicycle-trips, whenever max_bike_time differs max_trip_duration, lowest value considered. max_car_time integer. maximum driving time (minutes) access egress transit network. Defaults restrictions, long max_trip_duration respected. max time considered separately leg (e.g. set max_car_time 15 minutes, potentially drive 15 minutes reach transit, another 15 minutes reach destination leaving transit). Defaults Inf, limit. max_trip_duration integer. maximum trip duration minutes. Defaults 120 minutes (2 hours). fare_structure fare structure object, following convention set setup_fare_structure(). object describes transit fares calculated. Please see fare structure vignette understand object structured: vignette(\"fare_structure\", package = \"r5r\"). fare_cutoffs numeric vector. monetary cutoffs considered calculating Pareto frontier. time want parameter combination possible fares listed fare_structure. Choosing coarse distribution cutoffs may result many different trips falling within cutoff. example, two different routes GTFS, one costing $3 costing $4, set parameter 5, output tell fastest trips costed $5, able identify route used complete trips. case, beneficial set parameter c(3, 4) (also specify combinations values, 6, 7, 8 , transit user hypothetically benefit making transfers available routes). walk_speed numeric. Average walk speed km/h. Defaults 3.6 km/h. bike_speed numeric. Average cycling speed km/h. Defaults 12 km/h. max_rides integer. maximum number public transport rides allowed trip. Defaults 3. max_lts integer 1 4. maximum level traffic stress cyclists tolerate. value 1 means cyclists travel quietest streets, value 4 indicates cyclists can travel road. Defaults 2. Please see details information. n_threads integer. number threads use running router parallel. Defaults use available threads (Inf). verbose logical. Whether show R5 informative messages running function. Defaults FALSE (please note case R5 error messages still shown). Setting verbose TRUE shows detailed output, can useful debugging issues caught r5r. progress logical. Whether show progress counter running router. Defaults FALSE. works verbose set FALSE, progress counter interfere R5's output messages. Setting progress TRUE may impose small penalty computation efficiency, progress counter must synchronized among active threads. output_dir Either NULL path existing directory. NULL (default), function write one .csv file results origin specified directory. case, function returns path specified parameter. parameter particularly useful running memory-constrained settings writing results directly disk prevents r5r loading RAM memory.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/pareto_frontier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate travel time and monetary cost Pareto frontier — pareto_frontier","text":"data.table travel time monetary cost Pareto frontier specified origins destinations. additional column identifying travel time percentile present one value passed percentiles. Origin destination pairs whose trips completed within maximum travel time using less money specified monetary cutoffs returned data.table. output_dir NULL, function returns path specified parameter, .csv files containing results saved.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/pareto_frontier.html","id":"transport-modes","dir":"Reference","previous_headings":"","what":"Transport modes","title":"Calculate travel time and monetary cost Pareto frontier — pareto_frontier","text":"R5 allows multiple combinations transport modes. options include: Transit modes: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR. option TRANSIT automatically considers public transport modes available. Non transit modes: WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/pareto_frontier.html","id":"level-of-traffic-stress-lts-","dir":"Reference","previous_headings":"","what":"Level of Traffic Stress (LTS)","title":"Calculate travel time and monetary cost Pareto frontier — pareto_frontier","text":"cycling enabled R5 (passing value BIKE either mode mode_egress), setting max_lts allow cycling streets given level danger/stress. Setting max_lts 1, example, allow cycling separated bicycle infrastructure low-traffic streets routing revert walking traversing links LTS exceeding 1. Setting max_lts 3 allow cycling links LTS 1, 2 3. Routing also reverts walking street segment tagged non-bikable OSM (e.g. staircase), independently specified max LTS. default methodology assigning LTS values network edges based commonly tagged attributes OSM ways. See info LTS original documentation R5 Conveyal https://docs.conveyal.com/learn-/traffic-stress. summary: LTS 1: Tolerable children. includes low-speed, low-volume streets, well separated bicycle facilities (parking-protected lanes cycle tracks). LTS 2: Tolerable mainstream adult population. includes streets cyclists dedicated lanes interact traffic formal crossing. LTS 3: Tolerable \"enthused confident\" cyclists. includes streets may involve close proximity moderate- high-speed vehicular traffic. LTS 4: Tolerable \"strong fearless\" cyclists. includes streets cyclists required mix moderate- high-speed vehicular traffic. advanced users, can provide custom LTS values adding tag <key = \"lts\"> osm.pbf file.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/pareto_frontier.html","id":"datetime-parsing","dir":"Reference","previous_headings":"","what":"Datetime parsing","title":"Calculate travel time and monetary cost Pareto frontier — pareto_frontier","text":"r5r ignores timezone attribute datetime objects parsing dates times, using study area's timezone instead. example, say running calculations using Rio de Janeiro, Brazil, study area. datetime .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\") parsed May 13th, 2019, 14:00h Rio's local time, expected. .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\", tz = \"Europe/Paris\") also parsed exact date time Rio's local time, perhaps surprisingly, ignoring timezone attribute.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/pareto_frontier.html","id":"routing-algorithm","dir":"Reference","previous_headings":"","what":"Routing algorithm","title":"Calculate travel time and monetary cost Pareto frontier — pareto_frontier","text":"detailed_itineraries() pareto_frontier() functions use R5-specific extension McRAPTOR routing algorithm. implementation used detailed_itineraries() allows router find paths optimal less optimal terms travel time, heuristics around multiple access modes, riding patterns, etc. specific extension McRAPTOR suboptimal path routing documented yet, detailed description base McRAPTOR can found Delling et al (2015). implementation used pareto_frontier(), hand, returns fastest trip within given monetary cutoff, ignoring slower trips cost . detailed discussion algorithm can found Conway Stewart (2019). Delling, D., Pajor, T., & Werneck, R. F. (2015). Round-based public transit routing. Transportation Science, 49(3), 591-604. doi:10.1287/trsc.2014.0534 Conway, M. W., & Stewart, . F. (2019). Getting Charlie MTA: multiobjective optimization method account cost constraints public transit accessibility metrics. International Journal Geographical Information Science, 33(9), 1759-1787. doi:10.1080/13658816.2019.1605075","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/pareto_frontier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate travel time and monetary cost Pareto frontier — pareto_frontier","text":"","code":"library(r5r)  # build transport network data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path = data_path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  # load origin/destination points points <- read.csv(file.path(data_path, \"poa_hexgrid.csv\"))[1:5,]  # load fare structure object fare_structure_path <- system.file(   \"extdata/poa/fares/fares_poa.zip\",   package = \"r5r\" ) fare_structure <- read_fare_structure(fare_structure_path)  departure_datetime <- as.POSIXct(   \"13-05-2019 14:00:00\",   format = \"%d-%m-%Y %H:%M:%S\" )  pf <- pareto_frontier(   r5r_core,   origins = points,   destinations = points,   mode = c(\"WALK\", \"TRANSIT\"),   departure_datetime = departure_datetime,   fare_structure = fare_structure,   fare_cutoffs = c(4.5, 4.8, 9, 9.3, 9.6) ) #> Loading required namespace: testthat head(pf) #>            from_id           to_id percentile travel_time monetary_cost #>             <char>          <char>      <int>       <int>         <num> #> 1: 89a901291abffff 89a901291abffff         50           1           4.5 #> 2: 89a901291abffff 89a9012a3cfffff         50          72           9.0 #> 3: 89a901291abffff 89a901295b7ffff         50          61           4.5 #> 4: 89a901291abffff 89a901295b7ffff         50          55           4.8 #> 5: 89a901291abffff 89a901295b7ffff         50          45           9.0 #> 6: 89a901291abffff 89a901284a3ffff         50          59           4.8  stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r.html","id":null,"dir":"Reference","previous_headings":"","what":"r5r: Rapid Realistic Routing with 'R5' — r5r","title":"r5r: Rapid Realistic Routing with 'R5' — r5r","text":"Rapid realistic routing multimodal transport networks (walk, bike, public transport car) using R5, Rapid Realistic Routing Real-world Reimagined networks engine https://github.com/conveyal/r5. package allows users generate detailed routing analysis calculate travel time matrices using seamless parallel computing top R5 Java machine. R5 developed Conveyal, package r5r independently developed team Institute Applied Economic Research (Ipea) contributions collaborators. Apart documentation package, users find additional information R5 documentation https://docs.conveyal.com/. Although try keep new releases r5r synchrony R5, development R5 follows Conveyal's independent update process. Hence, users confirm R5 version implied Conveyal user manual (see https://docs.conveyal.com/changelog) corresponds R5 version r5r depends .","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"r5r: Rapid Realistic Routing with 'R5' — r5r","text":"Please check vignettes website.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"r5r: Rapid Realistic Routing with 'R5' — r5r","text":"Maintainer: Rafael H. M. Pereira rafa.pereira.br@gmail.com (ORCID) Authors: Marcus Saraiva marcus.saraiva@gmail.com (ORCID) Daniel Herszenhut dhersz@gmail.com (ORCID) Carlos Kaue Vieira Braga kaue@kauebraga.dev (ORCID) Matthew Wigginton Bhagat-Conway mwbc@unc.edu (ORCID) contributors: Luyu Liu luyuliu@ufl.edu (ORCID) [contributor] Alex Magnus alex.magnus@mail.utoronto.ca [contributor] Daniel Snow dan@sno.ws [contributor] Ipea - Institute Applied Economic Research [copyright holder, funder] Department Geography & Planning, University Toronto [funder]","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage cached files from the r5r package — r5r_cache","title":"Manage cached files from the r5r package — r5r_cache","text":"Manage cached files r5r package","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage cached files from the r5r package — r5r_cache","text":"","code":"r5r_cache(list_files = TRUE, delete_file = NULL)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage cached files from the r5r package — r5r_cache","text":"list_files Logical. Whether print message address r5r JAR files cached locally. Defaults TRUE. delete_file String. file name (basename) JAR file cached locally deleted. Defaults NULL, file deleted. delete_file = \"\", cached files deleted.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage cached files from the r5r package — r5r_cache","text":"message indicating file exist /ones deleted local cache directory.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage cached files from the r5r package — r5r_cache","text":"","code":"# download r5 JAR r5r::download_r5() #> Using cached R5 version from /home/runner/.cache/R/r5r/r5_jar_v7.4.0/r5-v7.4-all.jar #> [1] \"/home/runner/.cache/R/r5r/r5_jar_v7.4.0/r5-v7.4-all.jar\"  # list all files cached r5r_cache(list_files = TRUE) #> Files currently cached: #> /home/runner/.cache/R/r5r/r5_jar_v7.4.0/r5-v7.4-all.jar  # delete r5 JAR r5r_cache(delete_file = 'r5-v7.0') #> The file 'r5-v7.0' is not cached. #> Files currently cached: #> /home/runner/.cache/R/r5r/r5_jar_v7.4.0/r5-v7.4-all.jar"},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r_sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an r5r situation report to help debug errors — r5r_sitrep","title":"Generate an r5r situation report to help debug errors — r5r_sitrep","text":"function reports list following information: package version {r5r} use. installed version R5.jar. Java version use. amount memory set Java java.parameters option. user's Session Info.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r_sitrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an r5r situation report to help debug errors — r5r_sitrep","text":"","code":"r5r_sitrep()"},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r_sitrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an r5r situation report to help debug errors — r5r_sitrep","text":"list information versions r5r package, Java R5 Jar use, memory set Java user's Session Info.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/r5r_sitrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an r5r situation report to help debug errors — r5r_sitrep","text":"","code":"r5r_sitrep() #> $r5r_package_version #> [1] ‘2.2.999999’ #>  #> $r5_jar_version #> [1] \"7.4\" #>  #> $java_version #> [1] \"21.0.7\" #>  #> $set_memory #> [1] \"-Xmx2G\" #>  #> $session_info #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8          LC_NUMERIC=C              #>  [3] LC_TIME=C.UTF-8           LC_COLLATE=C              #>  [5] LC_MONETARY=C.UTF-8       LC_MESSAGES=C.UTF-8       #>  [7] LC_PAPER=C.UTF-8          LC_NAME=C.UTF-8           #>  [9] LC_ADDRESS=C.UTF-8        LC_TELEPHONE=C.UTF-8      #> [11] LC_MEASUREMENT=C.UTF-8    LC_IDENTIFICATION=C.UTF-8 #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.2   r5r_2.2.0999999 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6       xfun_0.52          bslib_0.9.0        httr2_1.1.2        #>  [5] htmlwidgets_1.6.4  processx_3.8.6     rJava_1.0-11       callr_3.7.6        #>  [9] generics_0.1.4     vctrs_0.6.5        tools_4.5.1        ps_1.9.1           #> [13] curl_6.4.0         tibble_3.3.0       proxy_0.4-27       fansi_1.0.6        #> [17] sfheaders_0.4.4    pkgconfig_2.0.3    KernSmooth_2.23-26 data.table_1.17.6  #> [21] checkmate_2.3.2    RColorBrewer_1.1-3 desc_1.4.3         lifecycle_1.0.4    #> [25] compiler_4.5.1     farver_2.1.2       brio_1.1.5         textshaping_1.0.1  #> [29] fontawesome_0.5.3  htmltools_0.5.8.1  class_7.3-23       sass_0.4.10        #> [33] yaml_2.3.10        pillar_1.10.2      pkgdown_2.1.3      jquerylib_0.1.4    #> [37] whisker_0.4.1      openssl_2.3.3      classInt_0.4-11    cachem_1.1.0       #> [41] wk_0.9.4           zip_2.3.3          tidyselect_1.2.1   digest_0.6.37      #> [45] dplyr_1.1.4        sf_1.0-21          purrr_1.0.4        fastmap_1.2.0      #> [49] grid_4.5.1         cli_3.6.5          concaveman_1.1.0   magrittr_2.0.3     #> [53] e1071_1.7-16       withr_3.0.2        scales_1.4.0       backports_1.5.0    #> [57] rappdirs_0.3.3     rmarkdown_2.29     askpass_1.2.1      ragg_1.4.0         #> [61] memoise_2.0.1      evaluate_1.0.4     knitr_1.50         testthat_3.2.3     #> [65] V8_6.0.4           s2_1.1.9           rlang_1.1.6        downlit_0.4.4      #> [69] Rcpp_1.0.14        glue_1.8.0         DBI_1.2.3          xml2_1.3.8         #> [73] rstudioapi_0.17.1  jsonlite_2.0.0     R6_2.6.1           rJavaEnv_0.3.0     #> [77] systemfonts_1.2.3  fs_1.6.6           units_0.8-7        #>"},{"path":"https://ipeagit.github.io/r5r/dev/reference/read_fare_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a fare structure object from a file — read_fare_structure","title":"Read a fare structure object from a file — read_fare_structure","text":"Read fare structure object file","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/read_fare_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a fare structure object from a file — read_fare_structure","text":"","code":"read_fare_structure(file_path, encoding = \"UTF-8\")"},{"path":"https://ipeagit.github.io/r5r/dev/reference/read_fare_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a fare structure object from a file — read_fare_structure","text":"file_path path pointing fare structure .zip extension. encoding string. Passed data.table::fread(), defaults \"UTF-8\". possible options \"unknown\" \"Latin-1\". Please note used re-encode input, enable handling encoded strings native encoding.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/read_fare_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a fare structure object from a file — read_fare_structure","text":"fare structure object.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/read_fare_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a fare structure object from a file — read_fare_structure","text":"","code":"path <- system.file(\"extdata/poa/fares/fares_poa.zip\", package = \"r5r\") fare_structure <- read_fare_structure(path)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/reverse_if_direct_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Origins and Destinations for Direct Modes — reverse_if_direct_mode","title":"Reverse Origins and Destinations for Direct Modes — reverse_if_direct_mode","text":"Swaps origins destinations data frames certain conditions met, specifically optimize routing performance R5's one--many algorithm. function reverses direction analysis transit mode empty direct modes WALK BICYCLE number origin points greater number destination points.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/reverse_if_direct_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Origins and Destinations for Direct Modes — reverse_if_direct_mode","text":"","code":"reverse_if_direct_mode(origins, destinations, mode_list)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/reverse_if_direct_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Origins and Destinations for Direct Modes — reverse_if_direct_mode","text":"origins data frame representing origin locations. destinations data frame representing destination locations. mode_list named list containing routing modes:","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/reverse_if_direct_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Origins and Destinations for Direct Modes — reverse_if_direct_mode","text":"List origins destinations unchanges swapper order","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_breakdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Set breakdown — set_breakdown","title":"Set breakdown — set_breakdown","text":"Sets whether travel time matrices include detailed trip information .","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_breakdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set breakdown — set_breakdown","text":"","code":"set_breakdown(r5r_core, breakdown)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_breakdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set breakdown — set_breakdown","text":"r5r_core object connect R5 routing engine, created setup_r5(). breakdown logical.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_breakdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set breakdown — set_breakdown","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_cutoffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Set cutoffs — set_cutoffs","title":"Set cutoffs — set_cutoffs","text":"Sets cutoffs used calculating accessibility.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_cutoffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set cutoffs — set_cutoffs","text":"","code":"set_cutoffs(r5r_core, cutoffs, decay_function)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_cutoffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set cutoffs — set_cutoffs","text":"r5r_core object connect R5 routing engine, created setup_r5(). cutoffs numeric vector. decay_function string, name decay function.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_cutoffs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set cutoffs — set_cutoffs","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_expanded_travel_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Set expanded travel times — set_expanded_travel_times","title":"Set expanded travel times — set_expanded_travel_times","text":"Sets whether travel time matrices return results minute specified time window.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_expanded_travel_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set expanded travel times — set_expanded_travel_times","text":"","code":"set_expanded_travel_times(r5r_core, expanded)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_expanded_travel_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set expanded travel times — set_expanded_travel_times","text":"r5r_core object connect R5 routing engine, created setup_r5(). expanded logical.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_expanded_travel_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set expanded travel times — set_expanded_travel_times","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_fare_cutoffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Set monetary cutoffs — set_fare_cutoffs","title":"Set monetary cutoffs — set_fare_cutoffs","text":"Sets monetary cutoffs considered calculating Pareto frontier.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_fare_cutoffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set monetary cutoffs — set_fare_cutoffs","text":"","code":"set_fare_cutoffs(r5r_core, fare_cutoffs)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_fare_cutoffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set monetary cutoffs — set_fare_cutoffs","text":"r5r_core object connect R5 routing engine, created setup_r5(). fare_cutoffs path.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_fare_cutoffs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set monetary cutoffs — set_fare_cutoffs","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_fare_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the fare structure used when calculating transit fares — set_fare_structure","title":"Set the fare structure used when calculating transit fares — set_fare_structure","text":"Sets fare structure used \"generic\" fare calculator. value NULL passed fare_structure upstream routing accessibility functions fares calculated.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_fare_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the fare structure used when calculating transit fares — set_fare_structure","text":"","code":"set_fare_structure(r5r_core, fare_structure)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_fare_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the fare structure used when calculating transit fares — set_fare_structure","text":"r5r_core object connect R5 routing engine, created setup_r5(). fare_structure fare structure object, following convention set setup_fare_structure(). object describes transit fares calculated. Please see fare structure vignette understand object structured: vignette(\"fare_structure\", package = \"r5r\").","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_fare_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the fare structure used when calculating transit fares — set_fare_structure","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_fare.html","id":null,"dir":"Reference","previous_headings":"","what":"Set max fare — set_max_fare","title":"Set max fare — set_max_fare","text":"Sets max fare allowed calculating transit fares.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_fare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set max fare — set_max_fare","text":"","code":"set_max_fare(r5r_core, max_fare)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_fare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set max fare — set_max_fare","text":"r5r_core object connect R5 routing engine, created setup_r5(). max_fare number.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_fare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set max fare — set_max_fare","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_lts.html","id":null,"dir":"Reference","previous_headings":"","what":"Set max Level of Transit Stress (LTS) — set_max_lts","title":"Set max Level of Transit Stress (LTS) — set_max_lts","text":"Set max Level Transit Stress (LTS)","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_lts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set max Level of Transit Stress (LTS) — set_max_lts","text":"","code":"set_max_lts(r5r_core, max_lts)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_lts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set max Level of Transit Stress (LTS) — set_max_lts","text":"r5r_core object connect R5 routing engine, created setup_r5(). max_lts number (1 4). maximum level traffic stress cyclists tolerate. value 1 means cyclists travel quietest streets, value 4 indicates cyclists can travel road.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_lts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set max Level of Transit Stress (LTS) — set_max_lts","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_rides.html","id":null,"dir":"Reference","previous_headings":"","what":"Set max number of rides — set_max_rides","title":"Set max number of rides — set_max_rides","text":"Sets maximum number rides trip can use R5.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_rides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set max number of rides — set_max_rides","text":"","code":"set_max_rides(r5r_core, max_rides)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_rides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set max number of rides — set_max_rides","text":"r5r_core object connect R5 routing engine, created setup_r5(). max_rides number. max number public transport rides allowed trip. Passed routing function.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_max_rides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set max number of rides — set_max_rides","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_monte_carlo_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Set number of Monte Carlo draws — set_monte_carlo_draws","title":"Set number of Monte Carlo draws — set_monte_carlo_draws","text":"Sets number Monte Carlo draws used R5.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_monte_carlo_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set number of Monte Carlo draws — set_monte_carlo_draws","text":"","code":"set_monte_carlo_draws(r5r_core, draws_per_minute, time_window)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_monte_carlo_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set number of Monte Carlo draws — set_monte_carlo_draws","text":"r5r_core object connect R5 routing engine, created setup_r5(). draws_per_minute number. time_window number.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_monte_carlo_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set number of Monte Carlo draws — set_monte_carlo_draws","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_n_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Set number of threads — set_n_threads","title":"Set number of threads — set_n_threads","text":"Sets number threads used r5r .jar.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_n_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set number of threads — set_n_threads","text":"","code":"set_n_threads(r5r_core, n_threads)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_n_threads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set number of threads — set_n_threads","text":"r5r_core object connect R5 routing engine, created setup_r5(). n_threads number, passed function .","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_n_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set number of threads — set_n_threads","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_output_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Set output directory — set_output_dir","title":"Set output directory — set_output_dir","text":"Sets whether r5r save output specified directory.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_output_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set output directory — set_output_dir","text":"","code":"set_output_dir(r5r_core, output_dir)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_output_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set output directory — set_output_dir","text":"r5r_core object connect R5 routing engine, created setup_r5(). output_dir path.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_output_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set output directory — set_output_dir","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_percentiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Set percentiles — set_percentiles","title":"Set percentiles — set_percentiles","text":"Sets percentiles used R5.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_percentiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set percentiles — set_percentiles","text":"","code":"set_percentiles(r5r_core, percentiles)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_percentiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set percentiles — set_percentiles","text":"r5r_core object connect R5 routing engine, created setup_r5(). percentiles integer vector maximum length 5.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_percentiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set percentiles — set_percentiles","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Set progress argument — set_progress","title":"Set progress argument — set_progress","text":"Indicates whether progress counter must printed computations. Applies routing functions.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set progress argument — set_progress","text":"","code":"set_progress(r5r_core, progress)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set progress argument — set_progress","text":"r5r_core object connect R5 routing engine, created setup_r5(). progress logical, passed function .","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set progress argument — set_progress","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set walk and bike speed — set_speed","title":"Set walk and bike speed — set_speed","text":"function receives walk bike 'speed' inputs Km/h routing functions converts meters per second, used set speed profiles r5r JAR.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set walk and bike speed — set_speed","text":"","code":"set_speed(r5r_core, speed, mode)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set walk and bike speed — set_speed","text":"r5r_core object connect R5 routing engine, created setup_r5(). speed number representing speed km/h. mode string. Either \"bike\" \"walk\".","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set walk and bike speed — set_speed","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_suboptimal_minutes.html","id":null,"dir":"Reference","previous_headings":"","what":"Set suboptimal minutes — set_suboptimal_minutes","title":"Set suboptimal minutes — set_suboptimal_minutes","text":"Sets number suboptimal minutes considered detailed_itineraries() routing. R5 documentation: \"parameter compensates fact GTFS contain information schedule deviation (lateness). min-max travel time range trains zero, since trips reported always timings schedule. option overlap (temporally) alternatives, easily eliminated alternative marginally better. want effectively push max travel time alternatives bit account fact always run schedule\".","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_suboptimal_minutes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set suboptimal minutes — set_suboptimal_minutes","text":"","code":"set_suboptimal_minutes(   r5r_core,   suboptimal_minutes,   fare_structure,   shortest_path )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_suboptimal_minutes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set suboptimal minutes — set_suboptimal_minutes","text":"r5r_core object connect R5 routing engine, created setup_r5(). suboptimal_minutes number. fare_structure fare structure object, following convention set setup_fare_structure(). object describes transit fares calculated. Please see fare structure vignette understand object structured: vignette(\"fare_structure\", package = \"r5r\"). shortest_path logical.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_suboptimal_minutes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set suboptimal minutes — set_suboptimal_minutes","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_time_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Set time window — set_time_window","title":"Set time window — set_time_window","text":"Sets time window used R5.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_time_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set time window — set_time_window","text":"","code":"set_time_window(r5r_core, time_window)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_time_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set time window — set_time_window","text":"r5r_core object connect R5 routing engine, created setup_r5(). time_window number.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_time_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set time window — set_time_window","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"Set verbose argument — set_verbose","title":"Set verbose argument — set_verbose","text":"Indicates whether R5 output informative messages . Please note R5 error messages still reported even verbose FALSE.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set verbose argument — set_verbose","text":"","code":"set_verbose(r5r_core, verbose)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_verbose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set verbose argument — set_verbose","text":"r5r_core object connect R5 routing engine, created setup_r5(). verbose logical, passed function .","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/set_verbose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set verbose argument — set_verbose","text":"Invisibly returns TRUE.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_fare_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a fare structure to calculate the monetary costs of trips — setup_fare_structure","title":"Setup a fare structure to calculate the monetary costs of trips — setup_fare_structure","text":"Creates basic fare structure describes transit fares calculated travel_time_matrix(), expanded_travel_time_matrix(), accessibility() pareto_frontier(). fare structure can manually edited adjusted existing rules study area, long stick basic premises. Please see fare structure vignette information.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_fare_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a fare structure to calculate the monetary costs of trips — setup_fare_structure","text":"","code":"setup_fare_structure(   r5r_core,   base_fare,   by = \"MODE\",   debug_path = NULL,   debug_info = NULL )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_fare_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a fare structure to calculate the monetary costs of trips — setup_fare_structure","text":"r5r_core object connect R5 routing engine, created setup_r5(). base_fare numeric. base value used populate fare structure. string. Describes fare_types (classification created assign fares different routes) distributed among routes. Possible values MODE, AGENCY GENERIC. MODE used mode determines price route (e.g. buses given city cost $5). AGENCY used agency operates route determines price (.e. two different routes/modes operated single agency cost ; note can also use AGENCY_NAME, agency_ids listed GTFS easily interpreted). GENERIC used routes cost . Please note classification can later edited better suit needs (, example, two types buses cost , one offers discounts riding subway one ), parameter may save work. debug_path Either path .csv file NULL. NULL (default), fare debugging capabilities disabled - .e. way check fare calculation correct. path provided, r5r saves different itineraries respective fares specified file. itinerary described controlled debug_info. debug_info Either string (debug_path path) NULL (default). effect debug_path NULL. string, accepts values MODE, ROUTE MODE_ROUTE. values dictates itinerary information written output. suppose itinerary composed two transit legs: first subway leg whose route_id 001, bus legs whose route_id 007. debug_info MODE, itinerary described SUBWAY|BUS. ROUTE, 001|007. MODE_ROUTE, SUBWAY 001|BUS 007. Please note final debug information contain itineraries fact used itineraries returned travel_time_matrix(), accessibility() pareto_frontier(), itineraries R5 checked calculating routes. imposes performance penalty tracking debug information (positive effect returning larger sample itineraries, might help finding implementation issues fare structure).","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_fare_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a fare structure to calculate the monetary costs of trips — setup_fare_structure","text":"fare structure object.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_fare_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup a fare structure to calculate the monetary costs of trips — setup_fare_structure","text":"","code":"library(r5r)  data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  fare_structure <- setup_fare_structure(r5r_core, base_fare = 5)  # to debug fare calculation fare_structure <- setup_fare_structure(   r5r_core,   base_fare = 5,   debug_path = \"fare_debug.csv\",   debug_info = \"MODE\" )  fare_structure$debug_settings #> $output_file #> [1] \"fare_debug.csv\" #>  #> $trip_info #> [1] \"MODE\" #>   # debugging can be manually turned off by setting output_file to \"\" fare_structure$debug_settings <- \"\""},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_r5.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a transport network used for routing in R5 — setup_r5","title":"Create a transport network used for routing in R5 — setup_r5","text":"Builds multimodal transport network used routing R5, combining multiple data inputs present directory network saved . directory must contain one street network file (.osm.pbf format). may optionally contain one public transport GTFS feeds (GTFS.zip format, GTFS name feed), used public transport routing, .tif file describing elevation profile study area. one GTFS feed directory, feeds merged. already 'network.dat' file directory, function simply read load memory (unless specified ).","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_r5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a transport network used for routing in R5 — setup_r5","text":"","code":"setup_r5(   data_path,   verbose = FALSE,   temp_dir = FALSE,   elevation = \"TOBLER\",   overwrite = FALSE )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_r5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a transport network used for routing in R5 — setup_r5","text":"data_path string pointing directory data inputs stored built network.dat saved. verbose logical. Whether show R5 informative messages running function. Defaults FALSE (please note case R5 error messages still shown). Setting verbose TRUE shows detailed output, can useful debugging issues caught r5r. temp_dir logical. Whether R5 Jar file saved temporary directory. Defaults FALSE. elevation string. name impedance function used calculate impedance walking cycling based street slopes. Available options include TOBLER (Default) MINETTI, NONE ignore elevation. R5 loads elevation data .tif files saved inside data_path directory. See info Details . overwrite logical. Whether overwrite existing network.dat use cached file. Defaults FALSE (.e. use cached network).","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_r5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a transport network used for routing in R5 — setup_r5","text":"rJava object connect R5 routing engine.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_r5.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a transport network used for routing in R5 — setup_r5","text":"information TOBLER MINETTI options calculate effects elevation travel times can found references : Campbell, M. J., et al (2019). Using crowdsourced fitness tracker data model relationship slope travel rates. Applied geography, 106, 93-107. doi:10.1016/j.apgeog.2019.03.008 . Minetti, . E., et al (2002). Energy cost walking running extreme uphill downhill slopes. Journal applied physiology. doi:10.1152/japplphysiol.01177.2001 . Tobler, W. (1993). Three presentations geographical analysis modeling: Non-isotropic geographic modeling speculations geometry geography global spatial analysis. Technical Report. National center geographic information analysis. 93 (1). https://escholarship.org/uc/item/05r820mz.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/setup_r5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a transport network used for routing in R5 — setup_r5","text":"","code":"library(r5r)  # directory with street network and gtfs files data_path <- system.file(\"extdata/poa\", package = \"r5r\")  r5r_core <- setup_r5(data_path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat"},{"path":"https://ipeagit.github.io/r5r/dev/reference/start_r5r_java.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Java and Check Version — start_r5r_java","title":"Initialize Java and Check Version — start_r5r_java","text":"Sets Java logging r5r ensures Java SE Development Kit 21 installed.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/start_r5r_java.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Java and Check Version — start_r5r_java","text":"","code":"start_r5r_java(data_path, temp_dir = FALSE, verbose = FALSE)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/start_r5r_java.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Java and Check Version — start_r5r_java","text":"data_path character string. directory log file saved. temp_dir logical. Whether jar file saved temporary directory. Defaults FALSE. verbose logical. Whether show informative messages. Defaults FALSE.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/start_r5r_java.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Java and Check Version — start_r5r_java","text":"return value. function stop execution error Java 21 found.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/start_r5r_java.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize Java and Check Version — start_r5r_java","text":"function initializes Java Virtual Machine (JVM) log path r5r, checks installed Java version 21. , stops informative error message download links.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/stop_r5.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop running r5r core — stop_r5","title":"Stop running r5r core — stop_r5","text":"Stops running r5r cores.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/stop_r5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop running r5r core — stop_r5","text":"","code":"stop_r5(...)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/stop_r5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop running r5r core — stop_r5","text":"... r5r_core objects currently running. default, cores supplied running cores stopped.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/stop_r5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop running r5r core — stop_r5","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/stop_r5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop running r5r core — stop_r5","text":"","code":"library(r5r)  path <- system.file(\"extdata/poa\", package = \"r5r\")  r5r_core <- setup_r5(path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/street_network_to_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract OpenStreetMap network in sf format from a network.dat file — street_network_to_sf","title":"Extract OpenStreetMap network in sf format from a network.dat file — street_network_to_sf","text":"Extract OpenStreetMap network sf format network.dat file","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/street_network_to_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract OpenStreetMap network in sf format from a network.dat file — street_network_to_sf","text":"","code":"street_network_to_sf(r5r_core)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/street_network_to_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract OpenStreetMap network in sf format from a network.dat file — street_network_to_sf","text":"r5r_core object connect R5 routing engine, created setup_r5().","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/street_network_to_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract OpenStreetMap network in sf format from a network.dat file — street_network_to_sf","text":"list two components street network sf format: vertices (POINT) edges (LINESTRING).","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/street_network_to_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract OpenStreetMap network in sf format from a network.dat file — street_network_to_sf","text":"","code":"library(r5r)  # build transport network path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  # extract street network from r5r_core street_net <- street_network_to_sf(r5r_core)  stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/tempdir_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a temporary directory path that is unique with every call — tempdir_unique","title":"Return a temporary directory path that is unique with every call — tempdir_unique","text":"different built tempdir() return directory within given runtime. Always returns unique directory","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/tempdir_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a temporary directory path that is unique with every call — tempdir_unique","text":"","code":"tempdir_unique()"},{"path":"https://ipeagit.github.io/r5r/dev/reference/tempdir_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a temporary directory path that is unique with every call — tempdir_unique","text":"Path. Returns path created temporary directory","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/transit_network_to_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract transit network in sf format — transit_network_to_sf","title":"Extract transit network in sf format — transit_network_to_sf","text":"Extracts transit network network.dat file (built setup_r5()) sf format.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/transit_network_to_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract transit network in sf format — transit_network_to_sf","text":"","code":"transit_network_to_sf(r5r_core)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/transit_network_to_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract transit network in sf format — transit_network_to_sf","text":"r5r_core object connect R5 routing engine, created setup_r5().","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/transit_network_to_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract transit network in sf format — transit_network_to_sf","text":"list two components transit network sf format: route shapes (LINESTRING) transit stops (POINT). route_id/short_name might appear different geometries. occurs route associated one shape_ids GTFS feed used create transit network. transit stops might returned geometry POINT EMPTY (.e. missing spatial coordinates). may occur transit stop snapped road network, possibly GTFS feed used create transit network covers area larger .osm.pbf input data.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/transit_network_to_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract transit network in sf format — transit_network_to_sf","text":"","code":"library(r5r)  # build transport network path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  # extract transit network from r5r_core transit_net <- transit_network_to_sf(r5r_core)  stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/travel_time_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate travel time matrix between origin destination pairs considering a departure time — travel_time_matrix","title":"Calculate travel time matrix between origin destination pairs considering a departure time — travel_time_matrix","text":"Fast computation travel time estimates one multiple origin destination pairs. function considers departure time set user. want calculate travel times considering time arrival, look arrival_travel_time_matrix() function.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/travel_time_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate travel time matrix between origin destination pairs considering a departure time — travel_time_matrix","text":"","code":"travel_time_matrix(   r5r_core,   origins,   destinations,   mode = \"WALK\",   mode_egress = \"WALK\",   departure_datetime = Sys.time(),   time_window = 10L,   percentiles = 50L,   fare_structure = NULL,   max_fare = Inf,   max_walk_time = Inf,   max_bike_time = Inf,   max_car_time = Inf,   max_trip_duration = 120L,   walk_speed = 3.6,   bike_speed = 12,   max_rides = 3,   max_lts = 2,   draws_per_minute = 5L,   n_threads = Inf,   verbose = FALSE,   progress = FALSE,   output_dir = NULL )"},{"path":"https://ipeagit.github.io/r5r/dev/reference/travel_time_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate travel time matrix between origin destination pairs considering a departure time — travel_time_matrix","text":"r5r_core object connect R5 routing engine, created setup_r5(). origins, destinations Either POINT sf object WGS84 CRS, data.frame containing columns id, lon lat. mode character vector. transport modes allowed access, transfer vehicle legs trips. Defaults WALK. Please see details options. mode_egress character vector. transport mode used egress last public transport. can either WALK, BICYCLE CAR. Defaults WALK. Ignored public transport used. departure_datetime POSIXct object. Please note departure time influences public transport legs. working public transport networks, please check calendar.txt within GTFS feeds valid dates. Please see details information datetimes parsed. time_window integer. time window minutes r5r calculate multiple travel time matrices departing minute. Defaults 10 minutes. default, function returns result based median travel times, user can set percentiles parameter extract results. Please read time window vignette details usage vignette(\"time_window\", package = \"r5r\") percentiles integer vector (max length 5). Specifies percentile use returning travel time estimates within given time window. example, 25th travel time percentile B 15 minutes, 25% trips taken points within specified time window shorter 15 minutes. Defaults 50, returning median travel time. vector length bigger 1 passed, output contains additional column percentile specifying percentile travel time estimate. estimate. Due upstream restrictions, 5 percentiles can specified time. details, please see R5 documentation https://docs.conveyal.com/analysis/methodology#accounting--variability. fare_structure fare structure object, following convention set setup_fare_structure(). object describes transit fares calculated. Please see fare structure vignette understand object structured: vignette(\"fare_structure\", package = \"r5r\"). max_fare number. maximum value trips can cost calculating fastest journey origin destination pair. max_walk_time integer. maximum walking time (minutes) access egress transit network, make transfers within network complete walk-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_walk_time 15, get trips 15 minutes walk leg reach transit another 15 minutes walk leg reach destination leaving transit. walk-trips, whenever max_walk_time differs max_trip_duration, lowest value considered. max_bike_time integer. maximum cycling time (minutes) access egress transit network, make transfers within network complete bicycle-trips. Defaults restrictions (numeric value Inf), long max_trip_duration respected. routing transit trips, max time considered separately leg (e.g. set max_bike_time 15, get trips 15 minutes cycle leg reach transit another 15 minutes cycle leg reach destination leaving transit. bicycle-trips, whenever max_bike_time differs max_trip_duration, lowest value considered. max_car_time integer. maximum driving time (minutes) access egress transit network. Defaults restrictions, long max_trip_duration respected. max time considered separately leg (e.g. set max_car_time 15 minutes, potentially drive 15 minutes reach transit, another 15 minutes reach destination leaving transit). Defaults Inf, limit. max_trip_duration integer. maximum trip duration minutes. Defaults 120 minutes (2 hours). walk_speed numeric. Average walk speed km/h. Defaults 3.6 km/h. bike_speed numeric. Average cycling speed km/h. Defaults 12 km/h. max_rides integer. maximum number public transport rides allowed trip. Defaults 3. max_lts integer 1 4. maximum level traffic stress cyclists tolerate. value 1 means cyclists travel quietest streets, value 4 indicates cyclists can travel road. Defaults 2. Please see details information. draws_per_minute integer. number Monte Carlo draws perform per time window minute calculating travel time matrices estimating accessibility. Defaults 5. mean 300 draws 60-minute time window, example. parameter affects results GTFS feeds contain frequencies.txt table. GTFS feed frequency table, r5r still allows multiple runs set time_window deterministic way. n_threads integer. number threads use running router parallel. Defaults use available threads (Inf). verbose logical. Whether show R5 informative messages running function. Defaults FALSE (please note case R5 error messages still shown). Setting verbose TRUE shows detailed output, can useful debugging issues caught r5r. progress logical. Whether show progress counter running router. Defaults FALSE. works verbose set FALSE, progress counter interfere R5's output messages. Setting progress TRUE may impose small penalty computation efficiency, progress counter must synchronized among active threads. output_dir Either NULL path existing directory. NULL (default), function write one .csv file results origin specified directory. case, function returns path specified parameter. parameter particularly useful running memory-constrained settings writing results directly disk prevents r5r loading RAM memory.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/travel_time_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate travel time matrix between origin destination pairs considering a departure time — travel_time_matrix","text":"data.table travel time estimates (minutes) origin destination pairs. Pairs whose trips completed within maximum travel time /whose origin far street network returned data.table. output_dir NULL, function returns path specified parameter, .csv files containing results saved.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/travel_time_matrix.html","id":"transport-modes","dir":"Reference","previous_headings":"","what":"Transport modes","title":"Calculate travel time matrix between origin destination pairs considering a departure time — travel_time_matrix","text":"R5 allows multiple combinations transport modes. options include: Transit modes: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR. option TRANSIT automatically considers public transport modes available. Non transit modes: WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/travel_time_matrix.html","id":"level-of-traffic-stress-lts-","dir":"Reference","previous_headings":"","what":"Level of Traffic Stress (LTS)","title":"Calculate travel time matrix between origin destination pairs considering a departure time — travel_time_matrix","text":"cycling enabled R5 (passing value BIKE either mode mode_egress), setting max_lts allow cycling streets given level danger/stress. Setting max_lts 1, example, allow cycling separated bicycle infrastructure low-traffic streets routing revert walking traversing links LTS exceeding 1. Setting max_lts 3 allow cycling links LTS 1, 2 3. Routing also reverts walking street segment tagged non-bikable OSM (e.g. staircase), independently specified max LTS. default methodology assigning LTS values network edges based commonly tagged attributes OSM ways. See info LTS original documentation R5 Conveyal https://docs.conveyal.com/learn-/traffic-stress. summary: LTS 1: Tolerable children. includes low-speed, low-volume streets, well separated bicycle facilities (parking-protected lanes cycle tracks). LTS 2: Tolerable mainstream adult population. includes streets cyclists dedicated lanes interact traffic formal crossing. LTS 3: Tolerable \"enthused confident\" cyclists. includes streets may involve close proximity moderate- high-speed vehicular traffic. LTS 4: Tolerable \"strong fearless\" cyclists. includes streets cyclists required mix moderate- high-speed vehicular traffic. advanced users, can provide custom LTS values adding tag <key = \"lts\"> osm.pbf file.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/travel_time_matrix.html","id":"datetime-parsing","dir":"Reference","previous_headings":"","what":"Datetime parsing","title":"Calculate travel time matrix between origin destination pairs considering a departure time — travel_time_matrix","text":"r5r ignores timezone attribute datetime objects parsing dates times, using study area's timezone instead. example, say running calculations using Rio de Janeiro, Brazil, study area. datetime .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\") parsed May 13th, 2019, 14:00h Rio's local time, expected. .POSIXct(\"13-05-2019 14:00:00\", format = \"%d-%m-%Y %H:%M:%S\", tz = \"Europe/Paris\") also parsed exact date time Rio's local time, perhaps surprisingly, ignoring timezone attribute.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/travel_time_matrix.html","id":"routing-algorithm","dir":"Reference","previous_headings":"","what":"Routing algorithm","title":"Calculate travel time matrix between origin destination pairs considering a departure time — travel_time_matrix","text":"travel_time_matrix(), expanded_travel_time_matrix(), arrival_travel_time_matrix()  accessibility() functions use R5-specific extension RAPTOR routing algorithm (see Conway et al., 2017). RAPTOR extension uses systematic sample one departure per minute time window set user 'time_window' parameter. detailed description base RAPTOR can found Delling et al (2015). However, whenever user includes transit fares inputs functions, automatically switch use R5-specific extension McRAPTOR routing algorithm. Conway, M. W., Byrd, ., & van der Linden, M. (2017). Evidence-based transit land use sketch planning using interactive accessibility methods combined schedule headway-based networks. Transportation Research Record, 2653(1), 45-53. doi:10.3141/2653-06 Delling, D., Pajor, T., & Werneck, R. F. (2015). Round-based public transit routing. Transportation Science, 49(3), 591-604. doi:10.1287/trsc.2014.0534","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/travel_time_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate travel time matrix between origin destination pairs considering a departure time — travel_time_matrix","text":"","code":"library(r5r)  # build transport network data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  # load origin/destination points points <- read.csv(file.path(data_path, \"poa_points_of_interest.csv\"))  departure_datetime <- as.POSIXct(   \"13-05-2019 14:00:00\",   format = \"%d-%m-%Y %H:%M:%S\" )  ttm <- travel_time_matrix(   r5r_core,   origins = points,   destinations = points,   mode = c(\"WALK\", \"TRANSIT\"),   departure_datetime = departure_datetime,   max_trip_duration = 60 ) head(ttm) #>          from_id               to_id travel_time_p50 #>           <char>              <char>           <int> #> 1: public_market       public_market               0 #> 2: public_market bus_central_station              14 #> 3: public_market    gasometer_museum              12 #> 4: public_market santa_casa_hospital              15 #> 5: public_market            townhall               3 #> 6: public_market     piratini_palace              17  # using a larger time window ttm <- travel_time_matrix(   r5r_core,   origins = points,   destinations = points,   mode = c(\"WALK\", \"TRANSIT\"),   departure_datetime = departure_datetime,   time_window = 30,   max_trip_duration = 60 ) head(ttm) #>          from_id               to_id travel_time_p50 #>           <char>              <char>           <int> #> 1: public_market       public_market               0 #> 2: public_market bus_central_station              14 #> 3: public_market    gasometer_museum              13 #> 4: public_market santa_casa_hospital              15 #> 5: public_market            townhall               3 #> 6: public_market     piratini_palace              17  # selecting different percentiles ttm <- travel_time_matrix(   r5r_core,   origins = points,   destinations = points,   mode = c(\"WALK\", \"TRANSIT\"),   departure_datetime = departure_datetime,   time_window = 30,   percentiles = c(25, 50, 75),   max_trip_duration = 60 ) head(ttm) #>          from_id               to_id travel_time_p25 travel_time_p50 #>           <char>              <char>           <int>           <int> #> 1: public_market       public_market               0               0 #> 2: public_market bus_central_station              13              14 #> 3: public_market    gasometer_museum              12              13 #> 4: public_market santa_casa_hospital              15              15 #> 5: public_market            townhall               3               3 #> 6: public_market     piratini_palace              17              17 #>    travel_time_p75 #>              <int> #> 1:               0 #> 2:              14 #> 3:              14 #> 4:              15 #> 5:               3 #> 6:              17  # use a fare structure and set a max fare to take monetary constraints into # account fare_structure <- read_fare_structure(   file.path(data_path, \"fares/fares_poa.zip\") ) ttm <- travel_time_matrix(   r5r_core,   origins = points,   destinations = points,   mode = c(\"WALK\", \"TRANSIT\"),   departure_datetime = departure_datetime,   fare_structure = fare_structure,   max_fare = 5,   max_trip_duration = 60, ) head(ttm) #>          from_id               to_id travel_time_p50 #>           <char>              <char>           <int> #> 1: public_market       public_market               0 #> 2: public_market bus_central_station              14 #> 3: public_market    gasometer_museum              13 #> 4: public_market santa_casa_hospital              15 #> 5: public_market            townhall               3 #> 6: public_market     piratini_palace              17  stop_r5(r5r_core) #> r5r_core has been successfully stopped."},{"path":"https://ipeagit.github.io/r5r/dev/reference/write_fare_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a fare structure object to disk — write_fare_structure","title":"Write a fare structure object to disk — write_fare_structure","text":"Writes fare structure object disk. Fare structure saved collection .csv files inside .zip file.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/write_fare_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a fare structure object to disk — write_fare_structure","text":"","code":"write_fare_structure(fare_structure, file_path)"},{"path":"https://ipeagit.github.io/r5r/dev/reference/write_fare_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a fare structure object to disk — write_fare_structure","text":"fare_structure fare structure object, following convention set setup_fare_structure(). object describes transit fares calculated. Please see fare structure vignette understand object structured: vignette(\"fare_structure\", package = \"r5r\"). file_path path .zip file. fare structure written .","code":""},{"path":"https://ipeagit.github.io/r5r/dev/reference/write_fare_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a fare structure object to disk — write_fare_structure","text":"path passed file_path, invisibly.","code":""},{"path":[]},{"path":"https://ipeagit.github.io/r5r/dev/reference/write_fare_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a fare structure object to disk — write_fare_structure","text":"","code":"library(r5r)  data_path <- system.file(\"extdata/poa\", package = \"r5r\") r5r_core <- setup_r5(data_path) #>  #> Using cached network.dat from /home/runner/work/_temp/Library/r5r/extdata/poa/network.dat  fare_structure <- setup_fare_structure(r5r_core, base_fare = 5)  tmpfile <- tempfile(\"sample_fare_structure\", fileext = \".zip\") write_fare_structure(fare_structure, tmpfile)"},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-230-dev","dir":"Changelog","previous_headings":"","what":"r5r 2.3.0 dev","title":"r5r 2.3.0 dev","text":"Major changes New function arrival_travel_time_matrix() calculate travel time matrix origin destination pairs considering time arrival, instead depature time. Closes #291 New function modify_osm_carspeeds() build routable network modified OSM car speeds account different scenarios traffic congestion road closure. Closes #289 now implemented reverse search optimization direct transport modes (walking cycling) functions travel_time_matrix(), expanded_travel_time_matrix() arrival_travel_time_matrix(). pactice, means functions now much faster multiple origins destinations. Closes #450 Minor changes routing properties within little jar reset default routing execution #453 Bug fixes","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-220","dir":"Changelog","previous_headings":"","what":"r5r 2.2.0","title":"r5r 2.2.0","text":"CRAN release: 2025-05-22 Major changes r5r now uses latest version R5 V7.4. Closed #436 detailed_itineraries() now new parameter osm_link_ids. logical. Whether output include additional columns OSM ids road segments used along trip geometry Defaults FALSE. Closes issues #298 Minor changes r5r now throws informative error message geographic extent input data exceeds limit 975000 km2. Closes issues #389, #405, #406, #407, #412 #421. Thanks PR #426 Alex Magnus. removed JRI dependency r5r little jar. helps debugging issues Java without need using R. side effect r5r now creates r5rlog file data path. Bug fixes Fixed bug prevented package check availability transit services specific days service . Fixed bug isochrone function throwing false error message regarding cutoff short. Closed #434 #433 New contributors Alex Magnus Luyu Liu Daniel Snow Funding Department Geography & Planning, University Toronto via Bousfield Visitorship.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-210","dir":"Changelog","previous_headings":"","what":"r5r 2.1.0","title":"r5r 2.1.0","text":"CRAN release: 2025-03-08 Minor changes isochrone() function new boolean parameter polygon_output allows users choose whether output polygon- line-based isochrone. Closed #382 using public transit modes, package now automatically detects whether transit services operation seleced departure date. services, package return error message. Closed #326","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-20","dir":"Changelog","previous_headings":"","what":"r5r 2.0","title":"r5r 2.0","text":"CRAN release: 2024-04-11 Breaking changes r5r uses now JDK 21 higher (Breaking changes). Closed #350. r5r now uses latest version R5 V7.1. Closed #350 Major changes r5r now stores R5 Jar file user dir using tools::R_user_dir() New function r5r_cache() manage cache R5 Jar file. using JDK 21, version r5r also fixed incompatibility MAC ARM processors. Closed #315 Minor changes accessibility() function, value max_trip_duration now capped max value passed cutoffs parameter. Closes #342. Updated documentation parameter max_walk_time make clear walk-trips, whenever max_walk_time differs max_trip_duration, lowest value considered. Closes #353 Updated documentation parameter max_bike_time make clear bicycle-trips, whenever max_bike_time differs max_trip_duration, lowest value considered. Closes #353 Improved documentation parameter suboptimal_minutes detailed_itineraries() function. Updated vignette time window explain parameter behaves used detailed_itineraries() function. Bug Fixes - Fixed bug prevented use output_dir parameter detailed_itineraries(all_to_all = TRUE) function. Closes #327 contribution (PR #354) Luyu Liu. - Fixed bug prevented detailed_itineraries working frequency-based GTFS feeds. work frequency-based GTFS feeds. New contributors r5r - Luyu Liu","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-110","dir":"Changelog","previous_headings":"","what":"r5r 1.1.0","title":"r5r 1.1.0","text":"CRAN release: 2023-08-08 Major changes New isochrone()function. Closes #123, addresses requrests issues #164 #328. New vignette calculating / visualizing isochrones r5r. New vignette responses frequently asked questions (FAQ) r5r users. Minor changes default value time_window set 10 minutes functions avoid weird results reported upstream R5. Closes #342. Removed mention percentiles parameter expanded_travel_time_matrix() function expose parameter users. Closes #343. Updated vignette calculating / visualizing accessibility r5r.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-101","dir":"Changelog","previous_headings":"","what":"r5r 1.0.1","title":"r5r 1.0.1","text":"CRAN release: 2023-03-06 Bug fixes Updated R5 version 6.9. fixed bugs upstream, one often prevented users build network using cropped OSM data. Closes #325.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-100","dir":"Changelog","previous_headings":"","what":"r5r 1.0.0","title":"r5r 1.0.0","text":"CRAN release: 2023-01-27 Breaking changes Replaced max_walk_dist max_bike_dist parameters max_walk_time max_bike_time better align R5 inputs. Closes #273. r5r now uses R5’s native elevation weighting walking cycling impedance functions. result r5r raster rgdal package dependencies anymore. Closes #243 #233. Parameters breakdown breakdown_stat travel_time_matrix() removed. New function expanded_travel_time_matrix() used retrieve detailed information travel time matrices. r5rnow throws error users simultaneously pass one following modes c('WALK','CAR','BICYCLE') transport_mode parameter. modes understood mutually exclusive. Function setup_r5() longer version parameter. New functions New function expanded_travel_time_matrix() calculate minute--minute travel times origin destination pairs get additional information public transport routes, number transfers, total access, waiting, -vehicle transfer times. New function pareto_frontier() compute travel time monetary cost Pareto frontier. New function r5r_sitrep() generate r5r situation report help debug code errors setup_fare_structure() setup fare structure calculate monetary costs trips read_fare_structure() read fare structure object file write_fare_structure() write fare structure object disk Major changes Now using R5 latest version 6.8. New time_window parameter New suboptimal_minutes parameter, extends search space returns larger number trips beyond fastest ones; Support fare calculator new max_fare parameter; Routing frequencies GFTS, including support Monte Carlo draws New parameter draws_per_minute travel_time_matrix(), accessibility() pareto_frontier() functions. Closes #230. New parameter output_dir routing functions, can used specify directory results saved .csv files (one file origin). parameter particularly useful running estimates memory-constrained settings, writing results disk prevents R5 storing memory. accessibility estimates accessibility() now returned doubles / class numeric, except using step decay function. Closes #235. detailed_itineraries() function new parameter all_to_all, allows users set whether want query routes origins destinations (all_to_all = TRUE) query routes 1st origin 1st destination, 2nd origin 2nd destination, (all_to_all = FALSE, default). Closes #224. Minor changes Package documentation extensively updated expanded. Improved documentation cutoffs parameter accessibility(), clarifying function accepts 12 cutoff values. Closes #216. Improved documentation percentiles parameter accessibility() travel_time_matrix(), clarifying function accepts 5 values. Closes #246. r5r now downloads R5 Jar directly Conveyal’s github, making package stable. Closes #226. functions now use verbose = FALSE progress = FALSE default. Routing functions now require users non-ambiguous specifying modes, raising errors disambiguate . new behaviour replaces old one, functions end trying “guess” mode used edge cases. Information bicycle ‘level traffic stress’ now added output street_network_to_sf(). Closes #251. New columns info population, schools jobs example data sets Sao Paulo Porto Alegre Bug fixes Fixed bug transit_network_to_sf() generated routes invalid geometries. Closes #256. Fixed bug prevented setup_r5(path, overwrite = TRUE) work.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-071","dir":"Changelog","previous_headings":"","what":"r5r 0.7.1","title":"r5r 0.7.1","text":"CRAN release: 2022-07-05 Minor change Replaced akima package interp package r5r Suggests, requested CRAN.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-070","dir":"Changelog","previous_headings":"","what":"r5r 0.7.0","title":"r5r 0.7.0","text":"CRAN release: 2022-02-11 Major changes version onwards, r5r downloads R5 JAR github, provides stable connection Ipea server. number Monte Carlo draws perform per time window minute calculating travel time matrices estimating accessibility now set via r5r.montecarlo_draws option. Defaults 5. mean 300 draws 60 minutes time window, example. user may also set custom value using options(r5r.montecarlo_draws = 10L) (substitute 10L value want set). Minor changes Changed total_time column name combined_time travel_time_matrix() output, avoid confusion travel_time column.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-060","dir":"Changelog","previous_headings":"","what":"r5r 0.6.0","title":"r5r 0.6.0","text":"CRAN release: 2021-10-26 Major changes Updated R5 version 6.4. Closes #182. Significant performance improvements functions, due faster method consolidating outputs. Closes #180 New function transit_network_to_sf(), extract public transport network R5 simple features. Closes #179 New progress parameter accessibility(), travel_time_matrix, detailed_itineraries() functions, show hide progress counter indicator. Closes #186 Created new support function java_to_dt() removed dependency jdx package. Closes #206 Reduced r5r’s internet dependency quite considerably. Internet now required download latest R5 jar hasn’t downloaded . Closes #197. Added two new parameters breakdown breakdown_stat travel_time_matrix(). allows users breakdown travel time information trip subcomponents (access time, waiting time, traveling time etc). allows one extract information makes computation time slower. Closes #194 Minor changes New setup_r5() parameter, overwrite, forces building new network.dat, even one already exists. Improved documentation parameter departure_datetime clarify parameter must set local time. Closes #188 Improved documentation regarding personalized LTS values. Closes #190. Improved documentation transit_network_to_sf() regarding stops snapped road network. Closes #192. Improved documentation max_walking_dist max_cycling_dist parameters. Closes #193. Started raising error CRS origins/destinations WGS 84. Closes #201.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-050","dir":"Changelog","previous_headings":"","what":"r5r 0.5.0","title":"r5r 0.5.0","text":"CRAN release: 2021-07-02 Major changes New function accessibility() calculate access opportunities. Closes #169 New function find_snap() help users identify street network input origin destination points snapped . Closes 168. New parameter max_bike_dist added routing accessibility functions. Closes #174 Implemented temporary solution elevation. Closes #171. Now r5r can read Digital Elevation Model (DEM) data raster files .tif format weight street network walking cycling according terrain’s slopes. Ideally, like see solution accounts elevation implemented upstream R5. now, temporary solution implemented within r5r. Minor changes street_network_to_sf() now clean output provided GTFS covers larger area street network pbf. Closes #173 size poa.zip sample GTFS data reduced due CRAN policies. Closes #172. Progress counter Implemented. Closes 150. verbose parameter set FALSE, r5r prints progress counter eventual ERROR messages. comes minor penalty computation performance. Hence kept verbose defautls TRUE. Bug fixes Fixed bug prevented r5r running without internet connection. Closes #163.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-04-0","dir":"Changelog","previous_headings":"","what":"r5r 0.4-0","title":"r5r 0.4-0","text":"Major changes Updated R5 version 6.2. Closes #158. Added max_lts parameter detailed_itineraries() travel_time_matrix() functions. LTS stands Level Traffic Stress, allows modeling bicycle comfort routing analysis. Additional information can found Conveyal’s documentation well blog posts 1 2. Closes #160 Minor changes New support function check_connection() check internect connection download files Ipea server.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-03-3","dir":"Changelog","previous_headings":"","what":"r5r 0.3-3","title":"r5r 0.3-3","text":"CRAN release: 2021-03-09 Major changes New vignette calculate visualize isochrones. New vignette calculate visualize accessibility. Significant performance increase detailed_itineraries() shortest_path = TRUE. Closes #153. Paper r5r package published Findings. Closes #108. Minor changes travel_time_matrix() detailed_itineraries() now output detailed messages console, verbose = TRUE. shall make debugging package much easier. Improved documentation travel_time_matrix(). Closes #149. Checks origins/destinations inputs make sure id column. Closes #154. Bug fixes Fixed introductory vignette list files included package installation. Closes #111. Fixed conflict geobr package downloading metadata. Closed #137. Fixed bug parsing date time departure_datetime detailed_itineraries() travel_time_matrix(). Closes #147. Fixed bug detailed_itineraries() caused crash shape route input GTFS broken. Closes #145","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-03-2","dir":"Changelog","previous_headings":"","what":"r5r 0.3-2","title":"r5r 0.3-2","text":"CRAN release: 2021-01-08 Minor changes r5r save medatada file package directory anymore, following CRAN’s policies. Closed #136.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-03-1","dir":"Changelog","previous_headings":"","what":"r5r 0.3-1","title":"r5r 0.3-1","text":"CRAN release: 2021-01-07 Minor changes Allow combination bicycle public transport. Closed #135. Added new parameter mode_egress routing functions, users can explicitly set transport mode used egress public transport (walk, car bicycle). Closed #63. Allow using r5r package -line, provided user successfully ran setup_r5() .","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-03-0","dir":"Changelog","previous_headings":"","what":"r5r 0.3-0","title":"r5r 0.3-0","text":"CRAN release: 2021-01-05 Major changes Added Conveyal’s R5 repo git submodule. help improve long term integration r5r R5. Closed #105. Internal changes make r5r compatible R5 latest version 6.0.1. Minor changes Added columns population number schools sample data set Porto Alegre allow accessibility examples. Closed #128. percentiles parameter travel_time_matrix function now accepts 5 cut points due changes R5.","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-02-1","dir":"Changelog","previous_headings":"","what":"r5r 0.2-1","title":"r5r 0.2-1","text":"CRAN release: 2020-11-30 Minor changes Expanded number routes sample GTFS Porto Alegre, allowing complex/realistic examples. Fixes format columns output travel_matrix_function user sets time_window parameter. Closes #127. Remove repeated bus route alternatives output detailed_itineraries Explicitly link destination points street network starting. Closes #121","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-02-0","dir":"Changelog","previous_headings":"","what":"r5r 0.2-0","title":"r5r 0.2-0","text":"CRAN release: 2020-10-20 Major changes Function travel_time_matrix now new parameters time_window percentiles now calculates travel times multiple departure times minute within given time window. now, function automatically set number Monte Carlo Draws 5 times size time_window. Closes #104 #118 Minor changes Added sample frequency-based GTFS Sao Paulo. Closed #116 Improved documentation routing functions adding info routing algorithms used R5. Closes #114","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-v01-1","dir":"Changelog","previous_headings":"","what":"r5r v0.1-1","title":"r5r v0.1-1","text":"CRAN release: 2020-09-25 Minor changes Fixed issues time zone setting departure times Now r5r can installed R (>= 3.6) Appropriate hyperlinks indocumentation Metadata now downloaded https:// server","code":""},{"path":"https://ipeagit.github.io/r5r/dev/news/index.html","id":"r5r-01-0","dir":"Changelog","previous_headings":"","what":"r5r 0.1-0","title":"r5r 0.1-0","text":"Launch r5r v0.1.0 CRAN. Package website https://ipeagit.github.io/r5r/","code":""}]
